/* This file is autogenerated by scripts/decodetree.py.  */

typedef struct {
    int frt;
    int fra;
    int frb;
    int frc;
    bool rc;
} arg_A;

typedef struct {
    int frt;
    int fra;
    int frb;
    bool rc;
} arg_A_tab;

typedef struct {
    int rt;
    int ra;
    int rb;
    int bc;
} arg_A_tab_bc;

typedef struct {
    int frt;
    int fra;
    int frc;
    bool rc;
} arg_A_tac;

typedef struct {
    int frt;
    int frb;
    bool rc;
} arg_A_tb;

typedef struct {
    int rt;
    int ra;
    int64_t si;
} arg_D;

typedef struct {
    int rt;
    int d;
} arg_DX;

typedef struct {
    int vrt;
    int b;
} arg_DX_b;

typedef struct {
    int bf;
    bool l;
    int ra;
    int imm;
} arg_D_bf;

typedef struct {
    int rt;
    int ra;
    uint64_t ui;
} arg_D_ui;

typedef struct {
    int xa;
    int xb;
    int xt;
    int pmsk;
    int xmsk;
    int ymsk;
} arg_MMIRR_XX3;

typedef struct {
    int vrt;
    int vra;
    int vrb;
    int rc;
} arg_VA;

typedef struct {
    int vrt;
    int vra;
    int vrb;
    bool rc;
} arg_VC;

typedef struct {
    int vrt;
    int vra;
    int vrb;
    int sh;
} arg_VN;

typedef struct {
    int vrt;
    int vra;
    int vrb;
} arg_VX;

typedef struct {
    int bf;
    int vra;
    int vrb;
} arg_VX_bf;

typedef struct {
    int rt;
    bool mp;
    int vrb;
} arg_VX_mp;

typedef struct {
    int rt;
    int vrb;
    int n;
} arg_VX_n;

typedef struct {
    int vrt;
    int vrb;
} arg_VX_tb;

typedef struct {
    int vrt;
    int vrb;
    bool rc;
} arg_VX_tb_rc;

typedef struct {
    int vrt;
    int uim;
    int vrb;
} arg_VX_uim4;

typedef struct {
    int rt;
    int ra;
    int rb;
} arg_X;

typedef struct {
    int rt;
    int bhrbe;
} arg_XFX_bhrbe;

typedef struct {
    uint8_t s;
} arg_XL_s;

typedef struct {
    int rt;
    int ra;
    int rb;
    bool oe;
    bool rc;
} arg_XO;

typedef struct {
    int rt;
    int ra;
    bool oe;
    bool rc;
} arg_XO_ta;

typedef struct {
    int rt;
    int ra;
    int rb;
    bool rc;
} arg_XO_tab_rc;

typedef struct {
    int xt;
    int xb;
} arg_XX2;

typedef struct {
    int bf;
    int xb;
    int uim;
} arg_XX2_bf_uim;

typedef struct {
    int bf;
    int xb;
} arg_XX2_bf_xb;

typedef struct {
    int xt;
    int xb;
    uint8_t uim;
} arg_XX2_uim;

typedef struct {
    int xt;
    int xa;
    int xb;
} arg_XX3;

typedef struct {
    int xt;
    int xa;
    int xb;
    int dm;
} arg_XX3_dm;

typedef struct {
    int xt;
    int xa;
    int xb;
    bool rc;
} arg_XX3_rc;

typedef struct {
    int xt;
    int xa;
    int xb;
    int xc;
} arg_XX4;

typedef struct {
    int ra;
} arg_X_a;

typedef struct {
    int bf;
    int ra;
    int rb;
} arg_X_bf;

typedef struct {
    int bf;
    int rb;
} arg_X_bf_b;

typedef struct {
    int bf;
    int uim;
    int rb;
} arg_X_bf_uim;

typedef struct {
    int bf;
    bool l;
    int ra;
    int rb;
} arg_X_bfl;

typedef struct {
    int rt;
    int bi;
} arg_X_bi;

typedef struct {
    int frtp;
    int vrb;
} arg_X_frtp_vrb;

typedef struct {
    uint8_t ih;
} arg_X_ih;

typedef struct {
    int rt;
    int imm;
} arg_X_imm2;

typedef struct {
    int rt;
    int imm;
} arg_X_imm3;

typedef struct {
    int xt;
    uint8_t imm;
    int vrb;
} arg_X_imm5;

typedef struct {
    int xt;
    uint8_t imm;
} arg_X_imm8;

typedef struct {
    int rb;
} arg_X_rb;

typedef struct {
    int rt;
    int ra;
    int rb;
    bool rc;
} arg_X_rc;

typedef struct {
    int rs;
    bool l;
} arg_X_rs_l;

typedef struct {
    int rs;
    int ra;
} arg_X_sa;

typedef struct {
    int rs;
    int ra;
    int rc;
} arg_X_sa_rc;

typedef struct {
    int l;
    int sc;
} arg_X_sync;

typedef struct {
    int rt;
} arg_X_t;

typedef struct {
    int rt;
    bool rc;
} arg_X_t_rc;

typedef struct {
    int rt;
    int rb;
} arg_X_tb;

typedef struct {
    int rt;
    int rb;
    bool rc;
} arg_X_tb_rc;

typedef struct {
    int rt;
    int rb;
    bool s;
    bool rc;
} arg_X_tb_s_rc;

typedef struct {
    int rt;
    int rb;
    int sp;
    bool rc;
} arg_X_tb_sp_rc;

typedef struct {
    int rt;
    int l;
} arg_X_tl;

typedef struct {
    int rb;
    int rs;
    int ric;
    bool prs;
    bool r;
} arg_X_tlbie;

typedef struct {
    int xt;
    uint8_t uim;
} arg_X_uim5;

typedef struct {
    int vrt;
    int frbp;
} arg_X_vrt_frbp;

typedef struct {
    int bf;
    int fra;
    int dm;
} arg_Z22_bf_fra;

typedef struct {
    int rt;
    int ra;
    int sh;
    bool rc;
} arg_Z22_ta_sh_rc;

typedef struct {
    int frt;
    int fra;
    int frb;
    int rmc;
    bool rc;
} arg_Z23_tab;

typedef struct {
    int frt;
    int frb;
    bool r;
    int rmc;
    bool rc;
} arg_Z23_tb;

typedef struct {
    int te;
    int frt;
    int frb;
    int rmc;
    bool rc;
} arg_Z23_te_tb;

typedef struct {
} arg_decode_insn3265;

typedef arg_D arg_LBZ;
static bool trans_LBZ(DisasContext *ctx, arg_LBZ *a);
typedef arg_D arg_LBZU;
static bool trans_LBZU(DisasContext *ctx, arg_LBZU *a);
typedef arg_X arg_LBZX;
static bool trans_LBZX(DisasContext *ctx, arg_LBZX *a);
typedef arg_X arg_LBZUX;
static bool trans_LBZUX(DisasContext *ctx, arg_LBZUX *a);
typedef arg_D arg_LHZ;
static bool trans_LHZ(DisasContext *ctx, arg_LHZ *a);
typedef arg_D arg_LHZU;
static bool trans_LHZU(DisasContext *ctx, arg_LHZU *a);
typedef arg_X arg_LHZX;
static bool trans_LHZX(DisasContext *ctx, arg_LHZX *a);
typedef arg_X arg_LHZUX;
static bool trans_LHZUX(DisasContext *ctx, arg_LHZUX *a);
typedef arg_D arg_LHA;
static bool trans_LHA(DisasContext *ctx, arg_LHA *a);
typedef arg_D arg_LHAU;
static bool trans_LHAU(DisasContext *ctx, arg_LHAU *a);
typedef arg_X arg_LHAX;
static bool trans_LHAX(DisasContext *ctx, arg_LHAX *a);
typedef arg_X arg_LHAXU;
static bool trans_LHAXU(DisasContext *ctx, arg_LHAXU *a);
typedef arg_D arg_LWZ;
static bool trans_LWZ(DisasContext *ctx, arg_LWZ *a);
typedef arg_D arg_LWZU;
static bool trans_LWZU(DisasContext *ctx, arg_LWZU *a);
typedef arg_X arg_LWZX;
static bool trans_LWZX(DisasContext *ctx, arg_LWZX *a);
typedef arg_X arg_LWZUX;
static bool trans_LWZUX(DisasContext *ctx, arg_LWZUX *a);
typedef arg_D arg_LWA;
static bool trans_LWA(DisasContext *ctx, arg_LWA *a);
typedef arg_X arg_LWAX;
static bool trans_LWAX(DisasContext *ctx, arg_LWAX *a);
typedef arg_X arg_LWAUX;
static bool trans_LWAUX(DisasContext *ctx, arg_LWAUX *a);
typedef arg_D arg_LD;
static bool trans_LD(DisasContext *ctx, arg_LD *a);
typedef arg_D arg_LDU;
static bool trans_LDU(DisasContext *ctx, arg_LDU *a);
typedef arg_X arg_LDX;
static bool trans_LDX(DisasContext *ctx, arg_LDX *a);
typedef arg_X arg_LDUX;
static bool trans_LDUX(DisasContext *ctx, arg_LDUX *a);
typedef arg_D arg_LQ;
static bool trans_LQ(DisasContext *ctx, arg_LQ *a);
typedef arg_D arg_STB;
static bool trans_STB(DisasContext *ctx, arg_STB *a);
typedef arg_D arg_STBU;
static bool trans_STBU(DisasContext *ctx, arg_STBU *a);
typedef arg_X arg_STBX;
static bool trans_STBX(DisasContext *ctx, arg_STBX *a);
typedef arg_X arg_STBUX;
static bool trans_STBUX(DisasContext *ctx, arg_STBUX *a);
typedef arg_D arg_STH;
static bool trans_STH(DisasContext *ctx, arg_STH *a);
typedef arg_D arg_STHU;
static bool trans_STHU(DisasContext *ctx, arg_STHU *a);
typedef arg_X arg_STHX;
static bool trans_STHX(DisasContext *ctx, arg_STHX *a);
typedef arg_X arg_STHUX;
static bool trans_STHUX(DisasContext *ctx, arg_STHUX *a);
typedef arg_D arg_STW;
static bool trans_STW(DisasContext *ctx, arg_STW *a);
typedef arg_D arg_STWU;
static bool trans_STWU(DisasContext *ctx, arg_STWU *a);
typedef arg_X arg_STWX;
static bool trans_STWX(DisasContext *ctx, arg_STWX *a);
typedef arg_X arg_STWUX;
static bool trans_STWUX(DisasContext *ctx, arg_STWUX *a);
typedef arg_D arg_STD;
static bool trans_STD(DisasContext *ctx, arg_STD *a);
typedef arg_D arg_STDU;
static bool trans_STDU(DisasContext *ctx, arg_STDU *a);
typedef arg_X arg_STDX;
static bool trans_STDX(DisasContext *ctx, arg_STDX *a);
typedef arg_X arg_STDUX;
static bool trans_STDUX(DisasContext *ctx, arg_STDUX *a);
typedef arg_D arg_STQ;
static bool trans_STQ(DisasContext *ctx, arg_STQ *a);
typedef arg_X_bfl arg_CMP;
static bool trans_CMP(DisasContext *ctx, arg_CMP *a);
typedef arg_X_bfl arg_CMPL;
static bool trans_CMPL(DisasContext *ctx, arg_CMPL *a);
typedef arg_D_bf arg_CMPI;
static bool trans_CMPI(DisasContext *ctx, arg_CMPI *a);
typedef arg_D_bf arg_CMPLI;
static bool trans_CMPLI(DisasContext *ctx, arg_CMPLI *a);
typedef arg_X_bfl arg_CMPRB;
static bool trans_CMPRB(DisasContext *ctx, arg_CMPRB *a);
typedef arg_X_bf arg_CMPEQB;
static bool trans_CMPEQB(DisasContext *ctx, arg_CMPEQB *a);
typedef arg_X arg_TW;
static bool trans_TW(DisasContext *ctx, arg_TW *a);
typedef arg_X arg_TD;
static bool trans_TD(DisasContext *ctx, arg_TD *a);
typedef arg_D arg_TWI;
static bool trans_TWI(DisasContext *ctx, arg_TWI *a);
typedef arg_D arg_TDI;
static bool trans_TDI(DisasContext *ctx, arg_TDI *a);
typedef arg_A_tab_bc arg_ISEL;
static bool trans_ISEL(DisasContext *ctx, arg_ISEL *a);
typedef arg_XO arg_ADD;
static bool trans_ADD(DisasContext *ctx, arg_ADD *a);
typedef arg_XO arg_ADDC;
static bool trans_ADDC(DisasContext *ctx, arg_ADDC *a);
typedef arg_XO arg_ADDE;
static bool trans_ADDE(DisasContext *ctx, arg_ADDE *a);
typedef arg_X arg_ADDEX;
static bool trans_ADDEX(DisasContext *ctx, arg_ADDEX *a);
typedef arg_D arg_ADDI;
static bool trans_ADDI(DisasContext *ctx, arg_ADDI *a);
typedef arg_D arg_ADDIS;
static bool trans_ADDIS(DisasContext *ctx, arg_ADDIS *a);
typedef arg_D arg_ADDIC;
static bool trans_ADDIC(DisasContext *ctx, arg_ADDIC *a);
typedef arg_D arg_ADDIC_;
static bool trans_ADDIC_(DisasContext *ctx, arg_ADDIC_ *a);
typedef arg_DX arg_ADDPCIS;
static bool trans_ADDPCIS(DisasContext *ctx, arg_ADDPCIS *a);
typedef arg_XO_ta arg_ADDME;
static bool trans_ADDME(DisasContext *ctx, arg_ADDME *a);
typedef arg_XO_ta arg_ADDZE;
static bool trans_ADDZE(DisasContext *ctx, arg_ADDZE *a);
typedef arg_XO arg_SUBF;
static bool trans_SUBF(DisasContext *ctx, arg_SUBF *a);
typedef arg_D arg_SUBFIC;
static bool trans_SUBFIC(DisasContext *ctx, arg_SUBFIC *a);
typedef arg_XO arg_SUBFC;
static bool trans_SUBFC(DisasContext *ctx, arg_SUBFC *a);
typedef arg_XO arg_SUBFE;
static bool trans_SUBFE(DisasContext *ctx, arg_SUBFE *a);
typedef arg_XO_ta arg_SUBFME;
static bool trans_SUBFME(DisasContext *ctx, arg_SUBFME *a);
typedef arg_XO_ta arg_SUBFZE;
static bool trans_SUBFZE(DisasContext *ctx, arg_SUBFZE *a);
typedef arg_D arg_MULLI;
static bool trans_MULLI(DisasContext *ctx, arg_MULLI *a);
typedef arg_XO_tab_rc arg_MULLW;
static bool trans_MULLW(DisasContext *ctx, arg_MULLW *a);
typedef arg_XO_tab_rc arg_MULLWO;
static bool trans_MULLWO(DisasContext *ctx, arg_MULLWO *a);
typedef arg_XO_tab_rc arg_MULHW;
static bool trans_MULHW(DisasContext *ctx, arg_MULHW *a);
typedef arg_XO_tab_rc arg_MULHWU;
static bool trans_MULHWU(DisasContext *ctx, arg_MULHWU *a);
typedef arg_XO arg_DIVW;
static bool trans_DIVW(DisasContext *ctx, arg_DIVW *a);
typedef arg_XO arg_DIVWU;
static bool trans_DIVWU(DisasContext *ctx, arg_DIVWU *a);
typedef arg_XO arg_DIVWE;
static bool trans_DIVWE(DisasContext *ctx, arg_DIVWE *a);
typedef arg_XO arg_DIVWEU;
static bool trans_DIVWEU(DisasContext *ctx, arg_DIVWEU *a);
typedef arg_X arg_MODSW;
static bool trans_MODSW(DisasContext *ctx, arg_MODSW *a);
typedef arg_X arg_MODUW;
static bool trans_MODUW(DisasContext *ctx, arg_MODUW *a);
typedef arg_X_tl arg_DARN;
static bool trans_DARN(DisasContext *ctx, arg_DARN *a);
typedef arg_XO_ta arg_NEG;
static bool trans_NEG(DisasContext *ctx, arg_NEG *a);
typedef arg_XO_tab_rc arg_MULLD;
static bool trans_MULLD(DisasContext *ctx, arg_MULLD *a);
typedef arg_XO_tab_rc arg_MULLDO;
static bool trans_MULLDO(DisasContext *ctx, arg_MULLDO *a);
typedef arg_XO_tab_rc arg_MULHD;
static bool trans_MULHD(DisasContext *ctx, arg_MULHD *a);
typedef arg_XO_tab_rc arg_MULHDU;
static bool trans_MULHDU(DisasContext *ctx, arg_MULHDU *a);
typedef arg_VA arg_MADDLD;
static bool trans_MADDLD(DisasContext *ctx, arg_MADDLD *a);
typedef arg_VA arg_MADDHD;
static bool trans_MADDHD(DisasContext *ctx, arg_MADDHD *a);
typedef arg_VA arg_MADDHDU;
static bool trans_MADDHDU(DisasContext *ctx, arg_MADDHDU *a);
typedef arg_XO arg_DIVD;
static bool trans_DIVD(DisasContext *ctx, arg_DIVD *a);
typedef arg_XO arg_DIVDU;
static bool trans_DIVDU(DisasContext *ctx, arg_DIVDU *a);
typedef arg_XO arg_DIVDE;
static bool trans_DIVDE(DisasContext *ctx, arg_DIVDE *a);
typedef arg_XO arg_DIVDEU;
static bool trans_DIVDEU(DisasContext *ctx, arg_DIVDEU *a);
typedef arg_X arg_MODSD;
static bool trans_MODSD(DisasContext *ctx, arg_MODSD *a);
typedef arg_X arg_MODUD;
static bool trans_MODUD(DisasContext *ctx, arg_MODUD *a);
typedef arg_D_ui arg_ANDI_;
static bool trans_ANDI_(DisasContext *ctx, arg_ANDI_ *a);
typedef arg_D_ui arg_ANDIS_;
static bool trans_ANDIS_(DisasContext *ctx, arg_ANDIS_ *a);
typedef arg_D_ui arg_ORI;
static bool trans_ORI(DisasContext *ctx, arg_ORI *a);
typedef arg_D_ui arg_ORIS;
static bool trans_ORIS(DisasContext *ctx, arg_ORIS *a);
typedef arg_D_ui arg_XORI;
static bool trans_XORI(DisasContext *ctx, arg_XORI *a);
typedef arg_D_ui arg_XORIS;
static bool trans_XORIS(DisasContext *ctx, arg_XORIS *a);
typedef arg_X_rc arg_AND;
static bool trans_AND(DisasContext *ctx, arg_AND *a);
typedef arg_X_rc arg_ANDC;
static bool trans_ANDC(DisasContext *ctx, arg_ANDC *a);
typedef arg_X_rc arg_NAND;
static bool trans_NAND(DisasContext *ctx, arg_NAND *a);
typedef arg_X_rc arg_OR;
static bool trans_OR(DisasContext *ctx, arg_OR *a);
typedef arg_X_rc arg_ORC;
static bool trans_ORC(DisasContext *ctx, arg_ORC *a);
typedef arg_X_rc arg_NOR;
static bool trans_NOR(DisasContext *ctx, arg_NOR *a);
typedef arg_X_rc arg_XOR;
static bool trans_XOR(DisasContext *ctx, arg_XOR *a);
typedef arg_X_rc arg_EQV;
static bool trans_EQV(DisasContext *ctx, arg_EQV *a);
typedef arg_X_rc arg_CMPB;
static bool trans_CMPB(DisasContext *ctx, arg_CMPB *a);
typedef arg_X_sa_rc arg_EXTSB;
static bool trans_EXTSB(DisasContext *ctx, arg_EXTSB *a);
typedef arg_X_sa_rc arg_EXTSH;
static bool trans_EXTSH(DisasContext *ctx, arg_EXTSH *a);
typedef arg_X_sa_rc arg_EXTSW;
static bool trans_EXTSW(DisasContext *ctx, arg_EXTSW *a);
typedef arg_X_sa_rc arg_CNTLZW;
static bool trans_CNTLZW(DisasContext *ctx, arg_CNTLZW *a);
typedef arg_X_sa_rc arg_CNTTZW;
static bool trans_CNTTZW(DisasContext *ctx, arg_CNTTZW *a);
typedef arg_X_sa_rc arg_CNTLZD;
static bool trans_CNTLZD(DisasContext *ctx, arg_CNTLZD *a);
typedef arg_X_sa_rc arg_CNTTZD;
static bool trans_CNTTZD(DisasContext *ctx, arg_CNTTZD *a);
typedef arg_X_sa_rc arg_POPCNTB;
static bool trans_POPCNTB(DisasContext *ctx, arg_POPCNTB *a);
typedef arg_X_sa arg_POPCNTW;
static bool trans_POPCNTW(DisasContext *ctx, arg_POPCNTW *a);
typedef arg_X_sa arg_POPCNTD;
static bool trans_POPCNTD(DisasContext *ctx, arg_POPCNTD *a);
typedef arg_X_sa arg_PRTYW;
static bool trans_PRTYW(DisasContext *ctx, arg_PRTYW *a);
typedef arg_X_sa arg_PRTYD;
static bool trans_PRTYD(DisasContext *ctx, arg_PRTYD *a);
typedef arg_X arg_BPERMD;
static bool trans_BPERMD(DisasContext *ctx, arg_BPERMD *a);
typedef arg_X arg_CFUGED;
static bool trans_CFUGED(DisasContext *ctx, arg_CFUGED *a);
typedef arg_X arg_CNTLZDM;
static bool trans_CNTLZDM(DisasContext *ctx, arg_CNTLZDM *a);
typedef arg_X arg_CNTTZDM;
static bool trans_CNTTZDM(DisasContext *ctx, arg_CNTTZDM *a);
typedef arg_X arg_PDEPD;
static bool trans_PDEPD(DisasContext *ctx, arg_PDEPD *a);
typedef arg_X arg_PEXTD;
static bool trans_PEXTD(DisasContext *ctx, arg_PEXTD *a);
typedef arg_X arg_HASHST;
static bool trans_HASHST(DisasContext *ctx, arg_HASHST *a);
typedef arg_X arg_HASHCHK;
static bool trans_HASHCHK(DisasContext *ctx, arg_HASHCHK *a);
typedef arg_X arg_HASHSTP;
static bool trans_HASHSTP(DisasContext *ctx, arg_HASHSTP *a);
typedef arg_X arg_HASHCHKP;
static bool trans_HASHCHKP(DisasContext *ctx, arg_HASHCHKP *a);
typedef arg_X arg_ADDG6S;
static bool trans_ADDG6S(DisasContext *ctx, arg_ADDG6S *a);
typedef arg_X_sa arg_CDTBCD;
static bool trans_CDTBCD(DisasContext *ctx, arg_CDTBCD *a);
typedef arg_X_sa arg_CBCDTD;
static bool trans_CBCDTD(DisasContext *ctx, arg_CBCDTD *a);
typedef arg_D arg_LFS;
static bool trans_LFS(DisasContext *ctx, arg_LFS *a);
typedef arg_D arg_LFSU;
static bool trans_LFSU(DisasContext *ctx, arg_LFSU *a);
typedef arg_X arg_LFSX;
static bool trans_LFSX(DisasContext *ctx, arg_LFSX *a);
typedef arg_X arg_LFSUX;
static bool trans_LFSUX(DisasContext *ctx, arg_LFSUX *a);
typedef arg_D arg_LFD;
static bool trans_LFD(DisasContext *ctx, arg_LFD *a);
typedef arg_D arg_LFDU;
static bool trans_LFDU(DisasContext *ctx, arg_LFDU *a);
typedef arg_X arg_LFDX;
static bool trans_LFDX(DisasContext *ctx, arg_LFDX *a);
typedef arg_X arg_LFDUX;
static bool trans_LFDUX(DisasContext *ctx, arg_LFDUX *a);
typedef arg_D arg_STFS;
static bool trans_STFS(DisasContext *ctx, arg_STFS *a);
typedef arg_D arg_STFSU;
static bool trans_STFSU(DisasContext *ctx, arg_STFSU *a);
typedef arg_X arg_STFSX;
static bool trans_STFSX(DisasContext *ctx, arg_STFSX *a);
typedef arg_X arg_STFSUX;
static bool trans_STFSUX(DisasContext *ctx, arg_STFSUX *a);
typedef arg_D arg_STFD;
static bool trans_STFD(DisasContext *ctx, arg_STFD *a);
typedef arg_D arg_STFDU;
static bool trans_STFDU(DisasContext *ctx, arg_STFDU *a);
typedef arg_X arg_STFDX;
static bool trans_STFDX(DisasContext *ctx, arg_STFDX *a);
typedef arg_X arg_STFDUX;
static bool trans_STFDUX(DisasContext *ctx, arg_STFDUX *a);
typedef arg_A_tab arg_FADD;
static bool trans_FADD(DisasContext *ctx, arg_FADD *a);
typedef arg_A_tab arg_FADDS;
static bool trans_FADDS(DisasContext *ctx, arg_FADDS *a);
typedef arg_A_tab arg_FSUB;
static bool trans_FSUB(DisasContext *ctx, arg_FSUB *a);
typedef arg_A_tab arg_FSUBS;
static bool trans_FSUBS(DisasContext *ctx, arg_FSUBS *a);
typedef arg_A_tac arg_FMUL;
static bool trans_FMUL(DisasContext *ctx, arg_FMUL *a);
typedef arg_A_tac arg_FMULS;
static bool trans_FMULS(DisasContext *ctx, arg_FMULS *a);
typedef arg_A_tab arg_FDIV;
static bool trans_FDIV(DisasContext *ctx, arg_FDIV *a);
typedef arg_A_tab arg_FDIVS;
static bool trans_FDIVS(DisasContext *ctx, arg_FDIVS *a);
typedef arg_A_tb arg_FSQRT;
static bool trans_FSQRT(DisasContext *ctx, arg_FSQRT *a);
typedef arg_A_tb arg_FSQRTS;
static bool trans_FSQRTS(DisasContext *ctx, arg_FSQRTS *a);
typedef arg_A_tb arg_FRE;
static bool trans_FRE(DisasContext *ctx, arg_FRE *a);
typedef arg_A_tb arg_FRES;
static bool trans_FRES(DisasContext *ctx, arg_FRES *a);
typedef arg_A_tb arg_FRSQRTE;
static bool trans_FRSQRTE(DisasContext *ctx, arg_FRSQRTE *a);
typedef arg_A_tb arg_FRSQRTES;
static bool trans_FRSQRTES(DisasContext *ctx, arg_FRSQRTES *a);
typedef arg_X_bf arg_FTDIV;
static bool trans_FTDIV(DisasContext *ctx, arg_FTDIV *a);
typedef arg_X_bf_b arg_FTSQRT;
static bool trans_FTSQRT(DisasContext *ctx, arg_FTSQRT *a);
typedef arg_A arg_FMADD;
static bool trans_FMADD(DisasContext *ctx, arg_FMADD *a);
typedef arg_A arg_FMADDS;
static bool trans_FMADDS(DisasContext *ctx, arg_FMADDS *a);
typedef arg_A arg_FMSUB;
static bool trans_FMSUB(DisasContext *ctx, arg_FMSUB *a);
typedef arg_A arg_FMSUBS;
static bool trans_FMSUBS(DisasContext *ctx, arg_FMSUBS *a);
typedef arg_A arg_FNMADD;
static bool trans_FNMADD(DisasContext *ctx, arg_FNMADD *a);
typedef arg_A arg_FNMADDS;
static bool trans_FNMADDS(DisasContext *ctx, arg_FNMADDS *a);
typedef arg_A arg_FNMSUB;
static bool trans_FNMSUB(DisasContext *ctx, arg_FNMSUB *a);
typedef arg_A arg_FNMSUBS;
static bool trans_FNMSUBS(DisasContext *ctx, arg_FNMSUBS *a);
typedef arg_A arg_FSEL;
static bool trans_FSEL(DisasContext *ctx, arg_FSEL *a);
typedef arg_X_bi arg_SETBC;
static bool trans_SETBC(DisasContext *ctx, arg_SETBC *a);
typedef arg_X_bi arg_SETBCR;
static bool trans_SETBCR(DisasContext *ctx, arg_SETBCR *a);
typedef arg_X_bi arg_SETNBC;
static bool trans_SETNBC(DisasContext *ctx, arg_SETNBC *a);
typedef arg_X_bi arg_SETNBCR;
static bool trans_SETNBCR(DisasContext *ctx, arg_SETNBCR *a);
typedef arg_X_t_rc arg_MFFS_ISA207;
static bool trans_MFFS_ISA207(DisasContext *ctx, arg_MFFS_ISA207 *a);
typedef arg_X_t_rc arg_MFFS;
static bool trans_MFFS(DisasContext *ctx, arg_MFFS *a);
typedef arg_X_t arg_MFFSCE;
static bool trans_MFFSCE(DisasContext *ctx, arg_MFFSCE *a);
typedef arg_X_tb arg_MFFSCRN;
static bool trans_MFFSCRN(DisasContext *ctx, arg_MFFSCRN *a);
typedef arg_X_tb arg_MFFSCDRN;
static bool trans_MFFSCDRN(DisasContext *ctx, arg_MFFSCDRN *a);
typedef arg_X_imm2 arg_MFFSCRNI;
static bool trans_MFFSCRNI(DisasContext *ctx, arg_MFFSCRNI *a);
typedef arg_X_imm3 arg_MFFSCDRNI;
static bool trans_MFFSCDRNI(DisasContext *ctx, arg_MFFSCDRNI *a);
typedef arg_X_t arg_MFFSL;
static bool trans_MFFSL(DisasContext *ctx, arg_MFFSL *a);
typedef arg_X_rc arg_DADD;
static bool trans_DADD(DisasContext *ctx, arg_DADD *a);
typedef arg_X_rc arg_DADDQ;
static bool trans_DADDQ(DisasContext *ctx, arg_DADDQ *a);
typedef arg_X_rc arg_DSUB;
static bool trans_DSUB(DisasContext *ctx, arg_DSUB *a);
typedef arg_X_rc arg_DSUBQ;
static bool trans_DSUBQ(DisasContext *ctx, arg_DSUBQ *a);
typedef arg_X_rc arg_DMUL;
static bool trans_DMUL(DisasContext *ctx, arg_DMUL *a);
typedef arg_X_rc arg_DMULQ;
static bool trans_DMULQ(DisasContext *ctx, arg_DMULQ *a);
typedef arg_X_rc arg_DDIV;
static bool trans_DDIV(DisasContext *ctx, arg_DDIV *a);
typedef arg_X_rc arg_DDIVQ;
static bool trans_DDIVQ(DisasContext *ctx, arg_DDIVQ *a);
typedef arg_X_bf arg_DCMPU;
static bool trans_DCMPU(DisasContext *ctx, arg_DCMPU *a);
typedef arg_X_bf arg_DCMPUQ;
static bool trans_DCMPUQ(DisasContext *ctx, arg_DCMPUQ *a);
typedef arg_X_bf arg_DCMPO;
static bool trans_DCMPO(DisasContext *ctx, arg_DCMPO *a);
typedef arg_X_bf arg_DCMPOQ;
static bool trans_DCMPOQ(DisasContext *ctx, arg_DCMPOQ *a);
typedef arg_Z22_bf_fra arg_DTSTDC;
static bool trans_DTSTDC(DisasContext *ctx, arg_DTSTDC *a);
typedef arg_Z22_bf_fra arg_DTSTDCQ;
static bool trans_DTSTDCQ(DisasContext *ctx, arg_DTSTDCQ *a);
typedef arg_Z22_bf_fra arg_DTSTDG;
static bool trans_DTSTDG(DisasContext *ctx, arg_DTSTDG *a);
typedef arg_Z22_bf_fra arg_DTSTDGQ;
static bool trans_DTSTDGQ(DisasContext *ctx, arg_DTSTDGQ *a);
typedef arg_X_bf arg_DTSTEX;
static bool trans_DTSTEX(DisasContext *ctx, arg_DTSTEX *a);
typedef arg_X_bf arg_DTSTEXQ;
static bool trans_DTSTEXQ(DisasContext *ctx, arg_DTSTEXQ *a);
typedef arg_X_bf arg_DTSTSF;
static bool trans_DTSTSF(DisasContext *ctx, arg_DTSTSF *a);
typedef arg_X_bf arg_DTSTSFQ;
static bool trans_DTSTSFQ(DisasContext *ctx, arg_DTSTSFQ *a);
typedef arg_X_bf_uim arg_DTSTSFI;
static bool trans_DTSTSFI(DisasContext *ctx, arg_DTSTSFI *a);
typedef arg_X_bf_uim arg_DTSTSFIQ;
static bool trans_DTSTSFIQ(DisasContext *ctx, arg_DTSTSFIQ *a);
typedef arg_Z23_te_tb arg_DQUAI;
static bool trans_DQUAI(DisasContext *ctx, arg_DQUAI *a);
typedef arg_Z23_te_tb arg_DQUAIQ;
static bool trans_DQUAIQ(DisasContext *ctx, arg_DQUAIQ *a);
typedef arg_Z23_tab arg_DQUA;
static bool trans_DQUA(DisasContext *ctx, arg_DQUA *a);
typedef arg_Z23_tab arg_DQUAQ;
static bool trans_DQUAQ(DisasContext *ctx, arg_DQUAQ *a);
typedef arg_Z23_tab arg_DRRND;
static bool trans_DRRND(DisasContext *ctx, arg_DRRND *a);
typedef arg_Z23_tab arg_DRRNDQ;
static bool trans_DRRNDQ(DisasContext *ctx, arg_DRRNDQ *a);
typedef arg_Z23_tb arg_DRINTX;
static bool trans_DRINTX(DisasContext *ctx, arg_DRINTX *a);
typedef arg_Z23_tb arg_DRINTXQ;
static bool trans_DRINTXQ(DisasContext *ctx, arg_DRINTXQ *a);
typedef arg_Z23_tb arg_DRINTN;
static bool trans_DRINTN(DisasContext *ctx, arg_DRINTN *a);
typedef arg_Z23_tb arg_DRINTNQ;
static bool trans_DRINTNQ(DisasContext *ctx, arg_DRINTNQ *a);
typedef arg_X_tb_rc arg_DCTDP;
static bool trans_DCTDP(DisasContext *ctx, arg_DCTDP *a);
typedef arg_X_tb_rc arg_DCTQPQ;
static bool trans_DCTQPQ(DisasContext *ctx, arg_DCTQPQ *a);
typedef arg_X_tb_rc arg_DRSP;
static bool trans_DRSP(DisasContext *ctx, arg_DRSP *a);
typedef arg_X_tb_rc arg_DRDPQ;
static bool trans_DRDPQ(DisasContext *ctx, arg_DRDPQ *a);
typedef arg_X_tb_rc arg_DCFFIX;
static bool trans_DCFFIX(DisasContext *ctx, arg_DCFFIX *a);
typedef arg_X_tb_rc arg_DCFFIXQ;
static bool trans_DCFFIXQ(DisasContext *ctx, arg_DCFFIXQ *a);
typedef arg_X_frtp_vrb arg_DCFFIXQQ;
static bool trans_DCFFIXQQ(DisasContext *ctx, arg_DCFFIXQQ *a);
typedef arg_X_tb_rc arg_DCTFIX;
static bool trans_DCTFIX(DisasContext *ctx, arg_DCTFIX *a);
typedef arg_X_tb_rc arg_DCTFIXQ;
static bool trans_DCTFIXQ(DisasContext *ctx, arg_DCTFIXQ *a);
typedef arg_X_vrt_frbp arg_DCTFIXQQ;
static bool trans_DCTFIXQQ(DisasContext *ctx, arg_DCTFIXQQ *a);
typedef arg_X_tb_sp_rc arg_DDEDPD;
static bool trans_DDEDPD(DisasContext *ctx, arg_DDEDPD *a);
typedef arg_X_tb_sp_rc arg_DDEDPDQ;
static bool trans_DDEDPDQ(DisasContext *ctx, arg_DDEDPDQ *a);
typedef arg_X_tb_s_rc arg_DENBCD;
static bool trans_DENBCD(DisasContext *ctx, arg_DENBCD *a);
typedef arg_X_tb_s_rc arg_DENBCDQ;
static bool trans_DENBCDQ(DisasContext *ctx, arg_DENBCDQ *a);
typedef arg_X_tb_rc arg_DXEX;
static bool trans_DXEX(DisasContext *ctx, arg_DXEX *a);
typedef arg_X_tb_rc arg_DXEXQ;
static bool trans_DXEXQ(DisasContext *ctx, arg_DXEXQ *a);
typedef arg_X_rc arg_DIEX;
static bool trans_DIEX(DisasContext *ctx, arg_DIEX *a);
typedef arg_X_rc arg_DIEXQ;
static bool trans_DIEXQ(DisasContext *ctx, arg_DIEXQ *a);
typedef arg_Z22_ta_sh_rc arg_DSCLI;
static bool trans_DSCLI(DisasContext *ctx, arg_DSCLI *a);
typedef arg_Z22_ta_sh_rc arg_DSCLIQ;
static bool trans_DSCLIQ(DisasContext *ctx, arg_DSCLIQ *a);
typedef arg_Z22_ta_sh_rc arg_DSCRI;
static bool trans_DSCRI(DisasContext *ctx, arg_DSCRI *a);
typedef arg_Z22_ta_sh_rc arg_DSCRIQ;
static bool trans_DSCRIQ(DisasContext *ctx, arg_DSCRIQ *a);
typedef arg_VX arg_VPMSUMD;
static bool trans_VPMSUMD(DisasContext *ctx, arg_VPMSUMD *a);
typedef arg_X arg_LVEBX;
static bool trans_LVEBX(DisasContext *ctx, arg_LVEBX *a);
typedef arg_X arg_LVEHX;
static bool trans_LVEHX(DisasContext *ctx, arg_LVEHX *a);
typedef arg_X arg_LVEWX;
static bool trans_LVEWX(DisasContext *ctx, arg_LVEWX *a);
typedef arg_X arg_LVX;
static bool trans_LVX(DisasContext *ctx, arg_LVX *a);
typedef arg_X arg_LVXL;
static bool trans_LVXL(DisasContext *ctx, arg_LVXL *a);
typedef arg_X arg_STVEBX;
static bool trans_STVEBX(DisasContext *ctx, arg_STVEBX *a);
typedef arg_X arg_STVEHX;
static bool trans_STVEHX(DisasContext *ctx, arg_STVEHX *a);
typedef arg_X arg_STVEWX;
static bool trans_STVEWX(DisasContext *ctx, arg_STVEWX *a);
typedef arg_X arg_STVX;
static bool trans_STVX(DisasContext *ctx, arg_STVX *a);
typedef arg_X arg_STVXL;
static bool trans_STVXL(DisasContext *ctx, arg_STVXL *a);
typedef arg_X arg_LVSL;
static bool trans_LVSL(DisasContext *ctx, arg_LVSL *a);
typedef arg_X arg_LVSR;
static bool trans_LVSR(DisasContext *ctx, arg_LVSR *a);
typedef arg_VC arg_VCMPEQUB;
static bool trans_VCMPEQUB(DisasContext *ctx, arg_VCMPEQUB *a);
typedef arg_VC arg_VCMPEQUH;
static bool trans_VCMPEQUH(DisasContext *ctx, arg_VCMPEQUH *a);
typedef arg_VC arg_VCMPEQUW;
static bool trans_VCMPEQUW(DisasContext *ctx, arg_VCMPEQUW *a);
typedef arg_VC arg_VCMPEQUD;
static bool trans_VCMPEQUD(DisasContext *ctx, arg_VCMPEQUD *a);
typedef arg_VC arg_VCMPEQUQ;
static bool trans_VCMPEQUQ(DisasContext *ctx, arg_VCMPEQUQ *a);
typedef arg_VC arg_VCMPGTSB;
static bool trans_VCMPGTSB(DisasContext *ctx, arg_VCMPGTSB *a);
typedef arg_VC arg_VCMPGTSH;
static bool trans_VCMPGTSH(DisasContext *ctx, arg_VCMPGTSH *a);
typedef arg_VC arg_VCMPGTSW;
static bool trans_VCMPGTSW(DisasContext *ctx, arg_VCMPGTSW *a);
typedef arg_VC arg_VCMPGTSD;
static bool trans_VCMPGTSD(DisasContext *ctx, arg_VCMPGTSD *a);
typedef arg_VC arg_VCMPGTSQ;
static bool trans_VCMPGTSQ(DisasContext *ctx, arg_VCMPGTSQ *a);
typedef arg_VC arg_VCMPGTUB;
static bool trans_VCMPGTUB(DisasContext *ctx, arg_VCMPGTUB *a);
typedef arg_VC arg_VCMPGTUH;
static bool trans_VCMPGTUH(DisasContext *ctx, arg_VCMPGTUH *a);
typedef arg_VC arg_VCMPGTUW;
static bool trans_VCMPGTUW(DisasContext *ctx, arg_VCMPGTUW *a);
typedef arg_VC arg_VCMPGTUD;
static bool trans_VCMPGTUD(DisasContext *ctx, arg_VCMPGTUD *a);
typedef arg_VC arg_VCMPGTUQ;
static bool trans_VCMPGTUQ(DisasContext *ctx, arg_VCMPGTUQ *a);
typedef arg_VC arg_VCMPNEB;
static bool trans_VCMPNEB(DisasContext *ctx, arg_VCMPNEB *a);
typedef arg_VC arg_VCMPNEH;
static bool trans_VCMPNEH(DisasContext *ctx, arg_VCMPNEH *a);
typedef arg_VC arg_VCMPNEW;
static bool trans_VCMPNEW(DisasContext *ctx, arg_VCMPNEW *a);
typedef arg_VC arg_VCMPNEZB;
static bool trans_VCMPNEZB(DisasContext *ctx, arg_VCMPNEZB *a);
typedef arg_VC arg_VCMPNEZH;
static bool trans_VCMPNEZH(DisasContext *ctx, arg_VCMPNEZH *a);
typedef arg_VC arg_VCMPNEZW;
static bool trans_VCMPNEZW(DisasContext *ctx, arg_VCMPNEZW *a);
typedef arg_VX_bf arg_VCMPSQ;
static bool trans_VCMPSQ(DisasContext *ctx, arg_VCMPSQ *a);
typedef arg_VX_bf arg_VCMPUQ;
static bool trans_VCMPUQ(DisasContext *ctx, arg_VCMPUQ *a);
typedef arg_VX arg_VAND;
static bool trans_VAND(DisasContext *ctx, arg_VAND *a);
typedef arg_VX arg_VANDC;
static bool trans_VANDC(DisasContext *ctx, arg_VANDC *a);
typedef arg_VX arg_VNAND;
static bool trans_VNAND(DisasContext *ctx, arg_VNAND *a);
typedef arg_VX arg_VOR;
static bool trans_VOR(DisasContext *ctx, arg_VOR *a);
typedef arg_VX arg_VORC;
static bool trans_VORC(DisasContext *ctx, arg_VORC *a);
typedef arg_VX arg_VNOR;
static bool trans_VNOR(DisasContext *ctx, arg_VNOR *a);
typedef arg_VX arg_VXOR;
static bool trans_VXOR(DisasContext *ctx, arg_VXOR *a);
typedef arg_VX arg_VEQV;
static bool trans_VEQV(DisasContext *ctx, arg_VEQV *a);
typedef arg_VX arg_VAVGSB;
static bool trans_VAVGSB(DisasContext *ctx, arg_VAVGSB *a);
typedef arg_VX arg_VAVGSH;
static bool trans_VAVGSH(DisasContext *ctx, arg_VAVGSH *a);
typedef arg_VX arg_VAVGSW;
static bool trans_VAVGSW(DisasContext *ctx, arg_VAVGSW *a);
typedef arg_VX arg_VAVGUB;
static bool trans_VAVGUB(DisasContext *ctx, arg_VAVGUB *a);
typedef arg_VX arg_VAVGUH;
static bool trans_VAVGUH(DisasContext *ctx, arg_VAVGUH *a);
typedef arg_VX arg_VAVGUW;
static bool trans_VAVGUW(DisasContext *ctx, arg_VAVGUW *a);
typedef arg_VX arg_VABSDUB;
static bool trans_VABSDUB(DisasContext *ctx, arg_VABSDUB *a);
typedef arg_VX arg_VABSDUH;
static bool trans_VABSDUH(DisasContext *ctx, arg_VABSDUH *a);
typedef arg_VX arg_VABSDUW;
static bool trans_VABSDUW(DisasContext *ctx, arg_VABSDUW *a);
typedef arg_VX_n arg_VGNB;
static bool trans_VGNB(DisasContext *ctx, arg_VGNB *a);
typedef arg_VX arg_VCFUGED;
static bool trans_VCFUGED(DisasContext *ctx, arg_VCFUGED *a);
typedef arg_VX arg_VCLZDM;
static bool trans_VCLZDM(DisasContext *ctx, arg_VCLZDM *a);
typedef arg_VX arg_VCTZDM;
static bool trans_VCTZDM(DisasContext *ctx, arg_VCTZDM *a);
typedef arg_VX arg_VPDEPD;
static bool trans_VPDEPD(DisasContext *ctx, arg_VPDEPD *a);
typedef arg_VX arg_VPEXTD;
static bool trans_VPEXTD(DisasContext *ctx, arg_VPEXTD *a);
typedef arg_VX_tb arg_VPRTYBD;
static bool trans_VPRTYBD(DisasContext *ctx, arg_VPRTYBD *a);
typedef arg_VX_tb arg_VPRTYBQ;
static bool trans_VPRTYBQ(DisasContext *ctx, arg_VPRTYBQ *a);
typedef arg_VX_tb arg_VPRTYBW;
static bool trans_VPRTYBW(DisasContext *ctx, arg_VPRTYBW *a);
typedef arg_VA arg_VEXTDUBVLX;
static bool trans_VEXTDUBVLX(DisasContext *ctx, arg_VEXTDUBVLX *a);
typedef arg_VA arg_VEXTDUBVRX;
static bool trans_VEXTDUBVRX(DisasContext *ctx, arg_VEXTDUBVRX *a);
typedef arg_VA arg_VEXTDUHVLX;
static bool trans_VEXTDUHVLX(DisasContext *ctx, arg_VEXTDUHVLX *a);
typedef arg_VA arg_VEXTDUHVRX;
static bool trans_VEXTDUHVRX(DisasContext *ctx, arg_VEXTDUHVRX *a);
typedef arg_VA arg_VEXTDUWVLX;
static bool trans_VEXTDUWVLX(DisasContext *ctx, arg_VEXTDUWVLX *a);
typedef arg_VA arg_VEXTDUWVRX;
static bool trans_VEXTDUWVRX(DisasContext *ctx, arg_VEXTDUWVRX *a);
typedef arg_VA arg_VEXTDDVLX;
static bool trans_VEXTDDVLX(DisasContext *ctx, arg_VEXTDDVLX *a);
typedef arg_VA arg_VEXTDDVRX;
static bool trans_VEXTDDVRX(DisasContext *ctx, arg_VEXTDDVRX *a);
typedef arg_VX_uim4 arg_VINSERTB;
static bool trans_VINSERTB(DisasContext *ctx, arg_VINSERTB *a);
typedef arg_VX_uim4 arg_VINSERTH;
static bool trans_VINSERTH(DisasContext *ctx, arg_VINSERTH *a);
typedef arg_VX_uim4 arg_VINSERTW;
static bool trans_VINSERTW(DisasContext *ctx, arg_VINSERTW *a);
typedef arg_VX_uim4 arg_VINSERTD;
static bool trans_VINSERTD(DisasContext *ctx, arg_VINSERTD *a);
typedef arg_VX arg_VINSBLX;
static bool trans_VINSBLX(DisasContext *ctx, arg_VINSBLX *a);
typedef arg_VX arg_VINSBRX;
static bool trans_VINSBRX(DisasContext *ctx, arg_VINSBRX *a);
typedef arg_VX arg_VINSHLX;
static bool trans_VINSHLX(DisasContext *ctx, arg_VINSHLX *a);
typedef arg_VX arg_VINSHRX;
static bool trans_VINSHRX(DisasContext *ctx, arg_VINSHRX *a);
typedef arg_VX arg_VINSWLX;
static bool trans_VINSWLX(DisasContext *ctx, arg_VINSWLX *a);
typedef arg_VX arg_VINSWRX;
static bool trans_VINSWRX(DisasContext *ctx, arg_VINSWRX *a);
typedef arg_VX arg_VINSDLX;
static bool trans_VINSDLX(DisasContext *ctx, arg_VINSDLX *a);
typedef arg_VX arg_VINSDRX;
static bool trans_VINSDRX(DisasContext *ctx, arg_VINSDRX *a);
typedef arg_VX_uim4 arg_VINSW;
static bool trans_VINSW(DisasContext *ctx, arg_VINSW *a);
typedef arg_VX_uim4 arg_VINSD;
static bool trans_VINSD(DisasContext *ctx, arg_VINSD *a);
typedef arg_VX arg_VINSBVLX;
static bool trans_VINSBVLX(DisasContext *ctx, arg_VINSBVLX *a);
typedef arg_VX arg_VINSBVRX;
static bool trans_VINSBVRX(DisasContext *ctx, arg_VINSBVRX *a);
typedef arg_VX arg_VINSHVLX;
static bool trans_VINSHVLX(DisasContext *ctx, arg_VINSHVLX *a);
typedef arg_VX arg_VINSHVRX;
static bool trans_VINSHVRX(DisasContext *ctx, arg_VINSHVRX *a);
typedef arg_VX arg_VINSWVLX;
static bool trans_VINSWVLX(DisasContext *ctx, arg_VINSWVLX *a);
typedef arg_VX arg_VINSWVRX;
static bool trans_VINSWVRX(DisasContext *ctx, arg_VINSWVRX *a);
typedef arg_VN arg_VSLDBI;
static bool trans_VSLDBI(DisasContext *ctx, arg_VSLDBI *a);
typedef arg_VN arg_VSRDBI;
static bool trans_VSRDBI(DisasContext *ctx, arg_VSRDBI *a);
typedef arg_VA arg_VPERM;
static bool trans_VPERM(DisasContext *ctx, arg_VPERM *a);
typedef arg_VA arg_VPERMR;
static bool trans_VPERMR(DisasContext *ctx, arg_VPERMR *a);
typedef arg_VA arg_VSEL;
static bool trans_VSEL(DisasContext *ctx, arg_VSEL *a);
typedef arg_VX arg_VSLB;
static bool trans_VSLB(DisasContext *ctx, arg_VSLB *a);
typedef arg_VX arg_VSLH;
static bool trans_VSLH(DisasContext *ctx, arg_VSLH *a);
typedef arg_VX arg_VSLW;
static bool trans_VSLW(DisasContext *ctx, arg_VSLW *a);
typedef arg_VX arg_VSLD;
static bool trans_VSLD(DisasContext *ctx, arg_VSLD *a);
typedef arg_VX arg_VSLQ;
static bool trans_VSLQ(DisasContext *ctx, arg_VSLQ *a);
typedef arg_VX arg_VSRB;
static bool trans_VSRB(DisasContext *ctx, arg_VSRB *a);
typedef arg_VX arg_VSRH;
static bool trans_VSRH(DisasContext *ctx, arg_VSRH *a);
typedef arg_VX arg_VSRW;
static bool trans_VSRW(DisasContext *ctx, arg_VSRW *a);
typedef arg_VX arg_VSRD;
static bool trans_VSRD(DisasContext *ctx, arg_VSRD *a);
typedef arg_VX arg_VSRQ;
static bool trans_VSRQ(DisasContext *ctx, arg_VSRQ *a);
typedef arg_VX arg_VSRAB;
static bool trans_VSRAB(DisasContext *ctx, arg_VSRAB *a);
typedef arg_VX arg_VSRAH;
static bool trans_VSRAH(DisasContext *ctx, arg_VSRAH *a);
typedef arg_VX arg_VSRAW;
static bool trans_VSRAW(DisasContext *ctx, arg_VSRAW *a);
typedef arg_VX arg_VSRAD;
static bool trans_VSRAD(DisasContext *ctx, arg_VSRAD *a);
typedef arg_VX arg_VSRAQ;
static bool trans_VSRAQ(DisasContext *ctx, arg_VSRAQ *a);
typedef arg_VX arg_VRLB;
static bool trans_VRLB(DisasContext *ctx, arg_VRLB *a);
typedef arg_VX arg_VRLH;
static bool trans_VRLH(DisasContext *ctx, arg_VRLH *a);
typedef arg_VX arg_VRLW;
static bool trans_VRLW(DisasContext *ctx, arg_VRLW *a);
typedef arg_VX arg_VRLD;
static bool trans_VRLD(DisasContext *ctx, arg_VRLD *a);
typedef arg_VX arg_VRLQ;
static bool trans_VRLQ(DisasContext *ctx, arg_VRLQ *a);
typedef arg_VX arg_VRLWMI;
static bool trans_VRLWMI(DisasContext *ctx, arg_VRLWMI *a);
typedef arg_VX arg_VRLDMI;
static bool trans_VRLDMI(DisasContext *ctx, arg_VRLDMI *a);
typedef arg_VX arg_VRLQMI;
static bool trans_VRLQMI(DisasContext *ctx, arg_VRLQMI *a);
typedef arg_VX arg_VRLWNM;
static bool trans_VRLWNM(DisasContext *ctx, arg_VRLWNM *a);
typedef arg_VX arg_VRLDNM;
static bool trans_VRLDNM(DisasContext *ctx, arg_VRLDNM *a);
typedef arg_VX arg_VRLQNM;
static bool trans_VRLQNM(DisasContext *ctx, arg_VRLQNM *a);
typedef arg_VX arg_VADDCUW;
static bool trans_VADDCUW(DisasContext *ctx, arg_VADDCUW *a);
typedef arg_VX arg_VADDCUQ;
static bool trans_VADDCUQ(DisasContext *ctx, arg_VADDCUQ *a);
typedef arg_VX arg_VADDUQM;
static bool trans_VADDUQM(DisasContext *ctx, arg_VADDUQM *a);
typedef arg_VX arg_VADDSBS;
static bool trans_VADDSBS(DisasContext *ctx, arg_VADDSBS *a);
typedef arg_VX arg_VADDSHS;
static bool trans_VADDSHS(DisasContext *ctx, arg_VADDSHS *a);
typedef arg_VX arg_VADDSWS;
static bool trans_VADDSWS(DisasContext *ctx, arg_VADDSWS *a);
typedef arg_VX arg_VADDUBS;
static bool trans_VADDUBS(DisasContext *ctx, arg_VADDUBS *a);
typedef arg_VX arg_VADDUHS;
static bool trans_VADDUHS(DisasContext *ctx, arg_VADDUHS *a);
typedef arg_VX arg_VADDUWS;
static bool trans_VADDUWS(DisasContext *ctx, arg_VADDUWS *a);
typedef arg_VA arg_VADDEUQM;
static bool trans_VADDEUQM(DisasContext *ctx, arg_VADDEUQM *a);
typedef arg_VA arg_VADDECUQ;
static bool trans_VADDECUQ(DisasContext *ctx, arg_VADDECUQ *a);
typedef arg_VX arg_VSUBCUW;
static bool trans_VSUBCUW(DisasContext *ctx, arg_VSUBCUW *a);
typedef arg_VX arg_VSUBCUQ;
static bool trans_VSUBCUQ(DisasContext *ctx, arg_VSUBCUQ *a);
typedef arg_VX arg_VSUBUQM;
static bool trans_VSUBUQM(DisasContext *ctx, arg_VSUBUQM *a);
typedef arg_VX arg_VSUBSBS;
static bool trans_VSUBSBS(DisasContext *ctx, arg_VSUBSBS *a);
typedef arg_VX arg_VSUBSHS;
static bool trans_VSUBSHS(DisasContext *ctx, arg_VSUBSHS *a);
typedef arg_VX arg_VSUBSWS;
static bool trans_VSUBSWS(DisasContext *ctx, arg_VSUBSWS *a);
typedef arg_VX arg_VSUBUBS;
static bool trans_VSUBUBS(DisasContext *ctx, arg_VSUBUBS *a);
typedef arg_VX arg_VSUBUHS;
static bool trans_VSUBUHS(DisasContext *ctx, arg_VSUBUHS *a);
typedef arg_VX arg_VSUBUWS;
static bool trans_VSUBUWS(DisasContext *ctx, arg_VSUBUWS *a);
typedef arg_VA arg_VSUBECUQ;
static bool trans_VSUBECUQ(DisasContext *ctx, arg_VSUBECUQ *a);
typedef arg_VA arg_VSUBEUQM;
static bool trans_VSUBEUQM(DisasContext *ctx, arg_VSUBEUQM *a);
typedef arg_VX_tb arg_VEXTSB2W;
static bool trans_VEXTSB2W(DisasContext *ctx, arg_VEXTSB2W *a);
typedef arg_VX_tb arg_VEXTSH2W;
static bool trans_VEXTSH2W(DisasContext *ctx, arg_VEXTSH2W *a);
typedef arg_VX_tb arg_VEXTSB2D;
static bool trans_VEXTSB2D(DisasContext *ctx, arg_VEXTSB2D *a);
typedef arg_VX_tb arg_VEXTSH2D;
static bool trans_VEXTSH2D(DisasContext *ctx, arg_VEXTSH2D *a);
typedef arg_VX_tb arg_VEXTSW2D;
static bool trans_VEXTSW2D(DisasContext *ctx, arg_VEXTSW2D *a);
typedef arg_VX_tb arg_VEXTSD2Q;
static bool trans_VEXTSD2Q(DisasContext *ctx, arg_VEXTSD2Q *a);
typedef arg_VX_tb arg_VNEGD;
static bool trans_VNEGD(DisasContext *ctx, arg_VNEGD *a);
typedef arg_VX_tb arg_VNEGW;
static bool trans_VNEGW(DisasContext *ctx, arg_VNEGW *a);
typedef arg_VX arg_VMAXUB;
static bool trans_VMAXUB(DisasContext *ctx, arg_VMAXUB *a);
typedef arg_VX arg_VMAXUH;
static bool trans_VMAXUH(DisasContext *ctx, arg_VMAXUH *a);
typedef arg_VX arg_VMAXUW;
static bool trans_VMAXUW(DisasContext *ctx, arg_VMAXUW *a);
typedef arg_VX arg_VMAXUD;
static bool trans_VMAXUD(DisasContext *ctx, arg_VMAXUD *a);
typedef arg_VX arg_VMAXSB;
static bool trans_VMAXSB(DisasContext *ctx, arg_VMAXSB *a);
typedef arg_VX arg_VMAXSH;
static bool trans_VMAXSH(DisasContext *ctx, arg_VMAXSH *a);
typedef arg_VX arg_VMAXSW;
static bool trans_VMAXSW(DisasContext *ctx, arg_VMAXSW *a);
typedef arg_VX arg_VMAXSD;
static bool trans_VMAXSD(DisasContext *ctx, arg_VMAXSD *a);
typedef arg_VX arg_VMINUB;
static bool trans_VMINUB(DisasContext *ctx, arg_VMINUB *a);
typedef arg_VX arg_VMINUH;
static bool trans_VMINUH(DisasContext *ctx, arg_VMINUH *a);
typedef arg_VX arg_VMINUW;
static bool trans_VMINUW(DisasContext *ctx, arg_VMINUW *a);
typedef arg_VX arg_VMINUD;
static bool trans_VMINUD(DisasContext *ctx, arg_VMINUD *a);
typedef arg_VX arg_VMINSB;
static bool trans_VMINSB(DisasContext *ctx, arg_VMINSB *a);
typedef arg_VX arg_VMINSH;
static bool trans_VMINSH(DisasContext *ctx, arg_VMINSH *a);
typedef arg_VX arg_VMINSW;
static bool trans_VMINSW(DisasContext *ctx, arg_VMINSW *a);
typedef arg_VX arg_VMINSD;
static bool trans_VMINSD(DisasContext *ctx, arg_VMINSD *a);
typedef arg_VX_tb arg_MTVSRBM;
static bool trans_MTVSRBM(DisasContext *ctx, arg_MTVSRBM *a);
typedef arg_VX_tb arg_MTVSRHM;
static bool trans_MTVSRHM(DisasContext *ctx, arg_MTVSRHM *a);
typedef arg_VX_tb arg_MTVSRWM;
static bool trans_MTVSRWM(DisasContext *ctx, arg_MTVSRWM *a);
typedef arg_VX_tb arg_MTVSRDM;
static bool trans_MTVSRDM(DisasContext *ctx, arg_MTVSRDM *a);
typedef arg_VX_tb arg_MTVSRQM;
static bool trans_MTVSRQM(DisasContext *ctx, arg_MTVSRQM *a);
typedef arg_DX_b arg_MTVSRBMI;
static bool trans_MTVSRBMI(DisasContext *ctx, arg_MTVSRBMI *a);
typedef arg_VX_tb arg_VEXPANDBM;
static bool trans_VEXPANDBM(DisasContext *ctx, arg_VEXPANDBM *a);
typedef arg_VX_tb arg_VEXPANDHM;
static bool trans_VEXPANDHM(DisasContext *ctx, arg_VEXPANDHM *a);
typedef arg_VX_tb arg_VEXPANDWM;
static bool trans_VEXPANDWM(DisasContext *ctx, arg_VEXPANDWM *a);
typedef arg_VX_tb arg_VEXPANDDM;
static bool trans_VEXPANDDM(DisasContext *ctx, arg_VEXPANDDM *a);
typedef arg_VX_tb arg_VEXPANDQM;
static bool trans_VEXPANDQM(DisasContext *ctx, arg_VEXPANDQM *a);
typedef arg_VX_tb arg_VEXTRACTBM;
static bool trans_VEXTRACTBM(DisasContext *ctx, arg_VEXTRACTBM *a);
typedef arg_VX_tb arg_VEXTRACTHM;
static bool trans_VEXTRACTHM(DisasContext *ctx, arg_VEXTRACTHM *a);
typedef arg_VX_tb arg_VEXTRACTWM;
static bool trans_VEXTRACTWM(DisasContext *ctx, arg_VEXTRACTWM *a);
typedef arg_VX_tb arg_VEXTRACTDM;
static bool trans_VEXTRACTDM(DisasContext *ctx, arg_VEXTRACTDM *a);
typedef arg_VX_tb arg_VEXTRACTQM;
static bool trans_VEXTRACTQM(DisasContext *ctx, arg_VEXTRACTQM *a);
typedef arg_VX_mp arg_VCNTMBB;
static bool trans_VCNTMBB(DisasContext *ctx, arg_VCNTMBB *a);
typedef arg_VX_mp arg_VCNTMBH;
static bool trans_VCNTMBH(DisasContext *ctx, arg_VCNTMBH *a);
typedef arg_VX_mp arg_VCNTMBW;
static bool trans_VCNTMBW(DisasContext *ctx, arg_VCNTMBW *a);
typedef arg_VX_mp arg_VCNTMBD;
static bool trans_VCNTMBD(DisasContext *ctx, arg_VCNTMBD *a);
typedef arg_VX arg_VMULESB;
static bool trans_VMULESB(DisasContext *ctx, arg_VMULESB *a);
typedef arg_VX arg_VMULOSB;
static bool trans_VMULOSB(DisasContext *ctx, arg_VMULOSB *a);
typedef arg_VX arg_VMULEUB;
static bool trans_VMULEUB(DisasContext *ctx, arg_VMULEUB *a);
typedef arg_VX arg_VMULOUB;
static bool trans_VMULOUB(DisasContext *ctx, arg_VMULOUB *a);
typedef arg_VX arg_VMULESH;
static bool trans_VMULESH(DisasContext *ctx, arg_VMULESH *a);
typedef arg_VX arg_VMULOSH;
static bool trans_VMULOSH(DisasContext *ctx, arg_VMULOSH *a);
typedef arg_VX arg_VMULEUH;
static bool trans_VMULEUH(DisasContext *ctx, arg_VMULEUH *a);
typedef arg_VX arg_VMULOUH;
static bool trans_VMULOUH(DisasContext *ctx, arg_VMULOUH *a);
typedef arg_VX arg_VMULESW;
static bool trans_VMULESW(DisasContext *ctx, arg_VMULESW *a);
typedef arg_VX arg_VMULOSW;
static bool trans_VMULOSW(DisasContext *ctx, arg_VMULOSW *a);
typedef arg_VX arg_VMULEUW;
static bool trans_VMULEUW(DisasContext *ctx, arg_VMULEUW *a);
typedef arg_VX arg_VMULOUW;
static bool trans_VMULOUW(DisasContext *ctx, arg_VMULOUW *a);
typedef arg_VX arg_VMULESD;
static bool trans_VMULESD(DisasContext *ctx, arg_VMULESD *a);
typedef arg_VX arg_VMULOSD;
static bool trans_VMULOSD(DisasContext *ctx, arg_VMULOSD *a);
typedef arg_VX arg_VMULEUD;
static bool trans_VMULEUD(DisasContext *ctx, arg_VMULEUD *a);
typedef arg_VX arg_VMULOUD;
static bool trans_VMULOUD(DisasContext *ctx, arg_VMULOUD *a);
typedef arg_VX arg_VMULHSW;
static bool trans_VMULHSW(DisasContext *ctx, arg_VMULHSW *a);
typedef arg_VX arg_VMULHUW;
static bool trans_VMULHUW(DisasContext *ctx, arg_VMULHUW *a);
typedef arg_VX arg_VMULHSD;
static bool trans_VMULHSD(DisasContext *ctx, arg_VMULHSD *a);
typedef arg_VX arg_VMULHUD;
static bool trans_VMULHUD(DisasContext *ctx, arg_VMULHUD *a);
typedef arg_VX arg_VMULLD;
static bool trans_VMULLD(DisasContext *ctx, arg_VMULLD *a);
typedef arg_VA arg_VMSUMUBM;
static bool trans_VMSUMUBM(DisasContext *ctx, arg_VMSUMUBM *a);
typedef arg_VA arg_VMSUMMBM;
static bool trans_VMSUMMBM(DisasContext *ctx, arg_VMSUMMBM *a);
typedef arg_VA arg_VMSUMSHM;
static bool trans_VMSUMSHM(DisasContext *ctx, arg_VMSUMSHM *a);
typedef arg_VA arg_VMSUMSHS;
static bool trans_VMSUMSHS(DisasContext *ctx, arg_VMSUMSHS *a);
typedef arg_VA arg_VMSUMUHM;
static bool trans_VMSUMUHM(DisasContext *ctx, arg_VMSUMUHM *a);
typedef arg_VA arg_VMSUMUHS;
static bool trans_VMSUMUHS(DisasContext *ctx, arg_VMSUMUHS *a);
typedef arg_VA arg_VMSUMCUD;
static bool trans_VMSUMCUD(DisasContext *ctx, arg_VMSUMCUD *a);
typedef arg_VA arg_VMSUMUDM;
static bool trans_VMSUMUDM(DisasContext *ctx, arg_VMSUMUDM *a);
typedef arg_VA arg_VMLADDUHM;
static bool trans_VMLADDUHM(DisasContext *ctx, arg_VMLADDUHM *a);
typedef arg_VA arg_VMHADDSHS;
static bool trans_VMHADDSHS(DisasContext *ctx, arg_VMHADDSHS *a);
typedef arg_VA arg_VMHRADDSHS;
static bool trans_VMHRADDSHS(DisasContext *ctx, arg_VMHRADDSHS *a);
typedef arg_VX_tb_rc arg_VSTRIBL;
static bool trans_VSTRIBL(DisasContext *ctx, arg_VSTRIBL *a);
typedef arg_VX_tb_rc arg_VSTRIBR;
static bool trans_VSTRIBR(DisasContext *ctx, arg_VSTRIBR *a);
typedef arg_VX_tb_rc arg_VSTRIHL;
static bool trans_VSTRIHL(DisasContext *ctx, arg_VSTRIHL *a);
typedef arg_VX_tb_rc arg_VSTRIHR;
static bool trans_VSTRIHR(DisasContext *ctx, arg_VSTRIHR *a);
typedef arg_VX arg_VCLRLB;
static bool trans_VCLRLB(DisasContext *ctx, arg_VCLRLB *a);
typedef arg_VX arg_VCLRRB;
static bool trans_VCLRRB(DisasContext *ctx, arg_VCLRRB *a);
typedef arg_D arg_LXSD;
static bool trans_LXSD(DisasContext *ctx, arg_LXSD *a);
typedef arg_D arg_STXSD;
static bool trans_STXSD(DisasContext *ctx, arg_STXSD *a);
typedef arg_D arg_LXSSP;
static bool trans_LXSSP(DisasContext *ctx, arg_LXSSP *a);
typedef arg_D arg_STXSSP;
static bool trans_STXSSP(DisasContext *ctx, arg_STXSSP *a);
typedef arg_D arg_LXV;
static bool trans_LXV(DisasContext *ctx, arg_LXV *a);
typedef arg_D arg_STXV;
static bool trans_STXV(DisasContext *ctx, arg_STXV *a);
typedef arg_D arg_LXVP;
static bool trans_LXVP(DisasContext *ctx, arg_LXVP *a);
typedef arg_D arg_STXVP;
static bool trans_STXVP(DisasContext *ctx, arg_STXVP *a);
typedef arg_X arg_LXVX;
static bool trans_LXVX(DisasContext *ctx, arg_LXVX *a);
typedef arg_X arg_STXVX;
static bool trans_STXVX(DisasContext *ctx, arg_STXVX *a);
typedef arg_X arg_LXVPX;
static bool trans_LXVPX(DisasContext *ctx, arg_LXVPX *a);
typedef arg_X arg_STXVPX;
static bool trans_STXVPX(DisasContext *ctx, arg_STXVPX *a);
typedef arg_X arg_LXVRBX;
static bool trans_LXVRBX(DisasContext *ctx, arg_LXVRBX *a);
typedef arg_X arg_LXVRHX;
static bool trans_LXVRHX(DisasContext *ctx, arg_LXVRHX *a);
typedef arg_X arg_LXVRWX;
static bool trans_LXVRWX(DisasContext *ctx, arg_LXVRWX *a);
typedef arg_X arg_LXVRDX;
static bool trans_LXVRDX(DisasContext *ctx, arg_LXVRDX *a);
typedef arg_X arg_STXVRBX;
static bool trans_STXVRBX(DisasContext *ctx, arg_STXVRBX *a);
typedef arg_X arg_STXVRHX;
static bool trans_STXVRHX(DisasContext *ctx, arg_STXVRHX *a);
typedef arg_X arg_STXVRWX;
static bool trans_STXVRWX(DisasContext *ctx, arg_STXVRWX *a);
typedef arg_X arg_STXVRDX;
static bool trans_STXVRDX(DisasContext *ctx, arg_STXVRDX *a);
typedef arg_X arg_LXSDX;
static bool trans_LXSDX(DisasContext *ctx, arg_LXSDX *a);
typedef arg_X arg_LXSIWAX;
static bool trans_LXSIWAX(DisasContext *ctx, arg_LXSIWAX *a);
typedef arg_X arg_LXSIBZX;
static bool trans_LXSIBZX(DisasContext *ctx, arg_LXSIBZX *a);
typedef arg_X arg_LXSIHZX;
static bool trans_LXSIHZX(DisasContext *ctx, arg_LXSIHZX *a);
typedef arg_X arg_LXSIWZX;
static bool trans_LXSIWZX(DisasContext *ctx, arg_LXSIWZX *a);
typedef arg_X arg_LXSSPX;
static bool trans_LXSSPX(DisasContext *ctx, arg_LXSSPX *a);
typedef arg_X arg_STXSDX;
static bool trans_STXSDX(DisasContext *ctx, arg_STXSDX *a);
typedef arg_X arg_STXSIBX;
static bool trans_STXSIBX(DisasContext *ctx, arg_STXSIBX *a);
typedef arg_X arg_STXSIHX;
static bool trans_STXSIHX(DisasContext *ctx, arg_STXSIHX *a);
typedef arg_X arg_STXSIWX;
static bool trans_STXSIWX(DisasContext *ctx, arg_STXSIWX *a);
typedef arg_X arg_STXSSPX;
static bool trans_STXSSPX(DisasContext *ctx, arg_STXSSPX *a);
typedef arg_X arg_LXVB16X;
static bool trans_LXVB16X(DisasContext *ctx, arg_LXVB16X *a);
typedef arg_X arg_LXVD2X;
static bool trans_LXVD2X(DisasContext *ctx, arg_LXVD2X *a);
typedef arg_X arg_LXVH8X;
static bool trans_LXVH8X(DisasContext *ctx, arg_LXVH8X *a);
typedef arg_X arg_LXVW4X;
static bool trans_LXVW4X(DisasContext *ctx, arg_LXVW4X *a);
typedef arg_X arg_LXVDSX;
static bool trans_LXVDSX(DisasContext *ctx, arg_LXVDSX *a);
typedef arg_X arg_LXVWSX;
static bool trans_LXVWSX(DisasContext *ctx, arg_LXVWSX *a);
typedef arg_X arg_LXVL;
static bool trans_LXVL(DisasContext *ctx, arg_LXVL *a);
typedef arg_X arg_LXVLL;
static bool trans_LXVLL(DisasContext *ctx, arg_LXVLL *a);
typedef arg_X arg_STXVB16X;
static bool trans_STXVB16X(DisasContext *ctx, arg_STXVB16X *a);
typedef arg_X arg_STXVD2X;
static bool trans_STXVD2X(DisasContext *ctx, arg_STXVD2X *a);
typedef arg_X arg_STXVH8X;
static bool trans_STXVH8X(DisasContext *ctx, arg_STXVH8X *a);
typedef arg_X arg_STXVW4X;
static bool trans_STXVW4X(DisasContext *ctx, arg_STXVW4X *a);
typedef arg_X arg_STXVL;
static bool trans_STXVL(DisasContext *ctx, arg_STXVL *a);
typedef arg_X arg_STXVLL;
static bool trans_STXVLL(DisasContext *ctx, arg_STXVLL *a);
typedef arg_XX2 arg_XVABSDP;
static bool trans_XVABSDP(DisasContext *ctx, arg_XVABSDP *a);
typedef arg_XX2 arg_XVABSSP;
static bool trans_XVABSSP(DisasContext *ctx, arg_XVABSSP *a);
typedef arg_XX2 arg_XVNABSDP;
static bool trans_XVNABSDP(DisasContext *ctx, arg_XVNABSDP *a);
typedef arg_XX2 arg_XVNABSSP;
static bool trans_XVNABSSP(DisasContext *ctx, arg_XVNABSSP *a);
typedef arg_XX2 arg_XVNEGDP;
static bool trans_XVNEGDP(DisasContext *ctx, arg_XVNEGDP *a);
typedef arg_XX2 arg_XVNEGSP;
static bool trans_XVNEGSP(DisasContext *ctx, arg_XVNEGSP *a);
typedef arg_XX3 arg_XVCPSGNDP;
static bool trans_XVCPSGNDP(DisasContext *ctx, arg_XVCPSGNDP *a);
typedef arg_XX3 arg_XVCPSGNSP;
static bool trans_XVCPSGNSP(DisasContext *ctx, arg_XVCPSGNSP *a);
typedef arg_XX3 arg_XSADDSP;
static bool trans_XSADDSP(DisasContext *ctx, arg_XSADDSP *a);
typedef arg_XX3 arg_XSSUBSP;
static bool trans_XSSUBSP(DisasContext *ctx, arg_XSSUBSP *a);
typedef arg_XX3 arg_XSMULSP;
static bool trans_XSMULSP(DisasContext *ctx, arg_XSMULSP *a);
typedef arg_XX3 arg_XSDIVSP;
static bool trans_XSDIVSP(DisasContext *ctx, arg_XSDIVSP *a);
typedef arg_XX3 arg_XSADDDP;
static bool trans_XSADDDP(DisasContext *ctx, arg_XSADDDP *a);
typedef arg_XX3 arg_XSSUBDP;
static bool trans_XSSUBDP(DisasContext *ctx, arg_XSSUBDP *a);
typedef arg_XX3 arg_XSMULDP;
static bool trans_XSMULDP(DisasContext *ctx, arg_XSMULDP *a);
typedef arg_XX3 arg_XSDIVDP;
static bool trans_XSDIVDP(DisasContext *ctx, arg_XSDIVDP *a);
typedef arg_XX3 arg_XVADDSP;
static bool trans_XVADDSP(DisasContext *ctx, arg_XVADDSP *a);
typedef arg_XX3 arg_XVSUBSP;
static bool trans_XVSUBSP(DisasContext *ctx, arg_XVSUBSP *a);
typedef arg_XX3 arg_XVMULSP;
static bool trans_XVMULSP(DisasContext *ctx, arg_XVMULSP *a);
typedef arg_XX3 arg_XVDIVSP;
static bool trans_XVDIVSP(DisasContext *ctx, arg_XVDIVSP *a);
typedef arg_XX3 arg_XVADDDP;
static bool trans_XVADDDP(DisasContext *ctx, arg_XVADDDP *a);
typedef arg_XX3 arg_XVSUBDP;
static bool trans_XVSUBDP(DisasContext *ctx, arg_XVSUBDP *a);
typedef arg_XX3 arg_XVMULDP;
static bool trans_XVMULDP(DisasContext *ctx, arg_XVMULDP *a);
typedef arg_XX3 arg_XVDIVDP;
static bool trans_XVDIVDP(DisasContext *ctx, arg_XVDIVDP *a);
typedef arg_XX3 arg_XSMADDADP;
static bool trans_XSMADDADP(DisasContext *ctx, arg_XSMADDADP *a);
typedef arg_XX3 arg_XSMADDMDP;
static bool trans_XSMADDMDP(DisasContext *ctx, arg_XSMADDMDP *a);
typedef arg_XX3 arg_XSMADDASP;
static bool trans_XSMADDASP(DisasContext *ctx, arg_XSMADDASP *a);
typedef arg_XX3 arg_XSMADDMSP;
static bool trans_XSMADDMSP(DisasContext *ctx, arg_XSMADDMSP *a);
typedef arg_X_rc arg_XSMADDQP;
static bool trans_XSMADDQP(DisasContext *ctx, arg_XSMADDQP *a);
typedef arg_XX3 arg_XSMSUBADP;
static bool trans_XSMSUBADP(DisasContext *ctx, arg_XSMSUBADP *a);
typedef arg_XX3 arg_XSMSUBMDP;
static bool trans_XSMSUBMDP(DisasContext *ctx, arg_XSMSUBMDP *a);
typedef arg_XX3 arg_XSMSUBASP;
static bool trans_XSMSUBASP(DisasContext *ctx, arg_XSMSUBASP *a);
typedef arg_XX3 arg_XSMSUBMSP;
static bool trans_XSMSUBMSP(DisasContext *ctx, arg_XSMSUBMSP *a);
typedef arg_X_rc arg_XSMSUBQP;
static bool trans_XSMSUBQP(DisasContext *ctx, arg_XSMSUBQP *a);
typedef arg_XX3 arg_XSNMADDASP;
static bool trans_XSNMADDASP(DisasContext *ctx, arg_XSNMADDASP *a);
typedef arg_XX3 arg_XSNMADDMSP;
static bool trans_XSNMADDMSP(DisasContext *ctx, arg_XSNMADDMSP *a);
typedef arg_XX3 arg_XSNMADDADP;
static bool trans_XSNMADDADP(DisasContext *ctx, arg_XSNMADDADP *a);
typedef arg_XX3 arg_XSNMADDMDP;
static bool trans_XSNMADDMDP(DisasContext *ctx, arg_XSNMADDMDP *a);
typedef arg_X_rc arg_XSNMADDQP;
static bool trans_XSNMADDQP(DisasContext *ctx, arg_XSNMADDQP *a);
typedef arg_XX3 arg_XSNMSUBASP;
static bool trans_XSNMSUBASP(DisasContext *ctx, arg_XSNMSUBASP *a);
typedef arg_XX3 arg_XSNMSUBMSP;
static bool trans_XSNMSUBMSP(DisasContext *ctx, arg_XSNMSUBMSP *a);
typedef arg_XX3 arg_XSNMSUBADP;
static bool trans_XSNMSUBADP(DisasContext *ctx, arg_XSNMSUBADP *a);
typedef arg_XX3 arg_XSNMSUBMDP;
static bool trans_XSNMSUBMDP(DisasContext *ctx, arg_XSNMSUBMDP *a);
typedef arg_X_rc arg_XSNMSUBQP;
static bool trans_XSNMSUBQP(DisasContext *ctx, arg_XSNMSUBQP *a);
typedef arg_X_imm8 arg_XXSPLTIB;
static bool trans_XXSPLTIB(DisasContext *ctx, arg_XXSPLTIB *a);
typedef arg_XX2_uim arg_XXSPLTW;
static bool trans_XXSPLTW(DisasContext *ctx, arg_XXSPLTW *a);
typedef arg_XX2_uim arg_XXEXTRACTUW;
static bool trans_XXEXTRACTUW(DisasContext *ctx, arg_XXEXTRACTUW *a);
typedef arg_XX2_uim arg_XXINSERTW;
static bool trans_XXINSERTW(DisasContext *ctx, arg_XXINSERTW *a);
typedef arg_XX3 arg_XXPERM;
static bool trans_XXPERM(DisasContext *ctx, arg_XXPERM *a);
typedef arg_XX3 arg_XXPERMR;
static bool trans_XXPERMR(DisasContext *ctx, arg_XXPERMR *a);
typedef arg_XX3_dm arg_XXPERMDI;
static bool trans_XXPERMDI(DisasContext *ctx, arg_XXPERMDI *a);
typedef arg_XX4 arg_XXSEL;
static bool trans_XXSEL(DisasContext *ctx, arg_XXSEL *a);
typedef arg_X_imm5 arg_XXGENPCVBM;
static bool trans_XXGENPCVBM(DisasContext *ctx, arg_XXGENPCVBM *a);
typedef arg_X_imm5 arg_XXGENPCVHM;
static bool trans_XXGENPCVHM(DisasContext *ctx, arg_XXGENPCVHM *a);
typedef arg_X_imm5 arg_XXGENPCVWM;
static bool trans_XXGENPCVWM(DisasContext *ctx, arg_XXGENPCVWM *a);
typedef arg_X_imm5 arg_XXGENPCVDM;
static bool trans_XXGENPCVDM(DisasContext *ctx, arg_XXGENPCVDM *a);
typedef arg_X_uim5 arg_LXVKQ;
static bool trans_LXVKQ(DisasContext *ctx, arg_LXVKQ *a);
typedef arg_XX3 arg_XSMAXCDP;
static bool trans_XSMAXCDP(DisasContext *ctx, arg_XSMAXCDP *a);
typedef arg_XX3 arg_XSMINCDP;
static bool trans_XSMINCDP(DisasContext *ctx, arg_XSMINCDP *a);
typedef arg_XX3 arg_XSMAXJDP;
static bool trans_XSMAXJDP(DisasContext *ctx, arg_XSMAXJDP *a);
typedef arg_XX3 arg_XSMINJDP;
static bool trans_XSMINJDP(DisasContext *ctx, arg_XSMINJDP *a);
typedef arg_X arg_XSMAXCQP;
static bool trans_XSMAXCQP(DisasContext *ctx, arg_XSMAXCQP *a);
typedef arg_X arg_XSMINCQP;
static bool trans_XSMINCQP(DisasContext *ctx, arg_XSMINCQP *a);
typedef arg_XX3 arg_XSCMPEQDP;
static bool trans_XSCMPEQDP(DisasContext *ctx, arg_XSCMPEQDP *a);
typedef arg_XX3 arg_XSCMPGEDP;
static bool trans_XSCMPGEDP(DisasContext *ctx, arg_XSCMPGEDP *a);
typedef arg_XX3 arg_XSCMPGTDP;
static bool trans_XSCMPGTDP(DisasContext *ctx, arg_XSCMPGTDP *a);
typedef arg_X arg_XSCMPEQQP;
static bool trans_XSCMPEQQP(DisasContext *ctx, arg_XSCMPEQQP *a);
typedef arg_X arg_XSCMPGEQP;
static bool trans_XSCMPGEQP(DisasContext *ctx, arg_XSCMPGEQP *a);
typedef arg_X arg_XSCMPGTQP;
static bool trans_XSCMPGTQP(DisasContext *ctx, arg_XSCMPGTQP *a);
typedef arg_XX3_rc arg_XVCMPEQSP;
static bool trans_XVCMPEQSP(DisasContext *ctx, arg_XVCMPEQSP *a);
typedef arg_XX3_rc arg_XVCMPGTSP;
static bool trans_XVCMPGTSP(DisasContext *ctx, arg_XVCMPGTSP *a);
typedef arg_XX3_rc arg_XVCMPGESP;
static bool trans_XVCMPGESP(DisasContext *ctx, arg_XVCMPGESP *a);
typedef arg_XX3_rc arg_XVCMPNESP;
static bool trans_XVCMPNESP(DisasContext *ctx, arg_XVCMPNESP *a);
typedef arg_XX3_rc arg_XVCMPEQDP;
static bool trans_XVCMPEQDP(DisasContext *ctx, arg_XVCMPEQDP *a);
typedef arg_XX3_rc arg_XVCMPGTDP;
static bool trans_XVCMPGTDP(DisasContext *ctx, arg_XVCMPGTDP *a);
typedef arg_XX3_rc arg_XVCMPGEDP;
static bool trans_XVCMPGEDP(DisasContext *ctx, arg_XVCMPGEDP *a);
typedef arg_XX3_rc arg_XVCMPNEDP;
static bool trans_XVCMPNEDP(DisasContext *ctx, arg_XVCMPNEDP *a);
typedef arg_XX3 arg_XSMAXDP;
static bool trans_XSMAXDP(DisasContext *ctx, arg_XSMAXDP *a);
typedef arg_XX3 arg_XSMINDP;
static bool trans_XSMINDP(DisasContext *ctx, arg_XSMINDP *a);
typedef arg_XX3 arg_XVMAXSP;
static bool trans_XVMAXSP(DisasContext *ctx, arg_XVMAXSP *a);
typedef arg_XX3 arg_XVMINSP;
static bool trans_XVMINSP(DisasContext *ctx, arg_XVMINSP *a);
typedef arg_XX3 arg_XVMAXDP;
static bool trans_XVMAXDP(DisasContext *ctx, arg_XVMAXDP *a);
typedef arg_XX3 arg_XVMINDP;
static bool trans_XVMINDP(DisasContext *ctx, arg_XVMINDP *a);
typedef arg_X_tb_rc arg_XSCVQPDP;
static bool trans_XSCVQPDP(DisasContext *ctx, arg_XSCVQPDP *a);
typedef arg_X_tb arg_XSCVQPUQZ;
static bool trans_XSCVQPUQZ(DisasContext *ctx, arg_XSCVQPUQZ *a);
typedef arg_X_tb arg_XSCVQPSQZ;
static bool trans_XSCVQPSQZ(DisasContext *ctx, arg_XSCVQPSQZ *a);
typedef arg_X_tb arg_XSCVUQQP;
static bool trans_XSCVUQQP(DisasContext *ctx, arg_XSCVUQQP *a);
typedef arg_X_tb arg_XSCVSQQP;
static bool trans_XSCVSQQP(DisasContext *ctx, arg_XSCVSQQP *a);
typedef arg_XX2 arg_XVCVBF16SPN;
static bool trans_XVCVBF16SPN(DisasContext *ctx, arg_XVCVBF16SPN *a);
typedef arg_XX2 arg_XVCVSPBF16;
static bool trans_XVCVSPBF16(DisasContext *ctx, arg_XVCVSPBF16 *a);
typedef arg_XX2 arg_XSCVSPDPN;
static bool trans_XSCVSPDPN(DisasContext *ctx, arg_XSCVSPDPN *a);
typedef arg_XX2 arg_XVXSIGSP;
static bool trans_XVXSIGSP(DisasContext *ctx, arg_XVXSIGSP *a);
typedef arg_XX2_uim arg_XVTSTDCDP;
static bool trans_XVTSTDCDP(DisasContext *ctx, arg_XVTSTDCDP *a);
typedef arg_XX2_uim arg_XVTSTDCSP;
static bool trans_XVTSTDCSP(DisasContext *ctx, arg_XVTSTDCSP *a);
typedef arg_XX2_bf_uim arg_XSTSTDCSP;
static bool trans_XSTSTDCSP(DisasContext *ctx, arg_XSTSTDCSP *a);
typedef arg_XX2_bf_uim arg_XSTSTDCDP;
static bool trans_XSTSTDCDP(DisasContext *ctx, arg_XSTSTDCDP *a);
typedef arg_XX2_bf_uim arg_XSTSTDCQP;
static bool trans_XSTSTDCQP(DisasContext *ctx, arg_XSTSTDCQP *a);
typedef arg_XX2_bf_xb arg_XVTLSBB;
static bool trans_XVTLSBB(DisasContext *ctx, arg_XVTLSBB *a);
typedef arg_XL_s arg_RFEBB;
static bool trans_RFEBB(DisasContext *ctx, arg_RFEBB *a);
typedef arg_X_a arg_XXMFACC;
static bool trans_XXMFACC(DisasContext *ctx, arg_XXMFACC *a);
typedef arg_X_a arg_XXMTACC;
static bool trans_XXMTACC(DisasContext *ctx, arg_XXMTACC *a);
typedef arg_X_a arg_XXSETACCZ;
static bool trans_XXSETACCZ(DisasContext *ctx, arg_XXSETACCZ *a);
typedef arg_XX3 arg_XXLAND;
static bool trans_XXLAND(DisasContext *ctx, arg_XXLAND *a);
typedef arg_XX3 arg_XXLANDC;
static bool trans_XXLANDC(DisasContext *ctx, arg_XXLANDC *a);
typedef arg_XX3 arg_XXLOR;
static bool trans_XXLOR(DisasContext *ctx, arg_XXLOR *a);
typedef arg_XX3 arg_XXLXOR;
static bool trans_XXLXOR(DisasContext *ctx, arg_XXLXOR *a);
typedef arg_XX3 arg_XXLNOR;
static bool trans_XXLNOR(DisasContext *ctx, arg_XXLNOR *a);
typedef arg_XX3 arg_XXLEQV;
static bool trans_XXLEQV(DisasContext *ctx, arg_XXLEQV *a);
typedef arg_XX3 arg_XXLNAND;
static bool trans_XXLNAND(DisasContext *ctx, arg_XXLNAND *a);
typedef arg_XX3 arg_XXLORC;
static bool trans_XXLORC(DisasContext *ctx, arg_XXLORC *a);
typedef arg_MMIRR_XX3 arg_XVI4GER8;
static bool trans_XVI4GER8(DisasContext *ctx, arg_XVI4GER8 *a);
typedef arg_MMIRR_XX3 arg_XVI4GER8PP;
static bool trans_XVI4GER8PP(DisasContext *ctx, arg_XVI4GER8PP *a);
typedef arg_MMIRR_XX3 arg_XVI8GER4;
static bool trans_XVI8GER4(DisasContext *ctx, arg_XVI8GER4 *a);
typedef arg_MMIRR_XX3 arg_XVI8GER4PP;
static bool trans_XVI8GER4PP(DisasContext *ctx, arg_XVI8GER4PP *a);
typedef arg_MMIRR_XX3 arg_XVI16GER2;
static bool trans_XVI16GER2(DisasContext *ctx, arg_XVI16GER2 *a);
typedef arg_MMIRR_XX3 arg_XVI16GER2PP;
static bool trans_XVI16GER2PP(DisasContext *ctx, arg_XVI16GER2PP *a);
typedef arg_MMIRR_XX3 arg_XVI8GER4SPP;
static bool trans_XVI8GER4SPP(DisasContext *ctx, arg_XVI8GER4SPP *a);
typedef arg_MMIRR_XX3 arg_XVI16GER2S;
static bool trans_XVI16GER2S(DisasContext *ctx, arg_XVI16GER2S *a);
typedef arg_MMIRR_XX3 arg_XVI16GER2SPP;
static bool trans_XVI16GER2SPP(DisasContext *ctx, arg_XVI16GER2SPP *a);
typedef arg_MMIRR_XX3 arg_XVBF16GER2;
static bool trans_XVBF16GER2(DisasContext *ctx, arg_XVBF16GER2 *a);
typedef arg_MMIRR_XX3 arg_XVBF16GER2PP;
static bool trans_XVBF16GER2PP(DisasContext *ctx, arg_XVBF16GER2PP *a);
typedef arg_MMIRR_XX3 arg_XVBF16GER2PN;
static bool trans_XVBF16GER2PN(DisasContext *ctx, arg_XVBF16GER2PN *a);
typedef arg_MMIRR_XX3 arg_XVBF16GER2NP;
static bool trans_XVBF16GER2NP(DisasContext *ctx, arg_XVBF16GER2NP *a);
typedef arg_MMIRR_XX3 arg_XVBF16GER2NN;
static bool trans_XVBF16GER2NN(DisasContext *ctx, arg_XVBF16GER2NN *a);
typedef arg_MMIRR_XX3 arg_XVF16GER2;
static bool trans_XVF16GER2(DisasContext *ctx, arg_XVF16GER2 *a);
typedef arg_MMIRR_XX3 arg_XVF16GER2PP;
static bool trans_XVF16GER2PP(DisasContext *ctx, arg_XVF16GER2PP *a);
typedef arg_MMIRR_XX3 arg_XVF16GER2PN;
static bool trans_XVF16GER2PN(DisasContext *ctx, arg_XVF16GER2PN *a);
typedef arg_MMIRR_XX3 arg_XVF16GER2NP;
static bool trans_XVF16GER2NP(DisasContext *ctx, arg_XVF16GER2NP *a);
typedef arg_MMIRR_XX3 arg_XVF16GER2NN;
static bool trans_XVF16GER2NN(DisasContext *ctx, arg_XVF16GER2NN *a);
typedef arg_MMIRR_XX3 arg_XVF32GER;
static bool trans_XVF32GER(DisasContext *ctx, arg_XVF32GER *a);
typedef arg_MMIRR_XX3 arg_XVF32GERPP;
static bool trans_XVF32GERPP(DisasContext *ctx, arg_XVF32GERPP *a);
typedef arg_MMIRR_XX3 arg_XVF32GERPN;
static bool trans_XVF32GERPN(DisasContext *ctx, arg_XVF32GERPN *a);
typedef arg_MMIRR_XX3 arg_XVF32GERNP;
static bool trans_XVF32GERNP(DisasContext *ctx, arg_XVF32GERNP *a);
typedef arg_MMIRR_XX3 arg_XVF32GERNN;
static bool trans_XVF32GERNN(DisasContext *ctx, arg_XVF32GERNN *a);
typedef arg_MMIRR_XX3 arg_XVF64GER;
static bool trans_XVF64GER(DisasContext *ctx, arg_XVF64GER *a);
typedef arg_MMIRR_XX3 arg_XVF64GERPP;
static bool trans_XVF64GERPP(DisasContext *ctx, arg_XVF64GERPP *a);
typedef arg_MMIRR_XX3 arg_XVF64GERPN;
static bool trans_XVF64GERPN(DisasContext *ctx, arg_XVF64GERPN *a);
typedef arg_MMIRR_XX3 arg_XVF64GERNP;
static bool trans_XVF64GERNP(DisasContext *ctx, arg_XVF64GERNP *a);
typedef arg_MMIRR_XX3 arg_XVF64GERNN;
static bool trans_XVF64GERNN(DisasContext *ctx, arg_XVF64GERNN *a);
typedef arg_VX arg_VDIVSW;
static bool trans_VDIVSW(DisasContext *ctx, arg_VDIVSW *a);
typedef arg_VX arg_VDIVUW;
static bool trans_VDIVUW(DisasContext *ctx, arg_VDIVUW *a);
typedef arg_VX arg_VDIVSD;
static bool trans_VDIVSD(DisasContext *ctx, arg_VDIVSD *a);
typedef arg_VX arg_VDIVUD;
static bool trans_VDIVUD(DisasContext *ctx, arg_VDIVUD *a);
typedef arg_VX arg_VDIVSQ;
static bool trans_VDIVSQ(DisasContext *ctx, arg_VDIVSQ *a);
typedef arg_VX arg_VDIVUQ;
static bool trans_VDIVUQ(DisasContext *ctx, arg_VDIVUQ *a);
typedef arg_VX arg_VDIVESW;
static bool trans_VDIVESW(DisasContext *ctx, arg_VDIVESW *a);
typedef arg_VX arg_VDIVEUW;
static bool trans_VDIVEUW(DisasContext *ctx, arg_VDIVEUW *a);
typedef arg_VX arg_VDIVESD;
static bool trans_VDIVESD(DisasContext *ctx, arg_VDIVESD *a);
typedef arg_VX arg_VDIVEUD;
static bool trans_VDIVEUD(DisasContext *ctx, arg_VDIVEUD *a);
typedef arg_VX arg_VDIVESQ;
static bool trans_VDIVESQ(DisasContext *ctx, arg_VDIVESQ *a);
typedef arg_VX arg_VDIVEUQ;
static bool trans_VDIVEUQ(DisasContext *ctx, arg_VDIVEUQ *a);
typedef arg_VX arg_VMODSW;
static bool trans_VMODSW(DisasContext *ctx, arg_VMODSW *a);
typedef arg_VX arg_VMODUW;
static bool trans_VMODUW(DisasContext *ctx, arg_VMODUW *a);
typedef arg_VX arg_VMODSD;
static bool trans_VMODSD(DisasContext *ctx, arg_VMODSD *a);
typedef arg_VX arg_VMODUD;
static bool trans_VMODUD(DisasContext *ctx, arg_VMODUD *a);
typedef arg_VX arg_VMODSQ;
static bool trans_VMODSQ(DisasContext *ctx, arg_VMODSQ *a);
typedef arg_VX arg_VMODUQ;
static bool trans_VMODUQ(DisasContext *ctx, arg_VMODUQ *a);
typedef arg_X_rb arg_SLBIE;
static bool trans_SLBIE(DisasContext *ctx, arg_SLBIE *a);
typedef arg_X_tb arg_SLBIEG;
static bool trans_SLBIEG(DisasContext *ctx, arg_SLBIEG *a);
typedef arg_X_ih arg_SLBIA;
static bool trans_SLBIA(DisasContext *ctx, arg_SLBIA *a);
typedef arg_X_rs_l arg_SLBIAG;
static bool trans_SLBIAG(DisasContext *ctx, arg_SLBIAG *a);
typedef arg_X_tb arg_SLBMTE;
static bool trans_SLBMTE(DisasContext *ctx, arg_SLBMTE *a);
typedef arg_X_tb arg_SLBMFEV;
static bool trans_SLBMFEV(DisasContext *ctx, arg_SLBMFEV *a);
typedef arg_X_tb arg_SLBMFEE;
static bool trans_SLBMFEE(DisasContext *ctx, arg_SLBMFEE *a);
typedef arg_X_tb arg_SLBFEE;
static bool trans_SLBFEE(DisasContext *ctx, arg_SLBFEE *a);
typedef arg_decode_insn3265 arg_SLBSYNC;
static bool trans_SLBSYNC(DisasContext *ctx, arg_SLBSYNC *a);
typedef arg_X_tlbie arg_TLBIE;
static bool trans_TLBIE(DisasContext *ctx, arg_TLBIE *a);
typedef arg_X_tlbie arg_TLBIEL;
static bool trans_TLBIEL(DisasContext *ctx, arg_TLBIEL *a);
typedef arg_X_rb arg_MSGCLR;
static bool trans_MSGCLR(DisasContext *ctx, arg_MSGCLR *a);
typedef arg_X_rb arg_MSGSND;
static bool trans_MSGSND(DisasContext *ctx, arg_MSGSND *a);
typedef arg_X_rb arg_MSGCLRP;
static bool trans_MSGCLRP(DisasContext *ctx, arg_MSGCLRP *a);
typedef arg_X_rb arg_MSGSNDP;
static bool trans_MSGSNDP(DisasContext *ctx, arg_MSGSNDP *a);
typedef arg_decode_insn3265 arg_MSGSYNC;
static bool trans_MSGSYNC(DisasContext *ctx, arg_MSGSYNC *a);
typedef arg_X_sync arg_SYNC;
static bool trans_SYNC(DisasContext *ctx, arg_SYNC *a);
typedef arg_decode_insn3265 arg_EIEIO;
static bool trans_EIEIO(DisasContext *ctx, arg_EIEIO *a);
typedef arg_XFX_bhrbe arg_MFBHRBE;
static bool trans_MFBHRBE(DisasContext *ctx, arg_MFBHRBE *a);
typedef arg_decode_insn3265 arg_CLRBHRB;
static bool trans_CLRBHRB(DisasContext *ctx, arg_CLRBHRB *a);
typedef arg_decode_insn3265 arg_ATTN;
static bool trans_ATTN(DisasContext *ctx, arg_ATTN *a);

static void decode_insn32_extract_A(DisasContext *ctx, arg_A *a, uint32_t insn)
{
    a->frb = extract32(insn, 11, 5);
    a->rc = extract32(insn, 0, 1);
    a->frt = extract32(insn, 21, 5);
    a->fra = extract32(insn, 16, 5);
    a->frc = extract32(insn, 6, 5);
}

static void decode_insn32_extract_A_tab(DisasContext *ctx, arg_A_tab *a, uint32_t insn)
{
    a->frt = extract32(insn, 21, 5);
    a->fra = extract32(insn, 16, 5);
    a->frb = extract32(insn, 11, 5);
    a->rc = extract32(insn, 0, 1);
}

static void decode_insn32_extract_A_tab_bc(DisasContext *ctx, arg_A_tab_bc *a, uint32_t insn)
{
    a->rb = extract32(insn, 11, 5);
    a->bc = extract32(insn, 6, 5);
    a->rt = extract32(insn, 21, 5);
    a->ra = extract32(insn, 16, 5);
}

static void decode_insn32_extract_A_tac(DisasContext *ctx, arg_A_tac *a, uint32_t insn)
{
    a->frt = extract32(insn, 21, 5);
    a->fra = extract32(insn, 16, 5);
    a->frc = extract32(insn, 6, 5);
    a->rc = extract32(insn, 0, 1);
}

static void decode_insn32_extract_A_tb(DisasContext *ctx, arg_A_tb *a, uint32_t insn)
{
    a->frt = extract32(insn, 21, 5);
    a->frb = extract32(insn, 11, 5);
    a->rc = extract32(insn, 0, 1);
}

static void decode_insn32_extract_D(DisasContext *ctx, arg_D *a, uint32_t insn)
{
    a->rt = extract32(insn, 21, 5);
    a->ra = extract32(insn, 16, 5);
    a->si = sextract32(insn, 0, 16);
}

static void decode_insn32_extract_DQ_TSX(DisasContext *ctx, arg_D *a, uint32_t insn)
{
    a->rt = deposit32(extract32(insn, 21, 5), 5, 27, extract32(insn, 3, 1));
    a->ra = extract32(insn, 16, 5);
    a->si = times_16(ctx, sextract32(insn, 4, 12));
}

static void decode_insn32_extract_DQ_TSXP(DisasContext *ctx, arg_D *a, uint32_t insn)
{
    a->rt = times_2(ctx, deposit32(extract32(insn, 22, 4), 4, 28, extract32(insn, 21, 1)));
    a->ra = extract32(insn, 16, 5);
    a->si = times_16(ctx, sextract32(insn, 4, 12));
}

static void decode_insn32_extract_DQ_rtp(DisasContext *ctx, arg_D *a, uint32_t insn)
{
    a->rt = times_2(ctx, extract32(insn, 22, 4));
    a->ra = extract32(insn, 16, 5);
    a->si = times_16(ctx, sextract32(insn, 4, 12));
}

static void decode_insn32_extract_DS(DisasContext *ctx, arg_D *a, uint32_t insn)
{
    a->rt = extract32(insn, 21, 5);
    a->ra = extract32(insn, 16, 5);
    a->si = times_4(ctx, sextract32(insn, 2, 14));
}

static void decode_insn32_extract_DS_rtp(DisasContext *ctx, arg_D *a, uint32_t insn)
{
    a->rt = times_2(ctx, extract32(insn, 22, 4));
    a->ra = extract32(insn, 16, 5);
    a->si = times_4(ctx, sextract32(insn, 2, 14));
}

static void decode_insn32_extract_DX(DisasContext *ctx, arg_DX *a, uint32_t insn)
{
    a->rt = extract32(insn, 21, 5);
    a->d = deposit32(deposit32(extract32(insn, 0, 1), 1, 31, extract32(insn, 16, 5)), 6, 26, sextract32(insn, 6, 10));
}

static void decode_insn32_extract_DX_b(DisasContext *ctx, arg_DX_b *a, uint32_t insn)
{
    a->b = deposit32(deposit32(extract32(insn, 0, 1), 1, 31, extract32(insn, 16, 5)), 6, 26, extract32(insn, 6, 10));
    a->vrt = extract32(insn, 21, 5);
}

static void decode_insn32_extract_D_bfs(DisasContext *ctx, arg_D_bf *a, uint32_t insn)
{
    a->imm = sextract32(insn, 0, 16);
    a->ra = extract32(insn, 16, 5);
    a->bf = extract32(insn, 23, 3);
    a->l = extract32(insn, 21, 1);
}

static void decode_insn32_extract_D_bfu(DisasContext *ctx, arg_D_bf *a, uint32_t insn)
{
    a->imm = extract32(insn, 0, 16);
    a->ra = extract32(insn, 16, 5);
    a->bf = extract32(insn, 23, 3);
    a->l = extract32(insn, 21, 1);
}

static void decode_insn32_extract_D_ui(DisasContext *ctx, arg_D_ui *a, uint32_t insn)
{
    a->rt = extract32(insn, 21, 5);
    a->ra = extract32(insn, 16, 5);
    a->ui = extract32(insn, 0, 16);
}

static void decode_insn32_extract_VA(DisasContext *ctx, arg_VA *a, uint32_t insn)
{
    a->vra = extract32(insn, 16, 5);
    a->rc = extract32(insn, 6, 5);
    a->vrt = extract32(insn, 21, 5);
    a->vrb = extract32(insn, 11, 5);
}

static void decode_insn32_extract_VC(DisasContext *ctx, arg_VC *a, uint32_t insn)
{
    a->vra = extract32(insn, 16, 5);
    a->rc = extract32(insn, 10, 1);
    a->vrt = extract32(insn, 21, 5);
    a->vrb = extract32(insn, 11, 5);
}

static void decode_insn32_extract_VN(DisasContext *ctx, arg_VN *a, uint32_t insn)
{
    a->vra = extract32(insn, 16, 5);
    a->sh = extract32(insn, 6, 3);
    a->vrt = extract32(insn, 21, 5);
    a->vrb = extract32(insn, 11, 5);
}

static void decode_insn32_extract_VX(DisasContext *ctx, arg_VX *a, uint32_t insn)
{
    a->vra = extract32(insn, 16, 5);
    a->vrt = extract32(insn, 21, 5);
    a->vrb = extract32(insn, 11, 5);
}

static void decode_insn32_extract_VX_bf(DisasContext *ctx, arg_VX_bf *a, uint32_t insn)
{
    a->vra = extract32(insn, 16, 5);
    a->bf = extract32(insn, 23, 3);
    a->vrb = extract32(insn, 11, 5);
}

static void decode_insn32_extract_VX_mp(DisasContext *ctx, arg_VX_mp *a, uint32_t insn)
{
    a->rt = extract32(insn, 21, 5);
    a->mp = extract32(insn, 16, 1);
    a->vrb = extract32(insn, 11, 5);
}

static void decode_insn32_extract_VX_n(DisasContext *ctx, arg_VX_n *a, uint32_t insn)
{
    a->n = extract32(insn, 16, 3);
    a->rt = extract32(insn, 21, 5);
    a->vrb = extract32(insn, 11, 5);
}

static void decode_insn32_extract_VX_tb(DisasContext *ctx, arg_VX_tb *a, uint32_t insn)
{
    a->vrt = extract32(insn, 21, 5);
    a->vrb = extract32(insn, 11, 5);
}

static void decode_insn32_extract_VX_tb_rc(DisasContext *ctx, arg_VX_tb_rc *a, uint32_t insn)
{
    a->rc = extract32(insn, 10, 1);
    a->vrt = extract32(insn, 21, 5);
    a->vrb = extract32(insn, 11, 5);
}

static void decode_insn32_extract_VX_uim4(DisasContext *ctx, arg_VX_uim4 *a, uint32_t insn)
{
    a->uim = extract32(insn, 16, 4);
    a->vrt = extract32(insn, 21, 5);
    a->vrb = extract32(insn, 11, 5);
}

static void decode_insn32_extract_X(DisasContext *ctx, arg_X *a, uint32_t insn)
{
    a->rb = extract32(insn, 11, 5);
    a->rt = extract32(insn, 21, 5);
    a->ra = extract32(insn, 16, 5);
}

static void decode_insn32_extract_XFX_bhrbe(DisasContext *ctx, arg_XFX_bhrbe *a, uint32_t insn)
{
    a->rt = extract32(insn, 21, 5);
    a->bhrbe = extract32(insn, 11, 10);
}

static void decode_insn32_extract_XL_s(DisasContext *ctx, arg_XL_s *a, uint32_t insn)
{
    a->s = extract32(insn, 11, 1);
}

static void decode_insn32_extract_XO(DisasContext *ctx, arg_XO *a, uint32_t insn)
{
    a->rc = extract32(insn, 0, 1);
    a->rb = extract32(insn, 11, 5);
    a->oe = extract32(insn, 10, 1);
    a->rt = extract32(insn, 21, 5);
    a->ra = extract32(insn, 16, 5);
}

static void decode_insn32_extract_XO_ta(DisasContext *ctx, arg_XO_ta *a, uint32_t insn)
{
    a->rt = extract32(insn, 21, 5);
    a->ra = extract32(insn, 16, 5);
    a->oe = extract32(insn, 10, 1);
    a->rc = extract32(insn, 0, 1);
}

static void decode_insn32_extract_XO_tab_rc(DisasContext *ctx, arg_XO_tab_rc *a, uint32_t insn)
{
    a->rb = extract32(insn, 11, 5);
    a->rt = extract32(insn, 21, 5);
    a->ra = extract32(insn, 16, 5);
    a->rc = extract32(insn, 0, 1);
}

static void decode_insn32_extract_XX2(DisasContext *ctx, arg_XX2 *a, uint32_t insn)
{
    a->xt = deposit32(extract32(insn, 21, 5), 5, 27, extract32(insn, 0, 1));
    a->xb = deposit32(extract32(insn, 11, 5), 5, 27, extract32(insn, 1, 1));
}

static void decode_insn32_extract_XX2_bf_uim(DisasContext *ctx, arg_XX2_bf_uim *a, uint32_t insn)
{
    a->uim = extract32(insn, 16, 7);
    a->bf = extract32(insn, 23, 3);
}

static void decode_insn32_extract_XX2_bf_xb(DisasContext *ctx, arg_XX2_bf_xb *a, uint32_t insn)
{
    a->bf = extract32(insn, 23, 3);
    a->xb = deposit32(extract32(insn, 11, 5), 5, 27, extract32(insn, 1, 1));
}

static void decode_insn32_extract_XX2_uim2(DisasContext *ctx, arg_XX2_uim *a, uint32_t insn)
{
    a->uim = extract32(insn, 16, 2);
    a->xt = deposit32(extract32(insn, 21, 5), 5, 27, extract32(insn, 0, 1));
    a->xb = deposit32(extract32(insn, 11, 5), 5, 27, extract32(insn, 1, 1));
}

static void decode_insn32_extract_XX2_uim4(DisasContext *ctx, arg_XX2_uim *a, uint32_t insn)
{
    a->uim = extract32(insn, 16, 4);
    a->xt = deposit32(extract32(insn, 21, 5), 5, 27, extract32(insn, 0, 1));
    a->xb = deposit32(extract32(insn, 11, 5), 5, 27, extract32(insn, 1, 1));
}

static void decode_insn32_extract_XX2_uim7(DisasContext *ctx, arg_XX2_uim *a, uint32_t insn)
{
    a->uim = deposit32(deposit32(extract32(insn, 16, 5), 5, 27, extract32(insn, 2, 1)), 6, 26, extract32(insn, 6, 1));
    a->xt = deposit32(extract32(insn, 21, 5), 5, 27, extract32(insn, 0, 1));
    a->xb = deposit32(extract32(insn, 11, 5), 5, 27, extract32(insn, 1, 1));
}

static void decode_insn32_extract_XX3(DisasContext *ctx, arg_XX3 *a, uint32_t insn)
{
    a->xt = deposit32(extract32(insn, 21, 5), 5, 27, extract32(insn, 0, 1));
    a->xa = deposit32(extract32(insn, 16, 5), 5, 27, extract32(insn, 2, 1));
    a->xb = deposit32(extract32(insn, 11, 5), 5, 27, extract32(insn, 1, 1));
}

static void decode_insn32_extract_XX3_at(DisasContext *ctx, arg_MMIRR_XX3 *a, uint32_t insn)
{
    a->xt = extract32(insn, 23, 3);
    a->pmsk = 255;
    a->xb = deposit32(extract32(insn, 11, 5), 5, 27, extract32(insn, 1, 1));
    a->xmsk = 15;
    a->ymsk = 15;
}

static void decode_insn32_extract_XX3_dm(DisasContext *ctx, arg_XX3_dm *a, uint32_t insn)
{
    a->xt = deposit32(extract32(insn, 21, 5), 5, 27, extract32(insn, 0, 1));
    a->xa = deposit32(extract32(insn, 16, 5), 5, 27, extract32(insn, 2, 1));
    a->xb = deposit32(extract32(insn, 11, 5), 5, 27, extract32(insn, 1, 1));
    a->dm = extract32(insn, 8, 2);
}

static void decode_insn32_extract_XX3_rc(DisasContext *ctx, arg_XX3_rc *a, uint32_t insn)
{
    a->xt = deposit32(extract32(insn, 21, 5), 5, 27, extract32(insn, 0, 1));
    a->xa = deposit32(extract32(insn, 16, 5), 5, 27, extract32(insn, 2, 1));
    a->xb = deposit32(extract32(insn, 11, 5), 5, 27, extract32(insn, 1, 1));
    a->rc = extract32(insn, 10, 1);
}

static void decode_insn32_extract_XX4(DisasContext *ctx, arg_XX4 *a, uint32_t insn)
{
    a->xt = deposit32(extract32(insn, 21, 5), 5, 27, extract32(insn, 0, 1));
    a->xa = deposit32(extract32(insn, 16, 5), 5, 27, extract32(insn, 2, 1));
    a->xc = deposit32(extract32(insn, 6, 5), 5, 27, extract32(insn, 3, 1));
    a->xb = deposit32(extract32(insn, 11, 5), 5, 27, extract32(insn, 1, 1));
}

static void decode_insn32_extract_X_DW(DisasContext *ctx, arg_X *a, uint32_t insn)
{
    a->rb = extract32(insn, 11, 5);
    a->rt = dw_compose_ea(ctx, deposit32(extract32(insn, 21, 5), 5, 27, extract32(insn, 0, 1)));
    a->ra = extract32(insn, 16, 5);
}

static void decode_insn32_extract_X_TSX(DisasContext *ctx, arg_X *a, uint32_t insn)
{
    a->rb = extract32(insn, 11, 5);
    a->rt = deposit32(extract32(insn, 21, 5), 5, 27, extract32(insn, 0, 1));
    a->ra = extract32(insn, 16, 5);
}

static void decode_insn32_extract_X_TSXP(DisasContext *ctx, arg_X *a, uint32_t insn)
{
    a->rb = extract32(insn, 11, 5);
    a->rt = times_2(ctx, deposit32(extract32(insn, 22, 4), 4, 28, extract32(insn, 21, 1)));
    a->ra = extract32(insn, 16, 5);
}

static void decode_insn32_extract_X_a(DisasContext *ctx, arg_X_a *a, uint32_t insn)
{
    a->ra = extract32(insn, 23, 3);
}

static void decode_insn32_extract_X_bf(DisasContext *ctx, arg_X_bf *a, uint32_t insn)
{
    a->rb = extract32(insn, 11, 5);
    a->ra = extract32(insn, 16, 5);
    a->bf = extract32(insn, 23, 3);
}

static void decode_insn32_extract_X_bf_a_bp(DisasContext *ctx, arg_X_bf *a, uint32_t insn)
{
    a->rb = times_2(ctx, extract32(insn, 12, 4));
    a->ra = extract32(insn, 16, 5);
    a->bf = extract32(insn, 23, 3);
}

static void decode_insn32_extract_X_bf_ap_bp(DisasContext *ctx, arg_X_bf *a, uint32_t insn)
{
    a->rb = times_2(ctx, extract32(insn, 12, 4));
    a->ra = times_2(ctx, extract32(insn, 17, 4));
    a->bf = extract32(insn, 23, 3);
}

static void decode_insn32_extract_X_bf_b(DisasContext *ctx, arg_X_bf_b *a, uint32_t insn)
{
    a->rb = extract32(insn, 11, 5);
    a->bf = extract32(insn, 23, 3);
}

static void decode_insn32_extract_X_bf_uim(DisasContext *ctx, arg_X_bf_uim *a, uint32_t insn)
{
    a->rb = extract32(insn, 11, 5);
    a->uim = extract32(insn, 16, 6);
    a->bf = extract32(insn, 23, 3);
}

static void decode_insn32_extract_X_bf_uim_bp(DisasContext *ctx, arg_X_bf_uim *a, uint32_t insn)
{
    a->rb = times_2(ctx, extract32(insn, 12, 4));
    a->uim = extract32(insn, 16, 6);
    a->bf = extract32(insn, 23, 3);
}

static void decode_insn32_extract_X_bfl(DisasContext *ctx, arg_X_bfl *a, uint32_t insn)
{
    a->rb = extract32(insn, 11, 5);
    a->ra = extract32(insn, 16, 5);
    a->bf = extract32(insn, 23, 3);
    a->l = extract32(insn, 21, 1);
}

static void decode_insn32_extract_X_bi(DisasContext *ctx, arg_X_bi *a, uint32_t insn)
{
    a->rt = extract32(insn, 21, 5);
    a->bi = extract32(insn, 16, 5);
}

static void decode_insn32_extract_X_frtp_vrb(DisasContext *ctx, arg_X_frtp_vrb *a, uint32_t insn)
{
    a->frtp = times_2(ctx, extract32(insn, 22, 4));
    a->vrb = extract32(insn, 11, 5);
}

static void decode_insn32_extract_X_ih(DisasContext *ctx, arg_X_ih *a, uint32_t insn)
{
    a->ih = extract32(insn, 21, 3);
}

static void decode_insn32_extract_X_imm2(DisasContext *ctx, arg_X_imm2 *a, uint32_t insn)
{
    a->rt = extract32(insn, 21, 5);
    a->imm = extract32(insn, 11, 2);
}

static void decode_insn32_extract_X_imm3(DisasContext *ctx, arg_X_imm3 *a, uint32_t insn)
{
    a->rt = extract32(insn, 21, 5);
    a->imm = extract32(insn, 11, 3);
}

static void decode_insn32_extract_X_imm5(DisasContext *ctx, arg_X_imm5 *a, uint32_t insn)
{
    a->xt = deposit32(extract32(insn, 21, 5), 5, 27, extract32(insn, 0, 1));
    a->imm = extract32(insn, 16, 5);
    a->vrb = extract32(insn, 11, 5);
}

static void decode_insn32_extract_X_imm8(DisasContext *ctx, arg_X_imm8 *a, uint32_t insn)
{
    a->xt = deposit32(extract32(insn, 21, 5), 5, 27, extract32(insn, 0, 1));
    a->imm = extract32(insn, 11, 8);
}

static void decode_insn32_extract_X_rb(DisasContext *ctx, arg_X_rb *a, uint32_t insn)
{
    a->rb = extract32(insn, 11, 5);
}

static void decode_insn32_extract_X_rc(DisasContext *ctx, arg_X_rc *a, uint32_t insn)
{
    a->rb = extract32(insn, 11, 5);
    a->rt = extract32(insn, 21, 5);
    a->ra = extract32(insn, 16, 5);
    a->rc = extract32(insn, 0, 1);
}

static void decode_insn32_extract_X_rs_l(DisasContext *ctx, arg_X_rs_l *a, uint32_t insn)
{
    a->rs = extract32(insn, 21, 5);
    a->l = extract32(insn, 16, 1);
}

static void decode_insn32_extract_X_sa(DisasContext *ctx, arg_X_sa *a, uint32_t insn)
{
    a->rs = extract32(insn, 21, 5);
    a->ra = extract32(insn, 16, 5);
}

static void decode_insn32_extract_X_sa_rc(DisasContext *ctx, arg_X_sa_rc *a, uint32_t insn)
{
    a->rs = extract32(insn, 21, 5);
    a->ra = extract32(insn, 16, 5);
    a->rc = extract32(insn, 0, 1);
}

static void decode_insn32_extract_X_sync(DisasContext *ctx, arg_X_sync *a, uint32_t insn)
{
    a->sc = extract32(insn, 16, 2);
    a->l = extract32(insn, 21, 3);
}

static void decode_insn32_extract_X_t(DisasContext *ctx, arg_X_t *a, uint32_t insn)
{
    a->rt = extract32(insn, 21, 5);
}

static void decode_insn32_extract_X_t_bp_rc(DisasContext *ctx, arg_X_tb_rc *a, uint32_t insn)
{
    a->rb = times_2(ctx, extract32(insn, 12, 4));
    a->rt = extract32(insn, 21, 5);
    a->rc = extract32(insn, 0, 1);
}

static void decode_insn32_extract_X_t_rc(DisasContext *ctx, arg_X_t_rc *a, uint32_t insn)
{
    a->rt = extract32(insn, 21, 5);
    a->rc = extract32(insn, 0, 1);
}

static void decode_insn32_extract_X_tb(DisasContext *ctx, arg_X_tb *a, uint32_t insn)
{
    a->rb = extract32(insn, 11, 5);
    a->rt = extract32(insn, 21, 5);
}

static void decode_insn32_extract_X_tb_rc(DisasContext *ctx, arg_X_tb_rc *a, uint32_t insn)
{
    a->rb = extract32(insn, 11, 5);
    a->rt = extract32(insn, 21, 5);
    a->rc = extract32(insn, 0, 1);
}

static void decode_insn32_extract_X_tb_s_rc(DisasContext *ctx, arg_X_tb_s_rc *a, uint32_t insn)
{
    a->rb = extract32(insn, 11, 5);
    a->s = extract32(insn, 20, 1);
    a->rt = extract32(insn, 21, 5);
    a->rc = extract32(insn, 0, 1);
}

static void decode_insn32_extract_X_tb_sp_rc(DisasContext *ctx, arg_X_tb_sp_rc *a, uint32_t insn)
{
    a->rb = extract32(insn, 11, 5);
    a->rt = extract32(insn, 21, 5);
    a->sp = extract32(insn, 19, 2);
    a->rc = extract32(insn, 0, 1);
}

static void decode_insn32_extract_X_tbp_rc(DisasContext *ctx, arg_X_tb_rc *a, uint32_t insn)
{
    a->rb = times_2(ctx, extract32(insn, 12, 4));
    a->rt = times_2(ctx, extract32(insn, 22, 4));
    a->rc = extract32(insn, 0, 1);
}

static void decode_insn32_extract_X_tbp_s_rc(DisasContext *ctx, arg_X_tb_s_rc *a, uint32_t insn)
{
    a->rb = times_2(ctx, extract32(insn, 12, 4));
    a->s = extract32(insn, 20, 1);
    a->rt = times_2(ctx, extract32(insn, 22, 4));
    a->rc = extract32(insn, 0, 1);
}

static void decode_insn32_extract_X_tbp_sp_rc(DisasContext *ctx, arg_X_tb_sp_rc *a, uint32_t insn)
{
    a->rb = times_2(ctx, extract32(insn, 12, 4));
    a->rt = times_2(ctx, extract32(insn, 22, 4));
    a->sp = extract32(insn, 19, 2);
    a->rc = extract32(insn, 0, 1);
}

static void decode_insn32_extract_X_tl(DisasContext *ctx, arg_X_tl *a, uint32_t insn)
{
    a->rt = extract32(insn, 21, 5);
    a->l = extract32(insn, 16, 2);
}

static void decode_insn32_extract_X_tlbie(DisasContext *ctx, arg_X_tlbie *a, uint32_t insn)
{
    a->ric = extract32(insn, 18, 2);
    a->rs = extract32(insn, 21, 5);
    a->rb = extract32(insn, 11, 5);
    a->r = extract32(insn, 16, 1);
    a->prs = extract32(insn, 17, 1);
}

static void decode_insn32_extract_X_tp_a_bp_rc(DisasContext *ctx, arg_X_rc *a, uint32_t insn)
{
    a->rb = times_2(ctx, extract32(insn, 12, 4));
    a->rt = times_2(ctx, extract32(insn, 22, 4));
    a->ra = extract32(insn, 16, 5);
    a->rc = extract32(insn, 0, 1);
}

static void decode_insn32_extract_X_tp_ap_bp_rc(DisasContext *ctx, arg_X_rc *a, uint32_t insn)
{
    a->rb = times_2(ctx, extract32(insn, 12, 4));
    a->rt = times_2(ctx, extract32(insn, 22, 4));
    a->ra = times_2(ctx, extract32(insn, 17, 4));
    a->rc = extract32(insn, 0, 1);
}

static void decode_insn32_extract_X_tp_b_rc(DisasContext *ctx, arg_X_tb_rc *a, uint32_t insn)
{
    a->rb = extract32(insn, 11, 5);
    a->rt = times_2(ctx, extract32(insn, 22, 4));
    a->rc = extract32(insn, 0, 1);
}

static void decode_insn32_extract_X_uim5(DisasContext *ctx, arg_X_uim5 *a, uint32_t insn)
{
    a->uim = extract32(insn, 11, 5);
    a->xt = deposit32(extract32(insn, 21, 5), 5, 27, extract32(insn, 0, 1));
}

static void decode_insn32_extract_X_vrt_frbp(DisasContext *ctx, arg_X_vrt_frbp *a, uint32_t insn)
{
    a->frbp = times_2(ctx, extract32(insn, 12, 4));
    a->vrt = extract32(insn, 21, 5);
}

static void decode_insn32_extract_Z22_bf_fra(DisasContext *ctx, arg_Z22_bf_fra *a, uint32_t insn)
{
    a->fra = extract32(insn, 16, 5);
    a->bf = extract32(insn, 23, 3);
    a->dm = extract32(insn, 10, 6);
}

static void decode_insn32_extract_Z22_bf_frap(DisasContext *ctx, arg_Z22_bf_fra *a, uint32_t insn)
{
    a->fra = times_2(ctx, extract32(insn, 17, 4));
    a->bf = extract32(insn, 23, 3);
    a->dm = extract32(insn, 10, 6);
}

static void decode_insn32_extract_Z22_ta_sh_rc(DisasContext *ctx, arg_Z22_ta_sh_rc *a, uint32_t insn)
{
    a->rt = extract32(insn, 21, 5);
    a->ra = extract32(insn, 16, 5);
    a->sh = extract32(insn, 10, 6);
    a->rc = extract32(insn, 0, 1);
}

static void decode_insn32_extract_Z22_tap_sh_rc(DisasContext *ctx, arg_Z22_ta_sh_rc *a, uint32_t insn)
{
    a->rt = times_2(ctx, extract32(insn, 22, 4));
    a->ra = times_2(ctx, extract32(insn, 17, 4));
    a->sh = extract32(insn, 10, 6);
    a->rc = extract32(insn, 0, 1);
}

static void decode_insn32_extract_Z23_tab(DisasContext *ctx, arg_Z23_tab *a, uint32_t insn)
{
    a->frb = extract32(insn, 11, 5);
    a->rmc = extract32(insn, 9, 2);
    a->rc = extract32(insn, 0, 1);
    a->frt = extract32(insn, 21, 5);
    a->fra = extract32(insn, 16, 5);
}

static void decode_insn32_extract_Z23_tabp(DisasContext *ctx, arg_Z23_tab *a, uint32_t insn)
{
    a->frb = times_2(ctx, extract32(insn, 12, 4));
    a->rmc = extract32(insn, 9, 2);
    a->rc = extract32(insn, 0, 1);
    a->frt = times_2(ctx, extract32(insn, 22, 4));
    a->fra = times_2(ctx, extract32(insn, 17, 4));
}

static void decode_insn32_extract_Z23_tb(DisasContext *ctx, arg_Z23_tb *a, uint32_t insn)
{
    a->frb = extract32(insn, 11, 5);
    a->rmc = extract32(insn, 9, 2);
    a->rc = extract32(insn, 0, 1);
    a->frt = extract32(insn, 21, 5);
    a->r = extract32(insn, 16, 1);
}

static void decode_insn32_extract_Z23_tbp(DisasContext *ctx, arg_Z23_tb *a, uint32_t insn)
{
    a->frb = times_2(ctx, extract32(insn, 12, 4));
    a->rmc = extract32(insn, 9, 2);
    a->rc = extract32(insn, 0, 1);
    a->frt = times_2(ctx, extract32(insn, 22, 4));
    a->r = extract32(insn, 16, 1);
}

static void decode_insn32_extract_Z23_te_tb(DisasContext *ctx, arg_Z23_te_tb *a, uint32_t insn)
{
    a->frb = extract32(insn, 11, 5);
    a->rmc = extract32(insn, 9, 2);
    a->rc = extract32(insn, 0, 1);
    a->frt = extract32(insn, 21, 5);
    a->te = extract32(insn, 16, 5);
}

static void decode_insn32_extract_Z23_te_tbp(DisasContext *ctx, arg_Z23_te_tb *a, uint32_t insn)
{
    a->frb = times_2(ctx, extract32(insn, 12, 4));
    a->rmc = extract32(insn, 9, 2);
    a->rc = extract32(insn, 0, 1);
    a->frt = times_2(ctx, extract32(insn, 22, 4));
    a->te = extract32(insn, 16, 5);
}

static void decode_insn32_extract_Z23_tp_a_bp(DisasContext *ctx, arg_Z23_tab *a, uint32_t insn)
{
    a->frb = times_2(ctx, extract32(insn, 12, 4));
    a->rmc = extract32(insn, 9, 2);
    a->rc = extract32(insn, 0, 1);
    a->fra = extract32(insn, 16, 5);
    a->frt = times_2(ctx, extract32(insn, 22, 4));
}

static void decode_insn32_extract_decode_insn32_Fmt_92(DisasContext *ctx, arg_decode_insn3265 *a, uint32_t insn)
{
}

static bool decode_insn32(DisasContext *ctx, uint32_t insn)
{
    union {
        arg_A f_A;
        arg_A_tab f_A_tab;
        arg_A_tab_bc f_A_tab_bc;
        arg_A_tac f_A_tac;
        arg_A_tb f_A_tb;
        arg_D f_D;
        arg_DX f_DX;
        arg_DX_b f_DX_b;
        arg_D_bf f_D_bf;
        arg_D_ui f_D_ui;
        arg_MMIRR_XX3 f_MMIRR_XX3;
        arg_VA f_VA;
        arg_VC f_VC;
        arg_VN f_VN;
        arg_VX f_VX;
        arg_VX_bf f_VX_bf;
        arg_VX_mp f_VX_mp;
        arg_VX_n f_VX_n;
        arg_VX_tb f_VX_tb;
        arg_VX_tb_rc f_VX_tb_rc;
        arg_VX_uim4 f_VX_uim4;
        arg_X f_X;
        arg_XFX_bhrbe f_XFX_bhrbe;
        arg_XL_s f_XL_s;
        arg_XO f_XO;
        arg_XO_ta f_XO_ta;
        arg_XO_tab_rc f_XO_tab_rc;
        arg_XX2 f_XX2;
        arg_XX2_bf_uim f_XX2_bf_uim;
        arg_XX2_bf_xb f_XX2_bf_xb;
        arg_XX2_uim f_XX2_uim;
        arg_XX3 f_XX3;
        arg_XX3_dm f_XX3_dm;
        arg_XX3_rc f_XX3_rc;
        arg_XX4 f_XX4;
        arg_X_a f_X_a;
        arg_X_bf f_X_bf;
        arg_X_bf_b f_X_bf_b;
        arg_X_bf_uim f_X_bf_uim;
        arg_X_bfl f_X_bfl;
        arg_X_bi f_X_bi;
        arg_X_frtp_vrb f_X_frtp_vrb;
        arg_X_ih f_X_ih;
        arg_X_imm2 f_X_imm2;
        arg_X_imm3 f_X_imm3;
        arg_X_imm5 f_X_imm5;
        arg_X_imm8 f_X_imm8;
        arg_X_rb f_X_rb;
        arg_X_rc f_X_rc;
        arg_X_rs_l f_X_rs_l;
        arg_X_sa f_X_sa;
        arg_X_sa_rc f_X_sa_rc;
        arg_X_sync f_X_sync;
        arg_X_t f_X_t;
        arg_X_t_rc f_X_t_rc;
        arg_X_tb f_X_tb;
        arg_X_tb_rc f_X_tb_rc;
        arg_X_tb_s_rc f_X_tb_s_rc;
        arg_X_tb_sp_rc f_X_tb_sp_rc;
        arg_X_tl f_X_tl;
        arg_X_tlbie f_X_tlbie;
        arg_X_uim5 f_X_uim5;
        arg_X_vrt_frbp f_X_vrt_frbp;
        arg_Z22_bf_fra f_Z22_bf_fra;
        arg_Z22_ta_sh_rc f_Z22_ta_sh_rc;
        arg_Z23_tab f_Z23_tab;
        arg_Z23_tb f_Z23_tb;
        arg_Z23_te_tb f_Z23_te_tb;
        arg_decode_insn3265 f_decode_insn3265;
    } u;

    switch ((insn >> 26) & 0x3f) {
    case 0x0:
        /* 000000.. ........ ........ ........ */
        decode_insn32_extract_decode_insn32_Fmt_92(ctx, &u.f_decode_insn3265, insn);
        switch (insn & 0x03ffffff) {
        case 0x00000200:
            /* 00000000 00000000 00000010 00000000 */
            /* ../target/ppc/insn32.decode:1302 */
            if (trans_ATTN(ctx, &u.f_decode_insn3265)) return true;
            break;
        }
        break;
    case 0x2:
        /* 000010.. ........ ........ ........ */
        /* ../target/ppc/insn32.decode:363 */
        decode_insn32_extract_D(ctx, &u.f_D, insn);
        if (trans_TDI(ctx, &u.f_D)) return true;
        break;
    case 0x3:
        /* 000011.. ........ ........ ........ */
        /* ../target/ppc/insn32.decode:362 */
        decode_insn32_extract_D(ctx, &u.f_D, insn);
        if (trans_TWI(ctx, &u.f_D)) return true;
        break;
    case 0x4:
        /* 000100.. ........ ........ ........ */
        switch ((insn >> 1) & 0x1f) {
        case 0x0:
            /* 000100.. ........ ........ ..00000. */
            switch (insn & 0x000007c1) {
            case 0x00000100:
                /* 000100.. ........ .....001 00000000 */
                /* ../target/ppc/insn32.decode:836 */
                decode_insn32_extract_VX(ctx, &u.f_VX, insn);
                if (trans_VADDUQM(ctx, &u.f_VX)) return true;
                break;
            case 0x00000101:
                /* 000100.. ........ .....001 00000001 */
                /* ../target/ppc/insn32.decode:713 */
                decode_insn32_extract_VX_bf(ctx, &u.f_VX_bf, insn);
                if (trans_VCMPUQ(ctx, &u.f_VX_bf)) return true;
                break;
            case 0x00000140:
                /* 000100.. ........ .....001 01000000 */
                /* ../target/ppc/insn32.decode:835 */
                decode_insn32_extract_VX(ctx, &u.f_VX, insn);
                if (trans_VADDCUQ(ctx, &u.f_VX)) return true;
                break;
            case 0x00000141:
                /* 000100.. ........ .....001 01000001 */
                /* ../target/ppc/insn32.decode:712 */
                decode_insn32_extract_VX_bf(ctx, &u.f_VX_bf, insn);
                if (trans_VCMPSQ(ctx, &u.f_VX_bf)) return true;
                break;
            case 0x00000180:
                /* 000100.. ........ .....001 10000000 */
                /* ../target/ppc/insn32.decode:834 */
                decode_insn32_extract_VX(ctx, &u.f_VX, insn);
                if (trans_VADDCUW(ctx, &u.f_VX)) return true;
                break;
            case 0x00000200:
                /* 000100.. ........ .....010 00000000 */
                /* ../target/ppc/insn32.decode:842 */
                decode_insn32_extract_VX(ctx, &u.f_VX, insn);
                if (trans_VADDUBS(ctx, &u.f_VX)) return true;
                break;
            case 0x00000240:
                /* 000100.. ........ .....010 01000000 */
                /* ../target/ppc/insn32.decode:843 */
                decode_insn32_extract_VX(ctx, &u.f_VX, insn);
                if (trans_VADDUHS(ctx, &u.f_VX)) return true;
                break;
            case 0x00000280:
                /* 000100.. ........ .....010 10000000 */
                /* ../target/ppc/insn32.decode:844 */
                decode_insn32_extract_VX(ctx, &u.f_VX, insn);
                if (trans_VADDUWS(ctx, &u.f_VX)) return true;
                break;
            case 0x00000300:
                /* 000100.. ........ .....011 00000000 */
                /* ../target/ppc/insn32.decode:838 */
                decode_insn32_extract_VX(ctx, &u.f_VX, insn);
                if (trans_VADDSBS(ctx, &u.f_VX)) return true;
                break;
            case 0x00000340:
                /* 000100.. ........ .....011 01000000 */
                /* ../target/ppc/insn32.decode:839 */
                decode_insn32_extract_VX(ctx, &u.f_VX, insn);
                if (trans_VADDSHS(ctx, &u.f_VX)) return true;
                break;
            case 0x00000380:
                /* 000100.. ........ .....011 10000000 */
                /* ../target/ppc/insn32.decode:840 */
                decode_insn32_extract_VX(ctx, &u.f_VX, insn);
                if (trans_VADDSWS(ctx, &u.f_VX)) return true;
                break;
            case 0x00000500:
                /* 000100.. ........ .....101 00000000 */
                /* ../target/ppc/insn32.decode:851 */
                decode_insn32_extract_VX(ctx, &u.f_VX, insn);
                if (trans_VSUBUQM(ctx, &u.f_VX)) return true;
                break;
            case 0x00000540:
                /* 000100.. ........ .....101 01000000 */
                /* ../target/ppc/insn32.decode:850 */
                decode_insn32_extract_VX(ctx, &u.f_VX, insn);
                if (trans_VSUBCUQ(ctx, &u.f_VX)) return true;
                break;
            case 0x00000580:
                /* 000100.. ........ .....101 10000000 */
                /* ../target/ppc/insn32.decode:849 */
                decode_insn32_extract_VX(ctx, &u.f_VX, insn);
                if (trans_VSUBCUW(ctx, &u.f_VX)) return true;
                break;
            case 0x00000600:
                /* 000100.. ........ .....110 00000000 */
                /* ../target/ppc/insn32.decode:857 */
                decode_insn32_extract_VX(ctx, &u.f_VX, insn);
                if (trans_VSUBUBS(ctx, &u.f_VX)) return true;
                break;
            case 0x00000640:
                /* 000100.. ........ .....110 01000000 */
                /* ../target/ppc/insn32.decode:858 */
                decode_insn32_extract_VX(ctx, &u.f_VX, insn);
                if (trans_VSUBUHS(ctx, &u.f_VX)) return true;
                break;
            case 0x00000680:
                /* 000100.. ........ .....110 10000000 */
                /* ../target/ppc/insn32.decode:859 */
                decode_insn32_extract_VX(ctx, &u.f_VX, insn);
                if (trans_VSUBUWS(ctx, &u.f_VX)) return true;
                break;
            case 0x00000700:
                /* 000100.. ........ .....111 00000000 */
                /* ../target/ppc/insn32.decode:853 */
                decode_insn32_extract_VX(ctx, &u.f_VX, insn);
                if (trans_VSUBSBS(ctx, &u.f_VX)) return true;
                break;
            case 0x00000740:
                /* 000100.. ........ .....111 01000000 */
                /* ../target/ppc/insn32.decode:854 */
                decode_insn32_extract_VX(ctx, &u.f_VX, insn);
                if (trans_VSUBSHS(ctx, &u.f_VX)) return true;
                break;
            case 0x00000780:
                /* 000100.. ........ .....111 10000000 */
                /* ../target/ppc/insn32.decode:855 */
                decode_insn32_extract_VX(ctx, &u.f_VX, insn);
                if (trans_VSUBSWS(ctx, &u.f_VX)) return true;
                break;
            }
            break;
        case 0x1:
            /* 000100.. ........ ........ ..00001. */
            switch (insn & 0x000007c1) {
            case 0x00000000:
                /* 000100.. ........ .....000 00000010 */
                /* ../target/ppc/insn32.decode:876 */
                decode_insn32_extract_VX(ctx, &u.f_VX, insn);
                if (trans_VMAXUB(ctx, &u.f_VX)) return true;
                break;
            case 0x00000040:
                /* 000100.. ........ .....000 01000010 */
                /* ../target/ppc/insn32.decode:877 */
                decode_insn32_extract_VX(ctx, &u.f_VX, insn);
                if (trans_VMAXUH(ctx, &u.f_VX)) return true;
                break;
            case 0x00000080:
                /* 000100.. ........ .....000 10000010 */
                /* ../target/ppc/insn32.decode:878 */
                decode_insn32_extract_VX(ctx, &u.f_VX, insn);
                if (trans_VMAXUW(ctx, &u.f_VX)) return true;
                break;
            case 0x000000c0:
                /* 000100.. ........ .....000 11000010 */
                /* ../target/ppc/insn32.decode:879 */
                decode_insn32_extract_VX(ctx, &u.f_VX, insn);
                if (trans_VMAXUD(ctx, &u.f_VX)) return true;
                break;
            case 0x00000100:
                /* 000100.. ........ .....001 00000010 */
                /* ../target/ppc/insn32.decode:881 */
                decode_insn32_extract_VX(ctx, &u.f_VX, insn);
                if (trans_VMAXSB(ctx, &u.f_VX)) return true;
                break;
            case 0x00000140:
                /* 000100.. ........ .....001 01000010 */
                /* ../target/ppc/insn32.decode:882 */
                decode_insn32_extract_VX(ctx, &u.f_VX, insn);
                if (trans_VMAXSH(ctx, &u.f_VX)) return true;
                break;
            case 0x00000180:
                /* 000100.. ........ .....001 10000010 */
                /* ../target/ppc/insn32.decode:883 */
                decode_insn32_extract_VX(ctx, &u.f_VX, insn);
                if (trans_VMAXSW(ctx, &u.f_VX)) return true;
                break;
            case 0x000001c0:
                /* 000100.. ........ .....001 11000010 */
                /* ../target/ppc/insn32.decode:884 */
                decode_insn32_extract_VX(ctx, &u.f_VX, insn);
                if (trans_VMAXSD(ctx, &u.f_VX)) return true;
                break;
            case 0x00000200:
                /* 000100.. ........ .....010 00000010 */
                /* ../target/ppc/insn32.decode:886 */
                decode_insn32_extract_VX(ctx, &u.f_VX, insn);
                if (trans_VMINUB(ctx, &u.f_VX)) return true;
                break;
            case 0x00000240:
                /* 000100.. ........ .....010 01000010 */
                /* ../target/ppc/insn32.decode:887 */
                decode_insn32_extract_VX(ctx, &u.f_VX, insn);
                if (trans_VMINUH(ctx, &u.f_VX)) return true;
                break;
            case 0x00000280:
                /* 000100.. ........ .....010 10000010 */
                /* ../target/ppc/insn32.decode:888 */
                decode_insn32_extract_VX(ctx, &u.f_VX, insn);
                if (trans_VMINUW(ctx, &u.f_VX)) return true;
                break;
            case 0x000002c0:
                /* 000100.. ........ .....010 11000010 */
                /* ../target/ppc/insn32.decode:889 */
                decode_insn32_extract_VX(ctx, &u.f_VX, insn);
                if (trans_VMINUD(ctx, &u.f_VX)) return true;
                break;
            case 0x00000300:
                /* 000100.. ........ .....011 00000010 */
                /* ../target/ppc/insn32.decode:891 */
                decode_insn32_extract_VX(ctx, &u.f_VX, insn);
                if (trans_VMINSB(ctx, &u.f_VX)) return true;
                break;
            case 0x00000340:
                /* 000100.. ........ .....011 01000010 */
                /* ../target/ppc/insn32.decode:892 */
                decode_insn32_extract_VX(ctx, &u.f_VX, insn);
                if (trans_VMINSH(ctx, &u.f_VX)) return true;
                break;
            case 0x00000380:
                /* 000100.. ........ .....011 10000010 */
                /* ../target/ppc/insn32.decode:893 */
                decode_insn32_extract_VX(ctx, &u.f_VX, insn);
                if (trans_VMINSW(ctx, &u.f_VX)) return true;
                break;
            case 0x000003c0:
                /* 000100.. ........ .....011 11000010 */
                /* ../target/ppc/insn32.decode:894 */
                decode_insn32_extract_VX(ctx, &u.f_VX, insn);
                if (trans_VMINSD(ctx, &u.f_VX)) return true;
                break;
            case 0x00000400:
                /* 000100.. ........ .....100 00000010 */
                /* ../target/ppc/insn32.decode:731 */
                decode_insn32_extract_VX(ctx, &u.f_VX, insn);
                if (trans_VAVGUB(ctx, &u.f_VX)) return true;
                break;
            case 0x00000401:
                /* 000100.. ........ .....100 00000011 */
                /* ../target/ppc/insn32.decode:737 */
                decode_insn32_extract_VX(ctx, &u.f_VX, insn);
                if (trans_VABSDUB(ctx, &u.f_VX)) return true;
                break;
            case 0x00000440:
                /* 000100.. ........ .....100 01000010 */
                /* ../target/ppc/insn32.decode:732 */
                decode_insn32_extract_VX(ctx, &u.f_VX, insn);
                if (trans_VAVGUH(ctx, &u.f_VX)) return true;
                break;
            case 0x00000441:
                /* 000100.. ........ .....100 01000011 */
                /* ../target/ppc/insn32.decode:738 */
                decode_insn32_extract_VX(ctx, &u.f_VX, insn);
                if (trans_VABSDUH(ctx, &u.f_VX)) return true;
                break;
            case 0x00000480:
                /* 000100.. ........ .....100 10000010 */
                /* ../target/ppc/insn32.decode:733 */
                decode_insn32_extract_VX(ctx, &u.f_VX, insn);
                if (trans_VAVGUW(ctx, &u.f_VX)) return true;
                break;
            case 0x00000481:
                /* 000100.. ........ .....100 10000011 */
                /* ../target/ppc/insn32.decode:739 */
                decode_insn32_extract_VX(ctx, &u.f_VX, insn);
                if (trans_VABSDUW(ctx, &u.f_VX)) return true;
                break;
            case 0x00000500:
                /* 000100.. ........ .....101 00000010 */
                /* ../target/ppc/insn32.decode:728 */
                decode_insn32_extract_VX(ctx, &u.f_VX, insn);
                if (trans_VAVGSB(ctx, &u.f_VX)) return true;
                break;
            case 0x00000540:
                /* 000100.. ........ .....101 01000010 */
                /* ../target/ppc/insn32.decode:729 */
                decode_insn32_extract_VX(ctx, &u.f_VX, insn);
                if (trans_VAVGSH(ctx, &u.f_VX)) return true;
                break;
            case 0x00000580:
                /* 000100.. ........ .....101 10000010 */
                /* ../target/ppc/insn32.decode:730 */
                decode_insn32_extract_VX(ctx, &u.f_VX, insn);
                if (trans_VAVGSW(ctx, &u.f_VX)) return true;
                break;
            case 0x00000600:
                /* 000100.. ........ .....110 00000010 */
                decode_insn32_extract_VX_tb(ctx, &u.f_VX_tb, insn);
                switch ((insn >> 16) & 0x1f) {
                case 0x6:
                    /* 000100.. ...00110 .....110 00000010 */
                    /* ../target/ppc/insn32.decode:872 */
                    if (trans_VNEGW(ctx, &u.f_VX_tb)) return true;
                    break;
                case 0x7:
                    /* 000100.. ...00111 .....110 00000010 */
                    /* ../target/ppc/insn32.decode:871 */
                    if (trans_VNEGD(ctx, &u.f_VX_tb)) return true;
                    break;
                case 0x8:
                    /* 000100.. ...01000 .....110 00000010 */
                    /* ../target/ppc/insn32.decode:753 */
                    if (trans_VPRTYBW(ctx, &u.f_VX_tb)) return true;
                    break;
                case 0x9:
                    /* 000100.. ...01001 .....110 00000010 */
                    /* ../target/ppc/insn32.decode:751 */
                    if (trans_VPRTYBD(ctx, &u.f_VX_tb)) return true;
                    break;
                case 0xa:
                    /* 000100.. ...01010 .....110 00000010 */
                    /* ../target/ppc/insn32.decode:752 */
                    if (trans_VPRTYBQ(ctx, &u.f_VX_tb)) return true;
                    break;
                case 0x10:
                    /* 000100.. ...10000 .....110 00000010 */
                    /* ../target/ppc/insn32.decode:864 */
                    if (trans_VEXTSB2W(ctx, &u.f_VX_tb)) return true;
                    break;
                case 0x11:
                    /* 000100.. ...10001 .....110 00000010 */
                    /* ../target/ppc/insn32.decode:865 */
                    if (trans_VEXTSH2W(ctx, &u.f_VX_tb)) return true;
                    break;
                case 0x18:
                    /* 000100.. ...11000 .....110 00000010 */
                    /* ../target/ppc/insn32.decode:866 */
                    if (trans_VEXTSB2D(ctx, &u.f_VX_tb)) return true;
                    break;
                case 0x19:
                    /* 000100.. ...11001 .....110 00000010 */
                    /* ../target/ppc/insn32.decode:867 */
                    if (trans_VEXTSH2D(ctx, &u.f_VX_tb)) return true;
                    break;
                case 0x1a:
                    /* 000100.. ...11010 .....110 00000010 */
                    /* ../target/ppc/insn32.decode:868 */
                    if (trans_VEXTSW2D(ctx, &u.f_VX_tb)) return true;
                    break;
                case 0x1b:
                    /* 000100.. ...11011 .....110 00000010 */
                    /* ../target/ppc/insn32.decode:869 */
                    if (trans_VEXTSD2Q(ctx, &u.f_VX_tb)) return true;
                    break;
                }
                break;
            case 0x00000640:
                /* 000100.. ........ .....110 01000010 */
                switch ((insn >> 17) & 0xf) {
                case 0x0:
                    /* 000100.. ...0000. .....110 01000010 */
                    decode_insn32_extract_VX_tb(ctx, &u.f_VX_tb, insn);
                    switch ((insn >> 16) & 0x1) {
                    case 0x0:
                        /* 000100.. ...00000 .....110 01000010 */
                        /* ../target/ppc/insn32.decode:905 */
                        if (trans_VEXPANDBM(ctx, &u.f_VX_tb)) return true;
                        break;
                    case 0x1:
                        /* 000100.. ...00001 .....110 01000010 */
                        /* ../target/ppc/insn32.decode:906 */
                        if (trans_VEXPANDHM(ctx, &u.f_VX_tb)) return true;
                        break;
                    }
                    break;
                case 0x1:
                    /* 000100.. ...0001. .....110 01000010 */
                    decode_insn32_extract_VX_tb(ctx, &u.f_VX_tb, insn);
                    switch ((insn >> 16) & 0x1) {
                    case 0x0:
                        /* 000100.. ...00010 .....110 01000010 */
                        /* ../target/ppc/insn32.decode:907 */
                        if (trans_VEXPANDWM(ctx, &u.f_VX_tb)) return true;
                        break;
                    case 0x1:
                        /* 000100.. ...00011 .....110 01000010 */
                        /* ../target/ppc/insn32.decode:908 */
                        if (trans_VEXPANDDM(ctx, &u.f_VX_tb)) return true;
                        break;
                    }
                    break;
                case 0x2:
                    /* 000100.. ...0010. .....110 01000010 */
                    decode_insn32_extract_VX_tb(ctx, &u.f_VX_tb, insn);
                    switch ((insn >> 16) & 0x1) {
                    case 0x0:
                        /* 000100.. ...00100 .....110 01000010 */
                        /* ../target/ppc/insn32.decode:909 */
                        if (trans_VEXPANDQM(ctx, &u.f_VX_tb)) return true;
                        break;
                    }
                    break;
                case 0x4:
                    /* 000100.. ...0100. .....110 01000010 */
                    decode_insn32_extract_VX_tb(ctx, &u.f_VX_tb, insn);
                    switch ((insn >> 16) & 0x1) {
                    case 0x0:
                        /* 000100.. ...01000 .....110 01000010 */
                        /* ../target/ppc/insn32.decode:911 */
                        if (trans_VEXTRACTBM(ctx, &u.f_VX_tb)) return true;
                        break;
                    case 0x1:
                        /* 000100.. ...01001 .....110 01000010 */
                        /* ../target/ppc/insn32.decode:912 */
                        if (trans_VEXTRACTHM(ctx, &u.f_VX_tb)) return true;
                        break;
                    }
                    break;
                case 0x5:
                    /* 000100.. ...0101. .....110 01000010 */
                    decode_insn32_extract_VX_tb(ctx, &u.f_VX_tb, insn);
                    switch ((insn >> 16) & 0x1) {
                    case 0x0:
                        /* 000100.. ...01010 .....110 01000010 */
                        /* ../target/ppc/insn32.decode:913 */
                        if (trans_VEXTRACTWM(ctx, &u.f_VX_tb)) return true;
                        break;
                    case 0x1:
                        /* 000100.. ...01011 .....110 01000010 */
                        /* ../target/ppc/insn32.decode:914 */
                        if (trans_VEXTRACTDM(ctx, &u.f_VX_tb)) return true;
                        break;
                    }
                    break;
                case 0x6:
                    /* 000100.. ...0110. .....110 01000010 */
                    decode_insn32_extract_VX_tb(ctx, &u.f_VX_tb, insn);
                    switch ((insn >> 16) & 0x1) {
                    case 0x0:
                        /* 000100.. ...01100 .....110 01000010 */
                        /* ../target/ppc/insn32.decode:915 */
                        if (trans_VEXTRACTQM(ctx, &u.f_VX_tb)) return true;
                        break;
                    }
                    break;
                case 0x8:
                    /* 000100.. ...1000. .....110 01000010 */
                    decode_insn32_extract_VX_tb(ctx, &u.f_VX_tb, insn);
                    switch ((insn >> 16) & 0x1) {
                    case 0x0:
                        /* 000100.. ...10000 .....110 01000010 */
                        /* ../target/ppc/insn32.decode:898 */
                        if (trans_MTVSRBM(ctx, &u.f_VX_tb)) return true;
                        break;
                    case 0x1:
                        /* 000100.. ...10001 .....110 01000010 */
                        /* ../target/ppc/insn32.decode:899 */
                        if (trans_MTVSRHM(ctx, &u.f_VX_tb)) return true;
                        break;
                    }
                    break;
                case 0x9:
                    /* 000100.. ...1001. .....110 01000010 */
                    decode_insn32_extract_VX_tb(ctx, &u.f_VX_tb, insn);
                    switch ((insn >> 16) & 0x1) {
                    case 0x0:
                        /* 000100.. ...10010 .....110 01000010 */
                        /* ../target/ppc/insn32.decode:900 */
                        if (trans_MTVSRWM(ctx, &u.f_VX_tb)) return true;
                        break;
                    case 0x1:
                        /* 000100.. ...10011 .....110 01000010 */
                        /* ../target/ppc/insn32.decode:901 */
                        if (trans_MTVSRDM(ctx, &u.f_VX_tb)) return true;
                        break;
                    }
                    break;
                case 0xa:
                    /* 000100.. ...1010. .....110 01000010 */
                    decode_insn32_extract_VX_tb(ctx, &u.f_VX_tb, insn);
                    switch ((insn >> 16) & 0x1) {
                    case 0x0:
                        /* 000100.. ...10100 .....110 01000010 */
                        /* ../target/ppc/insn32.decode:902 */
                        if (trans_MTVSRQM(ctx, &u.f_VX_tb)) return true;
                        break;
                    }
                    break;
                case 0xc:
                    /* 000100.. ...1100. .....110 01000010 */
                    /* ../target/ppc/insn32.decode:917 */
                    decode_insn32_extract_VX_mp(ctx, &u.f_VX_mp, insn);
                    if (trans_VCNTMBB(ctx, &u.f_VX_mp)) return true;
                    break;
                case 0xd:
                    /* 000100.. ...1101. .....110 01000010 */
                    /* ../target/ppc/insn32.decode:918 */
                    decode_insn32_extract_VX_mp(ctx, &u.f_VX_mp, insn);
                    if (trans_VCNTMBH(ctx, &u.f_VX_mp)) return true;
                    break;
                case 0xe:
                    /* 000100.. ...1110. .....110 01000010 */
                    /* ../target/ppc/insn32.decode:919 */
                    decode_insn32_extract_VX_mp(ctx, &u.f_VX_mp, insn);
                    if (trans_VCNTMBW(ctx, &u.f_VX_mp)) return true;
                    break;
                case 0xf:
                    /* 000100.. ...1111. .....110 01000010 */
                    /* ../target/ppc/insn32.decode:920 */
                    decode_insn32_extract_VX_mp(ctx, &u.f_VX_mp, insn);
                    if (trans_VCNTMBD(ctx, &u.f_VX_mp)) return true;
                    break;
                }
                break;
            }
            break;
        case 0x2:
            /* 000100.. ........ ........ ..00010. */
            decode_insn32_extract_VX(ctx, &u.f_VX, insn);
            switch (insn & 0x000007c1) {
            case 0x00000000:
                /* 000100.. ........ .....000 00000100 */
                /* ../target/ppc/insn32.decode:818 */
                if (trans_VRLB(ctx, &u.f_VX)) return true;
                break;
            case 0x00000001:
                /* 000100.. ........ .....000 00000101 */
                /* ../target/ppc/insn32.decode:822 */
                if (trans_VRLQ(ctx, &u.f_VX)) return true;
                break;
            case 0x00000040:
                /* 000100.. ........ .....000 01000100 */
                /* ../target/ppc/insn32.decode:819 */
                if (trans_VRLH(ctx, &u.f_VX)) return true;
                break;
            case 0x00000041:
                /* 000100.. ........ .....000 01000101 */
                /* ../target/ppc/insn32.decode:826 */
                if (trans_VRLQMI(ctx, &u.f_VX)) return true;
                break;
            case 0x00000080:
                /* 000100.. ........ .....000 10000100 */
                /* ../target/ppc/insn32.decode:820 */
                if (trans_VRLW(ctx, &u.f_VX)) return true;
                break;
            case 0x00000081:
                /* 000100.. ........ .....000 10000101 */
                /* ../target/ppc/insn32.decode:824 */
                if (trans_VRLWMI(ctx, &u.f_VX)) return true;
                break;
            case 0x000000c0:
                /* 000100.. ........ .....000 11000100 */
                /* ../target/ppc/insn32.decode:821 */
                if (trans_VRLD(ctx, &u.f_VX)) return true;
                break;
            case 0x000000c1:
                /* 000100.. ........ .....000 11000101 */
                /* ../target/ppc/insn32.decode:825 */
                if (trans_VRLDMI(ctx, &u.f_VX)) return true;
                break;
            case 0x00000100:
                /* 000100.. ........ .....001 00000100 */
                /* ../target/ppc/insn32.decode:800 */
                if (trans_VSLB(ctx, &u.f_VX)) return true;
                break;
            case 0x00000101:
                /* 000100.. ........ .....001 00000101 */
                /* ../target/ppc/insn32.decode:804 */
                if (trans_VSLQ(ctx, &u.f_VX)) return true;
                break;
            case 0x00000140:
                /* 000100.. ........ .....001 01000100 */
                /* ../target/ppc/insn32.decode:801 */
                if (trans_VSLH(ctx, &u.f_VX)) return true;
                break;
            case 0x00000141:
                /* 000100.. ........ .....001 01000101 */
                /* ../target/ppc/insn32.decode:830 */
                if (trans_VRLQNM(ctx, &u.f_VX)) return true;
                break;
            case 0x00000180:
                /* 000100.. ........ .....001 10000100 */
                /* ../target/ppc/insn32.decode:802 */
                if (trans_VSLW(ctx, &u.f_VX)) return true;
                break;
            case 0x00000181:
                /* 000100.. ........ .....001 10000101 */
                /* ../target/ppc/insn32.decode:828 */
                if (trans_VRLWNM(ctx, &u.f_VX)) return true;
                break;
            case 0x000001c1:
                /* 000100.. ........ .....001 11000101 */
                /* ../target/ppc/insn32.decode:829 */
                if (trans_VRLDNM(ctx, &u.f_VX)) return true;
                break;
            case 0x00000200:
                /* 000100.. ........ .....010 00000100 */
                /* ../target/ppc/insn32.decode:806 */
                if (trans_VSRB(ctx, &u.f_VX)) return true;
                break;
            case 0x00000201:
                /* 000100.. ........ .....010 00000101 */
                /* ../target/ppc/insn32.decode:810 */
                if (trans_VSRQ(ctx, &u.f_VX)) return true;
                break;
            case 0x00000240:
                /* 000100.. ........ .....010 01000100 */
                /* ../target/ppc/insn32.decode:807 */
                if (trans_VSRH(ctx, &u.f_VX)) return true;
                break;
            case 0x00000280:
                /* 000100.. ........ .....010 10000100 */
                /* ../target/ppc/insn32.decode:808 */
                if (trans_VSRW(ctx, &u.f_VX)) return true;
                break;
            case 0x00000300:
                /* 000100.. ........ .....011 00000100 */
                /* ../target/ppc/insn32.decode:812 */
                if (trans_VSRAB(ctx, &u.f_VX)) return true;
                break;
            case 0x00000301:
                /* 000100.. ........ .....011 00000101 */
                /* ../target/ppc/insn32.decode:816 */
                if (trans_VSRAQ(ctx, &u.f_VX)) return true;
                break;
            case 0x00000340:
                /* 000100.. ........ .....011 01000100 */
                /* ../target/ppc/insn32.decode:813 */
                if (trans_VSRAH(ctx, &u.f_VX)) return true;
                break;
            case 0x00000380:
                /* 000100.. ........ .....011 10000100 */
                /* ../target/ppc/insn32.decode:814 */
                if (trans_VSRAW(ctx, &u.f_VX)) return true;
                break;
            case 0x000003c0:
                /* 000100.. ........ .....011 11000100 */
                /* ../target/ppc/insn32.decode:815 */
                if (trans_VSRAD(ctx, &u.f_VX)) return true;
                break;
            case 0x00000400:
                /* 000100.. ........ .....100 00000100 */
                /* ../target/ppc/insn32.decode:717 */
                if (trans_VAND(ctx, &u.f_VX)) return true;
                break;
            case 0x00000440:
                /* 000100.. ........ .....100 01000100 */
                /* ../target/ppc/insn32.decode:718 */
                if (trans_VANDC(ctx, &u.f_VX)) return true;
                break;
            case 0x00000480:
                /* 000100.. ........ .....100 10000100 */
                /* ../target/ppc/insn32.decode:720 */
                if (trans_VOR(ctx, &u.f_VX)) return true;
                break;
            case 0x000004c0:
                /* 000100.. ........ .....100 11000100 */
                /* ../target/ppc/insn32.decode:723 */
                if (trans_VXOR(ctx, &u.f_VX)) return true;
                break;
            case 0x00000500:
                /* 000100.. ........ .....101 00000100 */
                /* ../target/ppc/insn32.decode:722 */
                if (trans_VNOR(ctx, &u.f_VX)) return true;
                break;
            case 0x00000540:
                /* 000100.. ........ .....101 01000100 */
                /* ../target/ppc/insn32.decode:721 */
                if (trans_VORC(ctx, &u.f_VX)) return true;
                break;
            case 0x00000580:
                /* 000100.. ........ .....101 10000100 */
                /* ../target/ppc/insn32.decode:719 */
                if (trans_VNAND(ctx, &u.f_VX)) return true;
                break;
            case 0x000005c0:
                /* 000100.. ........ .....101 11000100 */
                /* ../target/ppc/insn32.decode:803 */
                if (trans_VSLD(ctx, &u.f_VX)) return true;
                break;
            case 0x00000680:
                /* 000100.. ........ .....110 10000100 */
                /* ../target/ppc/insn32.decode:724 */
                if (trans_VEQV(ctx, &u.f_VX)) return true;
                break;
            case 0x000006c0:
                /* 000100.. ........ .....110 11000100 */
                /* ../target/ppc/insn32.decode:809 */
                if (trans_VSRD(ctx, &u.f_VX)) return true;
                break;
            case 0x00000780:
                /* 000100.. ........ .....111 10000100 */
                /* ../target/ppc/insn32.decode:746 */
                if (trans_VCLZDM(ctx, &u.f_VX)) return true;
                break;
            case 0x000007c0:
                /* 000100.. ........ .....111 11000100 */
                /* ../target/ppc/insn32.decode:747 */
                if (trans_VCTZDM(ctx, &u.f_VX)) return true;
                break;
            }
            break;
        case 0x3:
            /* 000100.. ........ ........ ..00011. */
            decode_insn32_extract_VC(ctx, &u.f_VC, insn);
            switch (insn & 0x000003c1) {
            case 0x00000000:
                /* 000100.. ........ ......00 00000110 */
                /* ../target/ppc/insn32.decode:686 */
                if (trans_VCMPEQUB(ctx, &u.f_VC)) return true;
                break;
            case 0x00000001:
                /* 000100.. ........ ......00 00000111 */
                /* ../target/ppc/insn32.decode:704 */
                if (trans_VCMPNEB(ctx, &u.f_VC)) return true;
                break;
            case 0x00000040:
                /* 000100.. ........ ......00 01000110 */
                /* ../target/ppc/insn32.decode:687 */
                if (trans_VCMPEQUH(ctx, &u.f_VC)) return true;
                break;
            case 0x00000041:
                /* 000100.. ........ ......00 01000111 */
                /* ../target/ppc/insn32.decode:705 */
                if (trans_VCMPNEH(ctx, &u.f_VC)) return true;
                break;
            case 0x00000080:
                /* 000100.. ........ ......00 10000110 */
                /* ../target/ppc/insn32.decode:688 */
                if (trans_VCMPEQUW(ctx, &u.f_VC)) return true;
                break;
            case 0x00000081:
                /* 000100.. ........ ......00 10000111 */
                /* ../target/ppc/insn32.decode:706 */
                if (trans_VCMPNEW(ctx, &u.f_VC)) return true;
                break;
            case 0x000000c1:
                /* 000100.. ........ ......00 11000111 */
                /* ../target/ppc/insn32.decode:689 */
                if (trans_VCMPEQUD(ctx, &u.f_VC)) return true;
                break;
            case 0x00000101:
                /* 000100.. ........ ......01 00000111 */
                /* ../target/ppc/insn32.decode:708 */
                if (trans_VCMPNEZB(ctx, &u.f_VC)) return true;
                break;
            case 0x00000141:
                /* 000100.. ........ ......01 01000111 */
                /* ../target/ppc/insn32.decode:709 */
                if (trans_VCMPNEZH(ctx, &u.f_VC)) return true;
                break;
            case 0x00000181:
                /* 000100.. ........ ......01 10000111 */
                /* ../target/ppc/insn32.decode:710 */
                if (trans_VCMPNEZW(ctx, &u.f_VC)) return true;
                break;
            case 0x000001c1:
                /* 000100.. ........ ......01 11000111 */
                /* ../target/ppc/insn32.decode:690 */
                if (trans_VCMPEQUQ(ctx, &u.f_VC)) return true;
                break;
            case 0x00000200:
                /* 000100.. ........ ......10 00000110 */
                /* ../target/ppc/insn32.decode:698 */
                if (trans_VCMPGTUB(ctx, &u.f_VC)) return true;
                break;
            case 0x00000240:
                /* 000100.. ........ ......10 01000110 */
                /* ../target/ppc/insn32.decode:699 */
                if (trans_VCMPGTUH(ctx, &u.f_VC)) return true;
                break;
            case 0x00000280:
                /* 000100.. ........ ......10 10000110 */
                /* ../target/ppc/insn32.decode:700 */
                if (trans_VCMPGTUW(ctx, &u.f_VC)) return true;
                break;
            case 0x00000281:
                /* 000100.. ........ ......10 10000111 */
                /* ../target/ppc/insn32.decode:702 */
                if (trans_VCMPGTUQ(ctx, &u.f_VC)) return true;
                break;
            case 0x000002c1:
                /* 000100.. ........ ......10 11000111 */
                /* ../target/ppc/insn32.decode:701 */
                if (trans_VCMPGTUD(ctx, &u.f_VC)) return true;
                break;
            case 0x00000300:
                /* 000100.. ........ ......11 00000110 */
                /* ../target/ppc/insn32.decode:692 */
                if (trans_VCMPGTSB(ctx, &u.f_VC)) return true;
                break;
            case 0x00000340:
                /* 000100.. ........ ......11 01000110 */
                /* ../target/ppc/insn32.decode:693 */
                if (trans_VCMPGTSH(ctx, &u.f_VC)) return true;
                break;
            case 0x00000380:
                /* 000100.. ........ ......11 10000110 */
                /* ../target/ppc/insn32.decode:694 */
                if (trans_VCMPGTSW(ctx, &u.f_VC)) return true;
                break;
            case 0x00000381:
                /* 000100.. ........ ......11 10000111 */
                /* ../target/ppc/insn32.decode:696 */
                if (trans_VCMPGTSQ(ctx, &u.f_VC)) return true;
                break;
            case 0x000003c1:
                /* 000100.. ........ ......11 11000111 */
                /* ../target/ppc/insn32.decode:695 */
                if (trans_VCMPGTSD(ctx, &u.f_VC)) return true;
                break;
            }
            break;
        case 0x4:
            /* 000100.. ........ ........ ..00100. */
            decode_insn32_extract_VX(ctx, &u.f_VX, insn);
            switch (insn & 0x000007c1) {
            case 0x00000000:
                /* 000100.. ........ .....000 00001000 */
                /* ../target/ppc/insn32.decode:927 */
                if (trans_VMULOUB(ctx, &u.f_VX)) return true;
                break;
            case 0x00000040:
                /* 000100.. ........ .....000 01001000 */
                /* ../target/ppc/insn32.decode:932 */
                if (trans_VMULOUH(ctx, &u.f_VX)) return true;
                break;
            case 0x00000080:
                /* 000100.. ........ .....000 10001000 */
                /* ../target/ppc/insn32.decode:937 */
                if (trans_VMULOUW(ctx, &u.f_VX)) return true;
                break;
            case 0x000000c0:
                /* 000100.. ........ .....000 11001000 */
                /* ../target/ppc/insn32.decode:942 */
                if (trans_VMULOUD(ctx, &u.f_VX)) return true;
                break;
            case 0x00000100:
                /* 000100.. ........ .....001 00001000 */
                /* ../target/ppc/insn32.decode:925 */
                if (trans_VMULOSB(ctx, &u.f_VX)) return true;
                break;
            case 0x00000140:
                /* 000100.. ........ .....001 01001000 */
                /* ../target/ppc/insn32.decode:930 */
                if (trans_VMULOSH(ctx, &u.f_VX)) return true;
                break;
            case 0x00000180:
                /* 000100.. ........ .....001 10001000 */
                /* ../target/ppc/insn32.decode:935 */
                if (trans_VMULOSW(ctx, &u.f_VX)) return true;
                break;
            case 0x000001c0:
                /* 000100.. ........ .....001 11001000 */
                /* ../target/ppc/insn32.decode:940 */
                if (trans_VMULOSD(ctx, &u.f_VX)) return true;
                break;
            case 0x000001c1:
                /* 000100.. ........ .....001 11001001 */
                /* ../target/ppc/insn32.decode:948 */
                if (trans_VMULLD(ctx, &u.f_VX)) return true;
                break;
            case 0x00000200:
                /* 000100.. ........ .....010 00001000 */
                /* ../target/ppc/insn32.decode:926 */
                if (trans_VMULEUB(ctx, &u.f_VX)) return true;
                break;
            case 0x00000240:
                /* 000100.. ........ .....010 01001000 */
                /* ../target/ppc/insn32.decode:931 */
                if (trans_VMULEUH(ctx, &u.f_VX)) return true;
                break;
            case 0x00000280:
                /* 000100.. ........ .....010 10001000 */
                /* ../target/ppc/insn32.decode:936 */
                if (trans_VMULEUW(ctx, &u.f_VX)) return true;
                break;
            case 0x00000281:
                /* 000100.. ........ .....010 10001001 */
                /* ../target/ppc/insn32.decode:945 */
                if (trans_VMULHUW(ctx, &u.f_VX)) return true;
                break;
            case 0x000002c0:
                /* 000100.. ........ .....010 11001000 */
                /* ../target/ppc/insn32.decode:941 */
                if (trans_VMULEUD(ctx, &u.f_VX)) return true;
                break;
            case 0x000002c1:
                /* 000100.. ........ .....010 11001001 */
                /* ../target/ppc/insn32.decode:947 */
                if (trans_VMULHUD(ctx, &u.f_VX)) return true;
                break;
            case 0x00000300:
                /* 000100.. ........ .....011 00001000 */
                /* ../target/ppc/insn32.decode:924 */
                if (trans_VMULESB(ctx, &u.f_VX)) return true;
                break;
            case 0x00000340:
                /* 000100.. ........ .....011 01001000 */
                /* ../target/ppc/insn32.decode:929 */
                if (trans_VMULESH(ctx, &u.f_VX)) return true;
                break;
            case 0x00000380:
                /* 000100.. ........ .....011 10001000 */
                /* ../target/ppc/insn32.decode:934 */
                if (trans_VMULESW(ctx, &u.f_VX)) return true;
                break;
            case 0x00000381:
                /* 000100.. ........ .....011 10001001 */
                /* ../target/ppc/insn32.decode:944 */
                if (trans_VMULHSW(ctx, &u.f_VX)) return true;
                break;
            case 0x000003c0:
                /* 000100.. ........ .....011 11001000 */
                /* ../target/ppc/insn32.decode:939 */
                if (trans_VMULESD(ctx, &u.f_VX)) return true;
                break;
            case 0x000003c1:
                /* 000100.. ........ .....011 11001001 */
                /* ../target/ppc/insn32.decode:946 */
                if (trans_VMULHSD(ctx, &u.f_VX)) return true;
                break;
            case 0x000004c0:
                /* 000100.. ........ .....100 11001000 */
                /* ../target/ppc/insn32.decode:665 */
                if (trans_VPMSUMD(ctx, &u.f_VX)) return true;
                break;
            }
            break;
        case 0x5:
            /* 000100.. ........ ........ ..00101. */
            decode_insn32_extract_VX(ctx, &u.f_VX, insn);
            switch (insn & 0x000007c1) {
            case 0x00000001:
                /* 000100.. ........ .....000 00001011 */
                /* ../target/ppc/insn32.decode:1236 */
                if (trans_VDIVUQ(ctx, &u.f_VX)) return true;
                break;
            case 0x00000081:
                /* 000100.. ........ .....000 10001011 */
                /* ../target/ppc/insn32.decode:1232 */
                if (trans_VDIVUW(ctx, &u.f_VX)) return true;
                break;
            case 0x000000c1:
                /* 000100.. ........ .....000 11001011 */
                /* ../target/ppc/insn32.decode:1234 */
                if (trans_VDIVUD(ctx, &u.f_VX)) return true;
                break;
            case 0x00000101:
                /* 000100.. ........ .....001 00001011 */
                /* ../target/ppc/insn32.decode:1235 */
                if (trans_VDIVSQ(ctx, &u.f_VX)) return true;
                break;
            case 0x00000181:
                /* 000100.. ........ .....001 10001011 */
                /* ../target/ppc/insn32.decode:1231 */
                if (trans_VDIVSW(ctx, &u.f_VX)) return true;
                break;
            case 0x000001c1:
                /* 000100.. ........ .....001 11001011 */
                /* ../target/ppc/insn32.decode:1233 */
                if (trans_VDIVSD(ctx, &u.f_VX)) return true;
                break;
            case 0x00000201:
                /* 000100.. ........ .....010 00001011 */
                /* ../target/ppc/insn32.decode:1243 */
                if (trans_VDIVEUQ(ctx, &u.f_VX)) return true;
                break;
            case 0x00000281:
                /* 000100.. ........ .....010 10001011 */
                /* ../target/ppc/insn32.decode:1239 */
                if (trans_VDIVEUW(ctx, &u.f_VX)) return true;
                break;
            case 0x000002c1:
                /* 000100.. ........ .....010 11001011 */
                /* ../target/ppc/insn32.decode:1241 */
                if (trans_VDIVEUD(ctx, &u.f_VX)) return true;
                break;
            case 0x00000301:
                /* 000100.. ........ .....011 00001011 */
                /* ../target/ppc/insn32.decode:1242 */
                if (trans_VDIVESQ(ctx, &u.f_VX)) return true;
                break;
            case 0x00000381:
                /* 000100.. ........ .....011 10001011 */
                /* ../target/ppc/insn32.decode:1238 */
                if (trans_VDIVESW(ctx, &u.f_VX)) return true;
                break;
            case 0x000003c1:
                /* 000100.. ........ .....011 11001011 */
                /* ../target/ppc/insn32.decode:1240 */
                if (trans_VDIVESD(ctx, &u.f_VX)) return true;
                break;
            case 0x00000601:
                /* 000100.. ........ .....110 00001011 */
                /* ../target/ppc/insn32.decode:1250 */
                if (trans_VMODUQ(ctx, &u.f_VX)) return true;
                break;
            case 0x00000681:
                /* 000100.. ........ .....110 10001011 */
                /* ../target/ppc/insn32.decode:1246 */
                if (trans_VMODUW(ctx, &u.f_VX)) return true;
                break;
            case 0x000006c1:
                /* 000100.. ........ .....110 11001011 */
                /* ../target/ppc/insn32.decode:1248 */
                if (trans_VMODUD(ctx, &u.f_VX)) return true;
                break;
            case 0x00000701:
                /* 000100.. ........ .....111 00001011 */
                /* ../target/ppc/insn32.decode:1249 */
                if (trans_VMODSQ(ctx, &u.f_VX)) return true;
                break;
            case 0x00000781:
                /* 000100.. ........ .....111 10001011 */
                /* ../target/ppc/insn32.decode:1245 */
                if (trans_VMODSW(ctx, &u.f_VX)) return true;
                break;
            case 0x000007c1:
                /* 000100.. ........ .....111 11001011 */
                /* ../target/ppc/insn32.decode:1247 */
                if (trans_VMODSD(ctx, &u.f_VX)) return true;
                break;
            }
            break;
        case 0x6:
            /* 000100.. ........ ........ ..00110. */
            switch (insn & 0x000003c1) {
            case 0x00000001:
                /* 000100.. ........ ......00 00001101 */
                decode_insn32_extract_VX_tb_rc(ctx, &u.f_VX_tb_rc, insn);
                switch ((insn >> 16) & 0x1f) {
                case 0x0:
                    /* 000100.. ...00000 ......00 00001101 */
                    /* ../target/ppc/insn32.decode:968 */
                    if (trans_VSTRIBL(ctx, &u.f_VX_tb_rc)) return true;
                    break;
                case 0x1:
                    /* 000100.. ...00001 ......00 00001101 */
                    /* ../target/ppc/insn32.decode:969 */
                    if (trans_VSTRIBR(ctx, &u.f_VX_tb_rc)) return true;
                    break;
                case 0x2:
                    /* 000100.. ...00010 ......00 00001101 */
                    /* ../target/ppc/insn32.decode:970 */
                    if (trans_VSTRIHL(ctx, &u.f_VX_tb_rc)) return true;
                    break;
                case 0x3:
                    /* 000100.. ...00011 ......00 00001101 */
                    /* ../target/ppc/insn32.decode:971 */
                    if (trans_VSTRIHR(ctx, &u.f_VX_tb_rc)) return true;
                    break;
                }
                break;
            case 0x000000c0:
                /* 000100.. ........ ......00 11001100 */
                decode_insn32_extract_VX_n(ctx, &u.f_VX_n, insn);
                switch ((insn >> 10) & 0x1) {
                case 0x1:
                    /* 000100.. ........ .....100 11001100 */
                    /* ../target/ppc/insn32.decode:743 */
                    if (trans_VGNB(ctx, &u.f_VX_n)) return true;
                    break;
                }
                break;
            case 0x00000141:
                /* 000100.. ........ ......01 01001101 */
                decode_insn32_extract_VX(ctx, &u.f_VX, insn);
                switch ((insn >> 10) & 0x1) {
                case 0x1:
                    /* 000100.. ........ .....101 01001101 */
                    /* ../target/ppc/insn32.decode:745 */
                    if (trans_VCFUGED(ctx, &u.f_VX)) return true;
                    break;
                }
                break;
            case 0x00000181:
                /* 000100.. ........ ......01 10001101 */
                decode_insn32_extract_VX(ctx, &u.f_VX, insn);
                switch ((insn >> 10) & 0x1) {
                case 0x0:
                    /* 000100.. ........ .....001 10001101 */
                    /* ../target/ppc/insn32.decode:973 */
                    if (trans_VCLRLB(ctx, &u.f_VX)) return true;
                    break;
                case 0x1:
                    /* 000100.. ........ .....101 10001101 */
                    /* ../target/ppc/insn32.decode:749 */
                    if (trans_VPEXTD(ctx, &u.f_VX)) return true;
                    break;
                }
                break;
            case 0x000001c1:
                /* 000100.. ........ ......01 11001101 */
                decode_insn32_extract_VX(ctx, &u.f_VX, insn);
                switch ((insn >> 10) & 0x1) {
                case 0x0:
                    /* 000100.. ........ .....001 11001101 */
                    /* ../target/ppc/insn32.decode:974 */
                    if (trans_VCLRRB(ctx, &u.f_VX)) return true;
                    break;
                case 0x1:
                    /* 000100.. ........ .....101 11001101 */
                    /* ../target/ppc/insn32.decode:748 */
                    if (trans_VPDEPD(ctx, &u.f_VX)) return true;
                    break;
                }
                break;
            case 0x00000301:
                /* 000100.. ........ ......11 00001101 */
                decode_insn32_extract_VX_uim4(ctx, &u.f_VX_uim4, insn);
                switch ((insn >> 10) & 0x1) {
                case 0x0:
                    /* 000100.. ........ .....011 00001101 */
                    /* ../target/ppc/insn32.decode:766 */
                    if (trans_VINSERTB(ctx, &u.f_VX_uim4)) return true;
                    break;
                }
                break;
            case 0x00000341:
                /* 000100.. ........ ......11 01001101 */
                decode_insn32_extract_VX_uim4(ctx, &u.f_VX_uim4, insn);
                switch ((insn >> 10) & 0x1) {
                case 0x0:
                    /* 000100.. ........ .....011 01001101 */
                    /* ../target/ppc/insn32.decode:767 */
                    if (trans_VINSERTH(ctx, &u.f_VX_uim4)) return true;
                    break;
                }
                break;
            case 0x00000381:
                /* 000100.. ........ ......11 10001101 */
                decode_insn32_extract_VX_uim4(ctx, &u.f_VX_uim4, insn);
                switch ((insn >> 10) & 0x1) {
                case 0x0:
                    /* 000100.. ........ .....011 10001101 */
                    /* ../target/ppc/insn32.decode:768 */
                    if (trans_VINSERTW(ctx, &u.f_VX_uim4)) return true;
                    break;
                }
                break;
            case 0x000003c1:
                /* 000100.. ........ ......11 11001101 */
                decode_insn32_extract_VX_uim4(ctx, &u.f_VX_uim4, insn);
                switch ((insn >> 10) & 0x1) {
                case 0x0:
                    /* 000100.. ........ .....011 11001101 */
                    /* ../target/ppc/insn32.decode:769 */
                    if (trans_VINSERTD(ctx, &u.f_VX_uim4)) return true;
                    break;
                }
                break;
            }
            break;
        case 0x7:
            /* 000100.. ........ ........ ..00111. */
            switch (insn & 0x000007c1) {
            case 0x00000001:
                /* 000100.. ........ .....000 00001111 */
                /* ../target/ppc/insn32.decode:783 */
                decode_insn32_extract_VX(ctx, &u.f_VX, insn);
                if (trans_VINSBVLX(ctx, &u.f_VX)) return true;
                break;
            case 0x00000041:
                /* 000100.. ........ .....000 01001111 */
                /* ../target/ppc/insn32.decode:785 */
                decode_insn32_extract_VX(ctx, &u.f_VX, insn);
                if (trans_VINSHVLX(ctx, &u.f_VX)) return true;
                break;
            case 0x00000081:
                /* 000100.. ........ .....000 10001111 */
                /* ../target/ppc/insn32.decode:787 */
                decode_insn32_extract_VX(ctx, &u.f_VX, insn);
                if (trans_VINSWVLX(ctx, &u.f_VX)) return true;
                break;
            case 0x000000c1:
                /* 000100.. ........ .....000 11001111 */
                /* ../target/ppc/insn32.decode:780 */
                decode_insn32_extract_VX_uim4(ctx, &u.f_VX_uim4, insn);
                if (trans_VINSW(ctx, &u.f_VX_uim4)) return true;
                break;
            case 0x00000101:
                /* 000100.. ........ .....001 00001111 */
                /* ../target/ppc/insn32.decode:784 */
                decode_insn32_extract_VX(ctx, &u.f_VX, insn);
                if (trans_VINSBVRX(ctx, &u.f_VX)) return true;
                break;
            case 0x00000141:
                /* 000100.. ........ .....001 01001111 */
                /* ../target/ppc/insn32.decode:786 */
                decode_insn32_extract_VX(ctx, &u.f_VX, insn);
                if (trans_VINSHVRX(ctx, &u.f_VX)) return true;
                break;
            case 0x00000181:
                /* 000100.. ........ .....001 10001111 */
                /* ../target/ppc/insn32.decode:788 */
                decode_insn32_extract_VX(ctx, &u.f_VX, insn);
                if (trans_VINSWVRX(ctx, &u.f_VX)) return true;
                break;
            case 0x000001c1:
                /* 000100.. ........ .....001 11001111 */
                /* ../target/ppc/insn32.decode:781 */
                decode_insn32_extract_VX_uim4(ctx, &u.f_VX_uim4, insn);
                if (trans_VINSD(ctx, &u.f_VX_uim4)) return true;
                break;
            case 0x00000201:
                /* 000100.. ........ .....010 00001111 */
                /* ../target/ppc/insn32.decode:771 */
                decode_insn32_extract_VX(ctx, &u.f_VX, insn);
                if (trans_VINSBLX(ctx, &u.f_VX)) return true;
                break;
            case 0x00000241:
                /* 000100.. ........ .....010 01001111 */
                /* ../target/ppc/insn32.decode:773 */
                decode_insn32_extract_VX(ctx, &u.f_VX, insn);
                if (trans_VINSHLX(ctx, &u.f_VX)) return true;
                break;
            case 0x00000281:
                /* 000100.. ........ .....010 10001111 */
                /* ../target/ppc/insn32.decode:775 */
                decode_insn32_extract_VX(ctx, &u.f_VX, insn);
                if (trans_VINSWLX(ctx, &u.f_VX)) return true;
                break;
            case 0x000002c1:
                /* 000100.. ........ .....010 11001111 */
                /* ../target/ppc/insn32.decode:777 */
                decode_insn32_extract_VX(ctx, &u.f_VX, insn);
                if (trans_VINSDLX(ctx, &u.f_VX)) return true;
                break;
            case 0x00000301:
                /* 000100.. ........ .....011 00001111 */
                /* ../target/ppc/insn32.decode:772 */
                decode_insn32_extract_VX(ctx, &u.f_VX, insn);
                if (trans_VINSBRX(ctx, &u.f_VX)) return true;
                break;
            case 0x00000341:
                /* 000100.. ........ .....011 01001111 */
                /* ../target/ppc/insn32.decode:774 */
                decode_insn32_extract_VX(ctx, &u.f_VX, insn);
                if (trans_VINSHRX(ctx, &u.f_VX)) return true;
                break;
            case 0x00000381:
                /* 000100.. ........ .....011 10001111 */
                /* ../target/ppc/insn32.decode:776 */
                decode_insn32_extract_VX(ctx, &u.f_VX, insn);
                if (trans_VINSWRX(ctx, &u.f_VX)) return true;
                break;
            case 0x000003c1:
                /* 000100.. ........ .....011 11001111 */
                /* ../target/ppc/insn32.decode:778 */
                decode_insn32_extract_VX(ctx, &u.f_VX, insn);
                if (trans_VINSDRX(ctx, &u.f_VX)) return true;
                break;
            }
            break;
        case 0xa:
            /* 000100.. ........ ........ ..01010. */
            /* ../target/ppc/insn32.decode:903 */
            decode_insn32_extract_DX_b(ctx, &u.f_DX_b, insn);
            if (trans_MTVSRBMI(ctx, &u.f_DX_b)) return true;
            break;
        case 0xb:
            /* 000100.. ........ ........ ..01011. */
            switch (insn & 0x00000001) {
            case 0x00000000:
                /* 000100.. ........ ........ ..010110 */
                decode_insn32_extract_VN(ctx, &u.f_VN, insn);
                switch ((insn >> 9) & 0x3) {
                case 0x0:
                    /* 000100.. ........ .....00. ..010110 */
                    /* ../target/ppc/insn32.decode:790 */
                    if (trans_VSLDBI(ctx, &u.f_VN)) return true;
                    break;
                case 0x1:
                    /* 000100.. ........ .....01. ..010110 */
                    /* ../target/ppc/insn32.decode:791 */
                    if (trans_VSRDBI(ctx, &u.f_VN)) return true;
                    break;
                }
                break;
            case 0x00000001:
                /* 000100.. ........ ........ ..010111 */
                /* ../target/ppc/insn32.decode:959 */
                decode_insn32_extract_VA(ctx, &u.f_VA, insn);
                if (trans_VMSUMCUD(ctx, &u.f_VA)) return true;
                break;
            }
            break;
        case 0xc:
            /* 000100.. ........ ........ ..01100. */
            decode_insn32_extract_VA(ctx, &u.f_VA, insn);
            switch (insn & 0x00000001) {
            case 0x00000000:
                /* 000100.. ........ ........ ..011000 */
                /* ../target/ppc/insn32.decode:757 */
                if (trans_VEXTDUBVLX(ctx, &u.f_VA)) return true;
                break;
            case 0x00000001:
                /* 000100.. ........ ........ ..011001 */
                /* ../target/ppc/insn32.decode:758 */
                if (trans_VEXTDUBVRX(ctx, &u.f_VA)) return true;
                break;
            }
            break;
        case 0xd:
            /* 000100.. ........ ........ ..01101. */
            decode_insn32_extract_VA(ctx, &u.f_VA, insn);
            switch (insn & 0x00000001) {
            case 0x00000000:
                /* 000100.. ........ ........ ..011010 */
                /* ../target/ppc/insn32.decode:759 */
                if (trans_VEXTDUHVLX(ctx, &u.f_VA)) return true;
                break;
            case 0x00000001:
                /* 000100.. ........ ........ ..011011 */
                /* ../target/ppc/insn32.decode:760 */
                if (trans_VEXTDUHVRX(ctx, &u.f_VA)) return true;
                break;
            }
            break;
        case 0xe:
            /* 000100.. ........ ........ ..01110. */
            decode_insn32_extract_VA(ctx, &u.f_VA, insn);
            switch (insn & 0x00000001) {
            case 0x00000000:
                /* 000100.. ........ ........ ..011100 */
                /* ../target/ppc/insn32.decode:761 */
                if (trans_VEXTDUWVLX(ctx, &u.f_VA)) return true;
                break;
            case 0x00000001:
                /* 000100.. ........ ........ ..011101 */
                /* ../target/ppc/insn32.decode:762 */
                if (trans_VEXTDUWVRX(ctx, &u.f_VA)) return true;
                break;
            }
            break;
        case 0xf:
            /* 000100.. ........ ........ ..01111. */
            decode_insn32_extract_VA(ctx, &u.f_VA, insn);
            switch (insn & 0x00000001) {
            case 0x00000000:
                /* 000100.. ........ ........ ..011110 */
                /* ../target/ppc/insn32.decode:763 */
                if (trans_VEXTDDVLX(ctx, &u.f_VA)) return true;
                break;
            case 0x00000001:
                /* 000100.. ........ ........ ..011111 */
                /* ../target/ppc/insn32.decode:764 */
                if (trans_VEXTDDVRX(ctx, &u.f_VA)) return true;
                break;
            }
            break;
        case 0x10:
            /* 000100.. ........ ........ ..10000. */
            decode_insn32_extract_VA(ctx, &u.f_VA, insn);
            switch (insn & 0x00000001) {
            case 0x00000000:
                /* 000100.. ........ ........ ..100000 */
                /* ../target/ppc/insn32.decode:963 */
                if (trans_VMHADDSHS(ctx, &u.f_VA)) return true;
                break;
            case 0x00000001:
                /* 000100.. ........ ........ ..100001 */
                /* ../target/ppc/insn32.decode:964 */
                if (trans_VMHRADDSHS(ctx, &u.f_VA)) return true;
                break;
            }
            break;
        case 0x11:
            /* 000100.. ........ ........ ..10001. */
            decode_insn32_extract_VA(ctx, &u.f_VA, insn);
            switch (insn & 0x00000001) {
            case 0x00000000:
                /* 000100.. ........ ........ ..100010 */
                /* ../target/ppc/insn32.decode:962 */
                if (trans_VMLADDUHM(ctx, &u.f_VA)) return true;
                break;
            case 0x00000001:
                /* 000100.. ........ ........ ..100011 */
                /* ../target/ppc/insn32.decode:960 */
                if (trans_VMSUMUDM(ctx, &u.f_VA)) return true;
                break;
            }
            break;
        case 0x12:
            /* 000100.. ........ ........ ..10010. */
            decode_insn32_extract_VA(ctx, &u.f_VA, insn);
            switch (insn & 0x00000001) {
            case 0x00000000:
                /* 000100.. ........ ........ ..100100 */
                /* ../target/ppc/insn32.decode:952 */
                if (trans_VMSUMUBM(ctx, &u.f_VA)) return true;
                break;
            case 0x00000001:
                /* 000100.. ........ ........ ..100101 */
                /* ../target/ppc/insn32.decode:953 */
                if (trans_VMSUMMBM(ctx, &u.f_VA)) return true;
                break;
            }
            break;
        case 0x13:
            /* 000100.. ........ ........ ..10011. */
            decode_insn32_extract_VA(ctx, &u.f_VA, insn);
            switch (insn & 0x00000001) {
            case 0x00000000:
                /* 000100.. ........ ........ ..100110 */
                /* ../target/ppc/insn32.decode:956 */
                if (trans_VMSUMUHM(ctx, &u.f_VA)) return true;
                break;
            case 0x00000001:
                /* 000100.. ........ ........ ..100111 */
                /* ../target/ppc/insn32.decode:957 */
                if (trans_VMSUMUHS(ctx, &u.f_VA)) return true;
                break;
            }
            break;
        case 0x14:
            /* 000100.. ........ ........ ..10100. */
            decode_insn32_extract_VA(ctx, &u.f_VA, insn);
            switch (insn & 0x00000001) {
            case 0x00000000:
                /* 000100.. ........ ........ ..101000 */
                /* ../target/ppc/insn32.decode:954 */
                if (trans_VMSUMSHM(ctx, &u.f_VA)) return true;
                break;
            case 0x00000001:
                /* 000100.. ........ ........ ..101001 */
                /* ../target/ppc/insn32.decode:955 */
                if (trans_VMSUMSHS(ctx, &u.f_VA)) return true;
                break;
            }
            break;
        case 0x15:
            /* 000100.. ........ ........ ..10101. */
            decode_insn32_extract_VA(ctx, &u.f_VA, insn);
            switch (insn & 0x00000001) {
            case 0x00000000:
                /* 000100.. ........ ........ ..101010 */
                /* ../target/ppc/insn32.decode:796 */
                if (trans_VSEL(ctx, &u.f_VA)) return true;
                break;
            case 0x00000001:
                /* 000100.. ........ ........ ..101011 */
                /* ../target/ppc/insn32.decode:793 */
                if (trans_VPERM(ctx, &u.f_VA)) return true;
                break;
            }
            break;
        case 0x18:
            /* 000100.. ........ ........ ..11000. */
            decode_insn32_extract_VA(ctx, &u.f_VA, insn);
            switch (insn & 0x00000001) {
            case 0x00000000:
                /* 000100.. ........ ........ ..110000 */
                /* ../target/ppc/insn32.decode:418 */
                if (trans_MADDHD(ctx, &u.f_VA)) return true;
                break;
            case 0x00000001:
                /* 000100.. ........ ........ ..110001 */
                /* ../target/ppc/insn32.decode:419 */
                if (trans_MADDHDU(ctx, &u.f_VA)) return true;
                break;
            }
            break;
        case 0x19:
            /* 000100.. ........ ........ ..11001. */
            decode_insn32_extract_VA(ctx, &u.f_VA, insn);
            switch (insn & 0x00000001) {
            case 0x00000001:
                /* 000100.. ........ ........ ..110011 */
                /* ../target/ppc/insn32.decode:417 */
                if (trans_MADDLD(ctx, &u.f_VA)) return true;
                break;
            }
            break;
        case 0x1d:
            /* 000100.. ........ ........ ..11101. */
            decode_insn32_extract_VA(ctx, &u.f_VA, insn);
            switch (insn & 0x00000001) {
            case 0x00000001:
                /* 000100.. ........ ........ ..111011 */
                /* ../target/ppc/insn32.decode:794 */
                if (trans_VPERMR(ctx, &u.f_VA)) return true;
                break;
            }
            break;
        case 0x1e:
            /* 000100.. ........ ........ ..11110. */
            decode_insn32_extract_VA(ctx, &u.f_VA, insn);
            switch (insn & 0x00000001) {
            case 0x00000000:
                /* 000100.. ........ ........ ..111100 */
                /* ../target/ppc/insn32.decode:846 */
                if (trans_VADDEUQM(ctx, &u.f_VA)) return true;
                break;
            case 0x00000001:
                /* 000100.. ........ ........ ..111101 */
                /* ../target/ppc/insn32.decode:847 */
                if (trans_VADDECUQ(ctx, &u.f_VA)) return true;
                break;
            }
            break;
        case 0x1f:
            /* 000100.. ........ ........ ..11111. */
            decode_insn32_extract_VA(ctx, &u.f_VA, insn);
            switch (insn & 0x00000001) {
            case 0x00000000:
                /* 000100.. ........ ........ ..111110 */
                /* ../target/ppc/insn32.decode:862 */
                if (trans_VSUBEUQM(ctx, &u.f_VA)) return true;
                break;
            case 0x00000001:
                /* 000100.. ........ ........ ..111111 */
                /* ../target/ppc/insn32.decode:861 */
                if (trans_VSUBECUQ(ctx, &u.f_VA)) return true;
                break;
            }
            break;
        }
        break;
    case 0x6:
        /* 000110.. ........ ........ ........ */
        decode_insn32_extract_DQ_TSXP(ctx, &u.f_D, insn);
        switch (insn & 0x0000000f) {
        case 0x00000000:
            /* 000110.. ........ ........ ....0000 */
            /* ../target/ppc/insn32.decode:984 */
            if (trans_LXVP(ctx, &u.f_D)) return true;
            break;
        case 0x00000001:
            /* 000110.. ........ ........ ....0001 */
            /* ../target/ppc/insn32.decode:985 */
            if (trans_STXVP(ctx, &u.f_D)) return true;
            break;
        }
        break;
    case 0x7:
        /* 000111.. ........ ........ ........ */
        /* ../target/ppc/insn32.decode:396 */
        decode_insn32_extract_D(ctx, &u.f_D, insn);
        if (trans_MULLI(ctx, &u.f_D)) return true;
        break;
    case 0x8:
        /* 001000.. ........ ........ ........ */
        /* ../target/ppc/insn32.decode:389 */
        decode_insn32_extract_D(ctx, &u.f_D, insn);
        if (trans_SUBFIC(ctx, &u.f_D)) return true;
        break;
    case 0xa:
        /* 001010.. ........ ........ ........ */
        /* ../target/ppc/insn32.decode:354 */
        decode_insn32_extract_D_bfu(ctx, &u.f_D_bf, insn);
        if (trans_CMPLI(ctx, &u.f_D_bf)) return true;
        break;
    case 0xb:
        /* 001011.. ........ ........ ........ */
        /* ../target/ppc/insn32.decode:353 */
        decode_insn32_extract_D_bfs(ctx, &u.f_D_bf, insn);
        if (trans_CMPI(ctx, &u.f_D_bf)) return true;
        break;
    case 0xc:
        /* 001100.. ........ ........ ........ */
        /* ../target/ppc/insn32.decode:381 */
        decode_insn32_extract_D(ctx, &u.f_D, insn);
        if (trans_ADDIC(ctx, &u.f_D)) return true;
        break;
    case 0xd:
        /* 001101.. ........ ........ ........ */
        /* ../target/ppc/insn32.decode:382 */
        decode_insn32_extract_D(ctx, &u.f_D, insn);
        if (trans_ADDIC_(ctx, &u.f_D)) return true;
        break;
    case 0xe:
        /* 001110.. ........ ........ ........ */
        /* ../target/ppc/insn32.decode:379 */
        decode_insn32_extract_D(ctx, &u.f_D, insn);
        if (trans_ADDI(ctx, &u.f_D)) return true;
        break;
    case 0xf:
        /* 001111.. ........ ........ ........ */
        /* ../target/ppc/insn32.decode:380 */
        decode_insn32_extract_D(ctx, &u.f_D, insn);
        if (trans_ADDIS(ctx, &u.f_D)) return true;
        break;
    case 0x13:
        /* 010011.. ........ ........ ........ */
        switch ((insn >> 1) & 0x1f) {
        case 0x2:
            /* 010011.. ........ ........ ..00010. */
            /* ../target/ppc/insn32.decode:384 */
            decode_insn32_extract_DX(ctx, &u.f_DX, insn);
            if (trans_ADDPCIS(ctx, &u.f_DX)) return true;
            break;
        case 0x12:
            /* 010011.. ........ ........ ..10010. */
            decode_insn32_extract_XL_s(ctx, &u.f_XL_s, insn);
            switch ((insn >> 6) & 0x1f) {
            case 0x4:
                /* 010011.. ........ .....001 0010010. */
                /* ../target/ppc/insn32.decode:1174 */
                if (trans_RFEBB(ctx, &u.f_XL_s)) return true;
                break;
            }
            break;
        }
        break;
    case 0x18:
        /* 011000.. ........ ........ ........ */
        /* ../target/ppc/insn32.decode:433 */
        decode_insn32_extract_D_ui(ctx, &u.f_D_ui, insn);
        if (trans_ORI(ctx, &u.f_D_ui)) return true;
        break;
    case 0x19:
        /* 011001.. ........ ........ ........ */
        /* ../target/ppc/insn32.decode:434 */
        decode_insn32_extract_D_ui(ctx, &u.f_D_ui, insn);
        if (trans_ORIS(ctx, &u.f_D_ui)) return true;
        break;
    case 0x1a:
        /* 011010.. ........ ........ ........ */
        /* ../target/ppc/insn32.decode:435 */
        decode_insn32_extract_D_ui(ctx, &u.f_D_ui, insn);
        if (trans_XORI(ctx, &u.f_D_ui)) return true;
        break;
    case 0x1b:
        /* 011011.. ........ ........ ........ */
        /* ../target/ppc/insn32.decode:436 */
        decode_insn32_extract_D_ui(ctx, &u.f_D_ui, insn);
        if (trans_XORIS(ctx, &u.f_D_ui)) return true;
        break;
    case 0x1c:
        /* 011100.. ........ ........ ........ */
        /* ../target/ppc/insn32.decode:431 */
        decode_insn32_extract_D_ui(ctx, &u.f_D_ui, insn);
        if (trans_ANDI_(ctx, &u.f_D_ui)) return true;
        break;
    case 0x1d:
        /* 011101.. ........ ........ ........ */
        /* ../target/ppc/insn32.decode:432 */
        decode_insn32_extract_D_ui(ctx, &u.f_D_ui, insn);
        if (trans_ANDIS_(ctx, &u.f_D_ui)) return true;
        break;
    case 0x1f:
        /* 011111.. ........ ........ ........ */
        switch ((insn >> 1) & 0x1f) {
        case 0x0:
            /* 011111.. ........ ........ ..00000. */
            switch ((insn >> 6) & 0x1f) {
            case 0x0:
                /* 011111.. ........ .....000 0000000. */
                /* ../target/ppc/insn32.decode:351 */
                decode_insn32_extract_X_bfl(ctx, &u.f_X_bfl, insn);
                if (trans_CMP(ctx, &u.f_X_bfl)) return true;
                break;
            case 0x1:
                /* 011111.. ........ .....000 0100000. */
                /* ../target/ppc/insn32.decode:352 */
                decode_insn32_extract_X_bfl(ctx, &u.f_X_bfl, insn);
                if (trans_CMPL(ctx, &u.f_X_bfl)) return true;
                break;
            case 0x6:
                /* 011111.. ........ .....001 1000000. */
                /* ../target/ppc/insn32.decode:355 */
                decode_insn32_extract_X_bfl(ctx, &u.f_X_bfl, insn);
                if (trans_CMPRB(ctx, &u.f_X_bfl)) return true;
                break;
            case 0x7:
                /* 011111.. ........ .....001 1100000. */
                /* ../target/ppc/insn32.decode:356 */
                decode_insn32_extract_X_bf(ctx, &u.f_X_bf, insn);
                if (trans_CMPEQB(ctx, &u.f_X_bf)) return true;
                break;
            case 0xc:
                /* 011111.. ........ .....011 0000000. */
                /* ../target/ppc/insn32.decode:550 */
                decode_insn32_extract_X_bi(ctx, &u.f_X_bi, insn);
                if (trans_SETBC(ctx, &u.f_X_bi)) return true;
                break;
            case 0xd:
                /* 011111.. ........ .....011 0100000. */
                /* ../target/ppc/insn32.decode:551 */
                decode_insn32_extract_X_bi(ctx, &u.f_X_bi, insn);
                if (trans_SETBCR(ctx, &u.f_X_bi)) return true;
                break;
            case 0xe:
                /* 011111.. ........ .....011 1000000. */
                /* ../target/ppc/insn32.decode:552 */
                decode_insn32_extract_X_bi(ctx, &u.f_X_bi, insn);
                if (trans_SETNBC(ctx, &u.f_X_bi)) return true;
                break;
            case 0xf:
                /* 011111.. ........ .....011 1100000. */
                /* ../target/ppc/insn32.decode:553 */
                decode_insn32_extract_X_bi(ctx, &u.f_X_bi, insn);
                if (trans_SETNBCR(ctx, &u.f_X_bi)) return true;
                break;
            }
            break;
        case 0x4:
            /* 011111.. ........ ........ ..00100. */
            decode_insn32_extract_X(ctx, &u.f_X, insn);
            switch ((insn >> 6) & 0x1f) {
            case 0x0:
                /* 011111.. ........ .....000 0000100. */
                /* ../target/ppc/insn32.decode:360 */
                if (trans_TW(ctx, &u.f_X)) return true;
                break;
            case 0x2:
                /* 011111.. ........ .....000 1000100. */
                /* ../target/ppc/insn32.decode:361 */
                if (trans_TD(ctx, &u.f_X)) return true;
                break;
            }
            break;
        case 0x6:
            /* 011111.. ........ ........ ..00110. */
            decode_insn32_extract_X(ctx, &u.f_X, insn);
            switch ((insn >> 6) & 0x1f) {
            case 0x0:
                /* 011111.. ........ .....000 0000110. */
                /* ../target/ppc/insn32.decode:681 */
                if (trans_LVSL(ctx, &u.f_X)) return true;
                break;
            case 0x1:
                /* 011111.. ........ .....000 0100110. */
                /* ../target/ppc/insn32.decode:682 */
                if (trans_LVSR(ctx, &u.f_X)) return true;
                break;
            }
            break;
        case 0x7:
            /* 011111.. ........ ........ ..00111. */
            decode_insn32_extract_X(ctx, &u.f_X, insn);
            switch ((insn >> 6) & 0x1f) {
            case 0x0:
                /* 011111.. ........ .....000 0000111. */
                /* ../target/ppc/insn32.decode:669 */
                if (trans_LVEBX(ctx, &u.f_X)) return true;
                break;
            case 0x1:
                /* 011111.. ........ .....000 0100111. */
                /* ../target/ppc/insn32.decode:670 */
                if (trans_LVEHX(ctx, &u.f_X)) return true;
                break;
            case 0x2:
                /* 011111.. ........ .....000 1000111. */
                /* ../target/ppc/insn32.decode:671 */
                if (trans_LVEWX(ctx, &u.f_X)) return true;
                break;
            case 0x3:
                /* 011111.. ........ .....000 1100111. */
                /* ../target/ppc/insn32.decode:672 */
                if (trans_LVX(ctx, &u.f_X)) return true;
                break;
            case 0x4:
                /* 011111.. ........ .....001 0000111. */
                /* ../target/ppc/insn32.decode:675 */
                if (trans_STVEBX(ctx, &u.f_X)) return true;
                break;
            case 0x5:
                /* 011111.. ........ .....001 0100111. */
                /* ../target/ppc/insn32.decode:676 */
                if (trans_STVEHX(ctx, &u.f_X)) return true;
                break;
            case 0x6:
                /* 011111.. ........ .....001 1000111. */
                /* ../target/ppc/insn32.decode:677 */
                if (trans_STVEWX(ctx, &u.f_X)) return true;
                break;
            case 0x7:
                /* 011111.. ........ .....001 1100111. */
                /* ../target/ppc/insn32.decode:678 */
                if (trans_STVX(ctx, &u.f_X)) return true;
                break;
            case 0xb:
                /* 011111.. ........ .....010 1100111. */
                /* ../target/ppc/insn32.decode:673 */
                if (trans_LVXL(ctx, &u.f_X)) return true;
                break;
            case 0xf:
                /* 011111.. ........ .....011 1100111. */
                /* ../target/ppc/insn32.decode:679 */
                if (trans_STVXL(ctx, &u.f_X)) return true;
                break;
            }
            break;
        case 0x8:
            /* 011111.. ........ ........ ..01000. */
            switch ((insn >> 6) & 0xf) {
            case 0x0:
                /* 011111.. ........ ......00 0001000. */
                /* ../target/ppc/insn32.decode:390 */
                decode_insn32_extract_XO(ctx, &u.f_XO, insn);
                if (trans_SUBFC(ctx, &u.f_XO)) return true;
                break;
            case 0x1:
                /* 011111.. ........ ......00 0101000. */
                /* ../target/ppc/insn32.decode:388 */
                decode_insn32_extract_XO(ctx, &u.f_XO, insn);
                if (trans_SUBF(ctx, &u.f_XO)) return true;
                break;
            case 0x3:
                /* 011111.. ........ ......00 1101000. */
                /* ../target/ppc/insn32.decode:410 */
                decode_insn32_extract_XO_ta(ctx, &u.f_XO_ta, insn);
                if (trans_NEG(ctx, &u.f_XO_ta)) return true;
                break;
            case 0x4:
                /* 011111.. ........ ......01 0001000. */
                /* ../target/ppc/insn32.decode:391 */
                decode_insn32_extract_XO(ctx, &u.f_XO, insn);
                if (trans_SUBFE(ctx, &u.f_XO)) return true;
                break;
            case 0x6:
                /* 011111.. ........ ......01 1001000. */
                /* ../target/ppc/insn32.decode:394 */
                decode_insn32_extract_XO_ta(ctx, &u.f_XO_ta, insn);
                if (trans_SUBFZE(ctx, &u.f_XO_ta)) return true;
                break;
            case 0x7:
                /* 011111.. ........ ......01 1101000. */
                /* ../target/ppc/insn32.decode:393 */
                decode_insn32_extract_XO_ta(ctx, &u.f_XO_ta, insn);
                if (trans_SUBFME(ctx, &u.f_XO_ta)) return true;
                break;
            }
            break;
        case 0x9:
            /* 011111.. ........ ........ ..01001. */
            switch ((insn >> 6) & 0xf) {
            case 0x0:
                /* 011111.. ........ ......00 0001001. */
                /* ../target/ppc/insn32.decode:415 */
                decode_insn32_extract_XO_tab_rc(ctx, &u.f_XO_tab_rc, insn);
                if (trans_MULHDU(ctx, &u.f_XO_tab_rc)) return true;
                break;
            case 0x2:
                /* 011111.. ........ ......00 1001001. */
                /* ../target/ppc/insn32.decode:414 */
                decode_insn32_extract_XO_tab_rc(ctx, &u.f_XO_tab_rc, insn);
                if (trans_MULHD(ctx, &u.f_XO_tab_rc)) return true;
                break;
            case 0x7:
                /* 011111.. ........ ......01 1101001. */
                decode_insn32_extract_XO_tab_rc(ctx, &u.f_XO_tab_rc, insn);
                switch ((insn >> 10) & 0x1) {
                case 0x0:
                    /* 011111.. ........ .....001 1101001. */
                    /* ../target/ppc/insn32.decode:412 */
                    if (trans_MULLD(ctx, &u.f_XO_tab_rc)) return true;
                    break;
                case 0x1:
                    /* 011111.. ........ .....101 1101001. */
                    /* ../target/ppc/insn32.decode:413 */
                    if (trans_MULLDO(ctx, &u.f_XO_tab_rc)) return true;
                    break;
                }
                break;
            case 0x8:
                /* 011111.. ........ ......10 0001001. */
                decode_insn32_extract_X(ctx, &u.f_X, insn);
                switch ((insn >> 10) & 0x1) {
                case 0x0:
                    /* 011111.. ........ .....010 0001001. */
                    /* ../target/ppc/insn32.decode:427 */
                    if (trans_MODUD(ctx, &u.f_X)) return true;
                    break;
                case 0x1:
                    /* 011111.. ........ .....110 0001001. */
                    /* ../target/ppc/insn32.decode:426 */
                    if (trans_MODSD(ctx, &u.f_X)) return true;
                    break;
                }
                break;
            case 0xc:
                /* 011111.. ........ ......11 0001001. */
                /* ../target/ppc/insn32.decode:424 */
                decode_insn32_extract_XO(ctx, &u.f_XO, insn);
                if (trans_DIVDEU(ctx, &u.f_XO)) return true;
                break;
            case 0xd:
                /* 011111.. ........ ......11 0101001. */
                /* ../target/ppc/insn32.decode:423 */
                decode_insn32_extract_XO(ctx, &u.f_XO, insn);
                if (trans_DIVDE(ctx, &u.f_XO)) return true;
                break;
            case 0xe:
                /* 011111.. ........ ......11 1001001. */
                /* ../target/ppc/insn32.decode:422 */
                decode_insn32_extract_XO(ctx, &u.f_XO, insn);
                if (trans_DIVDU(ctx, &u.f_XO)) return true;
                break;
            case 0xf:
                /* 011111.. ........ ......11 1101001. */
                /* ../target/ppc/insn32.decode:421 */
                decode_insn32_extract_XO(ctx, &u.f_XO, insn);
                if (trans_DIVD(ctx, &u.f_XO)) return true;
                break;
            }
            break;
        case 0xa:
            /* 011111.. ........ ........ ..01010. */
            switch ((insn >> 6) & 0xf) {
            case 0x0:
                /* 011111.. ........ ......00 0001010. */
                /* ../target/ppc/insn32.decode:372 */
                decode_insn32_extract_XO(ctx, &u.f_XO, insn);
                if (trans_ADDC(ctx, &u.f_XO)) return true;
                break;
            case 0x2:
                /* 011111.. ........ ......00 1001010. */
                /* ../target/ppc/insn32.decode:478 */
                decode_insn32_extract_X(ctx, &u.f_X, insn);
                if (trans_ADDG6S(ctx, &u.f_X)) return true;
                break;
            case 0x4:
                /* 011111.. ........ ......01 0001010. */
                /* ../target/ppc/insn32.decode:373 */
                decode_insn32_extract_XO(ctx, &u.f_XO, insn);
                if (trans_ADDE(ctx, &u.f_XO)) return true;
                break;
            case 0x5:
                /* 011111.. ........ ......01 0101010. */
                decode_insn32_extract_X(ctx, &u.f_X, insn);
                switch ((insn >> 10) & 0x1) {
                case 0x0:
                    /* 011111.. ........ .....001 0101010. */
                    /* ../target/ppc/insn32.decode:377 */
                    if (trans_ADDEX(ctx, &u.f_X)) return true;
                    break;
                }
                break;
            case 0x6:
                /* 011111.. ........ ......01 1001010. */
                /* ../target/ppc/insn32.decode:386 */
                decode_insn32_extract_XO_ta(ctx, &u.f_XO_ta, insn);
                if (trans_ADDZE(ctx, &u.f_XO_ta)) return true;
                break;
            case 0x7:
                /* 011111.. ........ ......01 1101010. */
                /* ../target/ppc/insn32.decode:385 */
                decode_insn32_extract_XO_ta(ctx, &u.f_XO_ta, insn);
                if (trans_ADDME(ctx, &u.f_XO_ta)) return true;
                break;
            case 0x8:
                /* 011111.. ........ ......10 0001010. */
                /* ../target/ppc/insn32.decode:371 */
                decode_insn32_extract_XO(ctx, &u.f_XO, insn);
                if (trans_ADD(ctx, &u.f_XO)) return true;
                break;
            }
            break;
        case 0xb:
            /* 011111.. ........ ........ ..01011. */
            switch ((insn >> 6) & 0xf) {
            case 0x0:
                /* 011111.. ........ ......00 0001011. */
                /* ../target/ppc/insn32.decode:400 */
                decode_insn32_extract_XO_tab_rc(ctx, &u.f_XO_tab_rc, insn);
                if (trans_MULHWU(ctx, &u.f_XO_tab_rc)) return true;
                break;
            case 0x2:
                /* 011111.. ........ ......00 1001011. */
                /* ../target/ppc/insn32.decode:399 */
                decode_insn32_extract_XO_tab_rc(ctx, &u.f_XO_tab_rc, insn);
                if (trans_MULHW(ctx, &u.f_XO_tab_rc)) return true;
                break;
            case 0x7:
                /* 011111.. ........ ......01 1101011. */
                decode_insn32_extract_XO_tab_rc(ctx, &u.f_XO_tab_rc, insn);
                switch ((insn >> 10) & 0x1) {
                case 0x0:
                    /* 011111.. ........ .....001 1101011. */
                    /* ../target/ppc/insn32.decode:397 */
                    if (trans_MULLW(ctx, &u.f_XO_tab_rc)) return true;
                    break;
                case 0x1:
                    /* 011111.. ........ .....101 1101011. */
                    /* ../target/ppc/insn32.decode:398 */
                    if (trans_MULLWO(ctx, &u.f_XO_tab_rc)) return true;
                    break;
                }
                break;
            case 0x8:
                /* 011111.. ........ ......10 0001011. */
                decode_insn32_extract_X(ctx, &u.f_X, insn);
                switch ((insn >> 10) & 0x1) {
                case 0x0:
                    /* 011111.. ........ .....010 0001011. */
                    /* ../target/ppc/insn32.decode:408 */
                    if (trans_MODUW(ctx, &u.f_X)) return true;
                    break;
                case 0x1:
                    /* 011111.. ........ .....110 0001011. */
                    /* ../target/ppc/insn32.decode:407 */
                    if (trans_MODSW(ctx, &u.f_X)) return true;
                    break;
                }
                break;
            case 0xc:
                /* 011111.. ........ ......11 0001011. */
                /* ../target/ppc/insn32.decode:405 */
                decode_insn32_extract_XO(ctx, &u.f_XO, insn);
                if (trans_DIVWEU(ctx, &u.f_XO)) return true;
                break;
            case 0xd:
                /* 011111.. ........ ......11 0101011. */
                /* ../target/ppc/insn32.decode:404 */
                decode_insn32_extract_XO(ctx, &u.f_XO, insn);
                if (trans_DIVWE(ctx, &u.f_XO)) return true;
                break;
            case 0xe:
                /* 011111.. ........ ......11 1001011. */
                /* ../target/ppc/insn32.decode:403 */
                decode_insn32_extract_XO(ctx, &u.f_XO, insn);
                if (trans_DIVWU(ctx, &u.f_XO)) return true;
                break;
            case 0xf:
                /* 011111.. ........ ......11 1101011. */
                /* ../target/ppc/insn32.decode:402 */
                decode_insn32_extract_XO(ctx, &u.f_XO, insn);
                if (trans_DIVW(ctx, &u.f_XO)) return true;
                break;
            }
            break;
        case 0xc:
            /* 011111.. ........ ........ ..01100. */
            decode_insn32_extract_X_TSX(ctx, &u.f_X, insn);
            switch ((insn >> 7) & 0xf) {
            case 0x0:
                /* 011111.. ........ .....000 0.01100. */
                switch ((insn >> 6) & 0x1) {
                case 0x0:
                    /* 011111.. ........ .....000 0001100. */
                    /* ../target/ppc/insn32.decode:1003 */
                    if (trans_LXSIWZX(ctx, &u.f_X)) return true;
                    break;
                }
                break;
            case 0x1:
                /* 011111.. ........ .....000 1.01100. */
                switch ((insn >> 6) & 0x1) {
                case 0x0:
                    /* 011111.. ........ .....000 1001100. */
                    /* ../target/ppc/insn32.decode:1000 */
                    if (trans_LXSIWAX(ctx, &u.f_X)) return true;
                    break;
                }
                break;
            case 0x2:
                /* 011111.. ........ .....001 0.01100. */
                switch ((insn >> 6) & 0x1) {
                case 0x0:
                    /* 011111.. ........ .....001 0001100. */
                    /* ../target/ppc/insn32.decode:1009 */
                    if (trans_STXSIWX(ctx, &u.f_X)) return true;
                    break;
                }
                break;
            case 0x4:
                /* 011111.. ........ .....010 0.01100. */
                /* ../target/ppc/insn32.decode:986 */
                if (trans_LXVX(ctx, &u.f_X)) return true;
                break;
            case 0x5:
                /* 011111.. ........ .....010 1.01100. */
                switch ((insn >> 6) & 0x1) {
                case 0x0:
                    /* 011111.. ........ .....010 1001100. */
                    /* ../target/ppc/insn32.decode:1016 */
                    if (trans_LXVDSX(ctx, &u.f_X)) return true;
                    break;
                case 0x1:
                    /* 011111.. ........ .....010 1101100. */
                    /* ../target/ppc/insn32.decode:1017 */
                    if (trans_LXVWSX(ctx, &u.f_X)) return true;
                    break;
                }
                break;
            case 0x6:
                /* 011111.. ........ .....011 0.01100. */
                switch ((insn >> 6) & 0x1) {
                case 0x0:
                    /* 011111.. ........ .....011 0001100. */
                    /* ../target/ppc/insn32.decode:987 */
                    if (trans_STXVX(ctx, &u.f_X)) return true;
                    break;
                }
                break;
            case 0x8:
                /* 011111.. ........ .....100 0.01100. */
                switch ((insn >> 6) & 0x1) {
                case 0x0:
                    /* 011111.. ........ .....100 0001100. */
                    /* ../target/ppc/insn32.decode:1004 */
                    if (trans_LXSSPX(ctx, &u.f_X)) return true;
                    break;
                }
                break;
            case 0x9:
                /* 011111.. ........ .....100 1.01100. */
                switch ((insn >> 6) & 0x1) {
                case 0x0:
                    /* 011111.. ........ .....100 1001100. */
                    /* ../target/ppc/insn32.decode:999 */
                    if (trans_LXSDX(ctx, &u.f_X)) return true;
                    break;
                }
                break;
            case 0xa:
                /* 011111.. ........ .....101 0.01100. */
                switch ((insn >> 6) & 0x1) {
                case 0x0:
                    /* 011111.. ........ .....101 0001100. */
                    /* ../target/ppc/insn32.decode:1010 */
                    if (trans_STXSSPX(ctx, &u.f_X)) return true;
                    break;
                }
                break;
            case 0xb:
                /* 011111.. ........ .....101 1.01100. */
                switch ((insn >> 6) & 0x1) {
                case 0x0:
                    /* 011111.. ........ .....101 1001100. */
                    /* ../target/ppc/insn32.decode:1006 */
                    if (trans_STXSDX(ctx, &u.f_X)) return true;
                    break;
                }
                break;
            case 0xc:
                /* 011111.. ........ .....110 0.01100. */
                switch ((insn >> 6) & 0x1) {
                case 0x0:
                    /* 011111.. ........ .....110 0001100. */
                    /* ../target/ppc/insn32.decode:1015 */
                    if (trans_LXVW4X(ctx, &u.f_X)) return true;
                    break;
                case 0x1:
                    /* 011111.. ........ .....110 0101100. */
                    /* ../target/ppc/insn32.decode:1014 */
                    if (trans_LXVH8X(ctx, &u.f_X)) return true;
                    break;
                }
                break;
            case 0xd:
                /* 011111.. ........ .....110 1.01100. */
                switch ((insn >> 6) & 0x1) {
                case 0x0:
                    /* 011111.. ........ .....110 1001100. */
                    /* ../target/ppc/insn32.decode:1013 */
                    if (trans_LXVD2X(ctx, &u.f_X)) return true;
                    break;
                case 0x1:
                    /* 011111.. ........ .....110 1101100. */
                    /* ../target/ppc/insn32.decode:1012 */
                    if (trans_LXVB16X(ctx, &u.f_X)) return true;
                    break;
                }
                break;
            case 0xe:
                /* 011111.. ........ .....111 0.01100. */
                switch ((insn >> 6) & 0x1) {
                case 0x0:
                    /* 011111.. ........ .....111 0001100. */
                    /* ../target/ppc/insn32.decode:1024 */
                    if (trans_STXVW4X(ctx, &u.f_X)) return true;
                    break;
                case 0x1:
                    /* 011111.. ........ .....111 0101100. */
                    /* ../target/ppc/insn32.decode:1023 */
                    if (trans_STXVH8X(ctx, &u.f_X)) return true;
                    break;
                }
                break;
            case 0xf:
                /* 011111.. ........ .....111 1.01100. */
                switch ((insn >> 6) & 0x1) {
                case 0x0:
                    /* 011111.. ........ .....111 1001100. */
                    /* ../target/ppc/insn32.decode:1022 */
                    if (trans_STXVD2X(ctx, &u.f_X)) return true;
                    break;
                case 0x1:
                    /* 011111.. ........ .....111 1101100. */
                    /* ../target/ppc/insn32.decode:1021 */
                    if (trans_STXVB16X(ctx, &u.f_X)) return true;
                    break;
                }
                break;
            }
            break;
        case 0xd:
            /* 011111.. ........ ........ ..01101. */
            switch ((insn >> 6) & 0x1f) {
            case 0x0:
                /* 011111.. ........ .....000 0001101. */
                /* ../target/ppc/insn32.decode:990 */
                decode_insn32_extract_X_TSX(ctx, &u.f_X, insn);
                if (trans_LXVRBX(ctx, &u.f_X)) return true;
                break;
            case 0x1:
                /* 011111.. ........ .....000 0101101. */
                /* ../target/ppc/insn32.decode:991 */
                decode_insn32_extract_X_TSX(ctx, &u.f_X, insn);
                if (trans_LXVRHX(ctx, &u.f_X)) return true;
                break;
            case 0x2:
                /* 011111.. ........ .....000 1001101. */
                /* ../target/ppc/insn32.decode:992 */
                decode_insn32_extract_X_TSX(ctx, &u.f_X, insn);
                if (trans_LXVRWX(ctx, &u.f_X)) return true;
                break;
            case 0x3:
                /* 011111.. ........ .....000 1101101. */
                /* ../target/ppc/insn32.decode:993 */
                decode_insn32_extract_X_TSX(ctx, &u.f_X, insn);
                if (trans_LXVRDX(ctx, &u.f_X)) return true;
                break;
            case 0x4:
                /* 011111.. ........ .....001 0001101. */
                /* ../target/ppc/insn32.decode:994 */
                decode_insn32_extract_X_TSX(ctx, &u.f_X, insn);
                if (trans_STXVRBX(ctx, &u.f_X)) return true;
                break;
            case 0x5:
                /* 011111.. ........ .....001 0101101. */
                /* ../target/ppc/insn32.decode:995 */
                decode_insn32_extract_X_TSX(ctx, &u.f_X, insn);
                if (trans_STXVRHX(ctx, &u.f_X)) return true;
                break;
            case 0x6:
                /* 011111.. ........ .....001 1001101. */
                /* ../target/ppc/insn32.decode:996 */
                decode_insn32_extract_X_TSX(ctx, &u.f_X, insn);
                if (trans_STXVRWX(ctx, &u.f_X)) return true;
                break;
            case 0x7:
                /* 011111.. ........ .....001 1101101. */
                /* ../target/ppc/insn32.decode:997 */
                decode_insn32_extract_X_TSX(ctx, &u.f_X, insn);
                if (trans_STXVRDX(ctx, &u.f_X)) return true;
                break;
            case 0x8:
                /* 011111.. ........ .....010 0001101. */
                /* ../target/ppc/insn32.decode:1018 */
                decode_insn32_extract_X_TSX(ctx, &u.f_X, insn);
                if (trans_LXVL(ctx, &u.f_X)) return true;
                break;
            case 0x9:
                /* 011111.. ........ .....010 0101101. */
                /* ../target/ppc/insn32.decode:1019 */
                decode_insn32_extract_X_TSX(ctx, &u.f_X, insn);
                if (trans_LXVLL(ctx, &u.f_X)) return true;
                break;
            case 0xa:
                /* 011111.. ........ .....010 1001101. */
                /* ../target/ppc/insn32.decode:988 */
                decode_insn32_extract_X_TSXP(ctx, &u.f_X, insn);
                if (trans_LXVPX(ctx, &u.f_X)) return true;
                break;
            case 0xc:
                /* 011111.. ........ .....011 0001101. */
                /* ../target/ppc/insn32.decode:1025 */
                decode_insn32_extract_X_TSX(ctx, &u.f_X, insn);
                if (trans_STXVL(ctx, &u.f_X)) return true;
                break;
            case 0xd:
                /* 011111.. ........ .....011 0101101. */
                /* ../target/ppc/insn32.decode:1026 */
                decode_insn32_extract_X_TSX(ctx, &u.f_X, insn);
                if (trans_STXVLL(ctx, &u.f_X)) return true;
                break;
            case 0xe:
                /* 011111.. ........ .....011 1001101. */
                /* ../target/ppc/insn32.decode:989 */
                decode_insn32_extract_X_TSXP(ctx, &u.f_X, insn);
                if (trans_STXVPX(ctx, &u.f_X)) return true;
                break;
            case 0x18:
                /* 011111.. ........ .....110 0001101. */
                /* ../target/ppc/insn32.decode:1001 */
                decode_insn32_extract_X_TSX(ctx, &u.f_X, insn);
                if (trans_LXSIBZX(ctx, &u.f_X)) return true;
                break;
            case 0x19:
                /* 011111.. ........ .....110 0101101. */
                /* ../target/ppc/insn32.decode:1002 */
                decode_insn32_extract_X_TSX(ctx, &u.f_X, insn);
                if (trans_LXSIHZX(ctx, &u.f_X)) return true;
                break;
            case 0x1c:
                /* 011111.. ........ .....111 0001101. */
                /* ../target/ppc/insn32.decode:1007 */
                decode_insn32_extract_X_TSX(ctx, &u.f_X, insn);
                if (trans_STXSIBX(ctx, &u.f_X)) return true;
                break;
            case 0x1d:
                /* 011111.. ........ .....111 0101101. */
                /* ../target/ppc/insn32.decode:1008 */
                decode_insn32_extract_X_TSX(ctx, &u.f_X, insn);
                if (trans_STXSIHX(ctx, &u.f_X)) return true;
                break;
            }
            break;
        case 0xe:
            /* 011111.. ........ ........ ..01110. */
            switch ((insn >> 6) & 0x1f) {
            case 0x4:
                /* 011111.. ........ .....001 0001110. */
                /* ../target/ppc/insn32.decode:1282 */
                decode_insn32_extract_X_rb(ctx, &u.f_X_rb, insn);
                if (trans_MSGSNDP(ctx, &u.f_X_rb)) return true;
                break;
            case 0x5:
                /* 011111.. ........ .....001 0101110. */
                /* ../target/ppc/insn32.decode:1281 */
                decode_insn32_extract_X_rb(ctx, &u.f_X_rb, insn);
                if (trans_MSGCLRP(ctx, &u.f_X_rb)) return true;
                break;
            case 0x6:
                /* 011111.. ........ .....001 1001110. */
                /* ../target/ppc/insn32.decode:1280 */
                decode_insn32_extract_X_rb(ctx, &u.f_X_rb, insn);
                if (trans_MSGSND(ctx, &u.f_X_rb)) return true;
                break;
            case 0x7:
                /* 011111.. ........ .....001 1101110. */
                /* ../target/ppc/insn32.decode:1279 */
                decode_insn32_extract_X_rb(ctx, &u.f_X_rb, insn);
                if (trans_MSGCLR(ctx, &u.f_X_rb)) return true;
                break;
            case 0x9:
                /* 011111.. ........ .....010 0101110. */
                /* ../target/ppc/insn32.decode:1297 */
                decode_insn32_extract_XFX_bhrbe(ctx, &u.f_XFX_bhrbe, insn);
                if (trans_MFBHRBE(ctx, &u.f_XFX_bhrbe)) return true;
                break;
            case 0xd:
                /* 011111.. ........ .....011 0101110. */
                /* ../target/ppc/insn32.decode:1298 */
                decode_insn32_extract_decode_insn32_Fmt_92(ctx, &u.f_decode_insn3265, insn);
                if (trans_CLRBHRB(ctx, &u.f_decode_insn3265)) return true;
                break;
            }
            break;
        case 0xf:
            /* 011111.. ........ ........ ..01111. */
            /* ../target/ppc/insn32.decode:367 */
            decode_insn32_extract_A_tab_bc(ctx, &u.f_A_tab_bc, insn);
            if (trans_ISEL(ctx, &u.f_A_tab_bc)) return true;
            break;
        case 0x11:
            /* 011111.. ........ ........ ..10001. */
            decode_insn32_extract_X_a(ctx, &u.f_X_a, insn);
            switch (insn & 0x001f07c0) {
            case 0x00000140:
                /* 011111.. ...00000 .....001 0110001. */
                /* ../target/ppc/insn32.decode:1178 */
                if (trans_XXMFACC(ctx, &u.f_X_a)) return true;
                break;
            case 0x00010140:
                /* 011111.. ...00001 .....001 0110001. */
                /* ../target/ppc/insn32.decode:1179 */
                if (trans_XXMTACC(ctx, &u.f_X_a)) return true;
                break;
            case 0x00030140:
                /* 011111.. ...00011 .....001 0110001. */
                /* ../target/ppc/insn32.decode:1180 */
                if (trans_XXSETACCZ(ctx, &u.f_X_a)) return true;
                break;
            }
            break;
        case 0x12:
            /* 011111.. ........ ........ ..10010. */
            switch ((insn >> 6) & 0x1f) {
            case 0x8:
                /* 011111.. ........ .....010 0010010. */
                /* ../target/ppc/insn32.decode:1275 */
                decode_insn32_extract_X_tlbie(ctx, &u.f_X_tlbie, insn);
                if (trans_TLBIEL(ctx, &u.f_X_tlbie)) return true;
                break;
            case 0x9:
                /* 011111.. ........ .....010 0110010. */
                /* ../target/ppc/insn32.decode:1274 */
                decode_insn32_extract_X_tlbie(ctx, &u.f_X_tlbie, insn);
                if (trans_TLBIE(ctx, &u.f_X_tlbie)) return true;
                break;
            case 0xa:
                /* 011111.. ........ .....010 1010010. */
                /* ../target/ppc/insn32.decode:1267 */
                decode_insn32_extract_decode_insn32_Fmt_92(ctx, &u.f_decode_insn3265, insn);
                if (trans_SLBSYNC(ctx, &u.f_decode_insn3265)) return true;
                break;
            case 0xc:
                /* 011111.. ........ .....011 0010010. */
                /* ../target/ppc/insn32.decode:1260 */
                decode_insn32_extract_X_tb(ctx, &u.f_X_tb, insn);
                if (trans_SLBMTE(ctx, &u.f_X_tb)) return true;
                break;
            case 0xd:
                /* 011111.. ........ .....011 0110010. */
                /* ../target/ppc/insn32.decode:1254 */
                decode_insn32_extract_X_rb(ctx, &u.f_X_rb, insn);
                if (trans_SLBIE(ctx, &u.f_X_rb)) return true;
                break;
            case 0xe:
                /* 011111.. ........ .....011 1010010. */
                /* ../target/ppc/insn32.decode:1255 */
                decode_insn32_extract_X_tb(ctx, &u.f_X_tb, insn);
                if (trans_SLBIEG(ctx, &u.f_X_tb)) return true;
                break;
            case 0xf:
                /* 011111.. ........ .....011 1110010. */
                /* ../target/ppc/insn32.decode:1257 */
                decode_insn32_extract_X_ih(ctx, &u.f_X_ih, insn);
                if (trans_SLBIA(ctx, &u.f_X_ih)) return true;
                break;
            case 0x14:
                /* 011111.. ........ .....101 0010010. */
                /* ../target/ppc/insn32.decode:473 */
                decode_insn32_extract_X_DW(ctx, &u.f_X, insn);
                if (trans_HASHSTP(ctx, &u.f_X)) return true;
                break;
            case 0x15:
                /* 011111.. ........ .....101 0110010. */
                /* ../target/ppc/insn32.decode:474 */
                decode_insn32_extract_X_DW(ctx, &u.f_X, insn);
                if (trans_HASHCHKP(ctx, &u.f_X)) return true;
                break;
            case 0x16:
                /* 011111.. ........ .....101 1010010. */
                /* ../target/ppc/insn32.decode:471 */
                decode_insn32_extract_X_DW(ctx, &u.f_X, insn);
                if (trans_HASHST(ctx, &u.f_X)) return true;
                break;
            case 0x17:
                /* 011111.. ........ .....101 1110010. */
                /* ../target/ppc/insn32.decode:472 */
                decode_insn32_extract_X_DW(ctx, &u.f_X, insn);
                if (trans_HASHCHK(ctx, &u.f_X)) return true;
                break;
            case 0x1a:
                /* 011111.. ........ .....110 1010010. */
                /* ../target/ppc/insn32.decode:1258 */
                decode_insn32_extract_X_rs_l(ctx, &u.f_X_rs_l, insn);
                if (trans_SLBIAG(ctx, &u.f_X_rs_l)) return true;
                break;
            }
            break;
        case 0x13:
            /* 011111.. ........ ........ ..10011. */
            switch ((insn >> 6) & 0x1f) {
            case 0x17:
                /* 011111.. ........ .....101 1110011. */
                /* ../target/ppc/insn32.decode:409 */
                decode_insn32_extract_X_tl(ctx, &u.f_X_tl, insn);
                if (trans_DARN(ctx, &u.f_X_tl)) return true;
                break;
            case 0x1a:
                /* 011111.. ........ .....110 1010011. */
                /* ../target/ppc/insn32.decode:1262 */
                decode_insn32_extract_X_tb(ctx, &u.f_X_tb, insn);
                if (trans_SLBMFEV(ctx, &u.f_X_tb)) return true;
                break;
            case 0x1c:
                /* 011111.. ........ .....111 0010011. */
                /* ../target/ppc/insn32.decode:1263 */
                decode_insn32_extract_X_tb(ctx, &u.f_X_tb, insn);
                if (trans_SLBMFEE(ctx, &u.f_X_tb)) return true;
                break;
            case 0x1e:
                /* 011111.. ........ .....111 1010011. */
                decode_insn32_extract_X_tb(ctx, &u.f_X_tb, insn);
                switch (insn & 0x00000001) {
                case 0x00000001:
                    /* 011111.. ........ .....111 10100111 */
                    /* ../target/ppc/insn32.decode:1265 */
                    if (trans_SLBFEE(ctx, &u.f_X_tb)) return true;
                    break;
                }
                break;
            }
            break;
        case 0x15:
            /* 011111.. ........ ........ ..10101. */
            decode_insn32_extract_X(ctx, &u.f_X, insn);
            switch ((insn >> 6) & 0x1f) {
            case 0x0:
                /* 011111.. ........ .....000 0010101. */
                /* ../target/ppc/insn32.decode:320 */
                if (trans_LDX(ctx, &u.f_X)) return true;
                break;
            case 0x1:
                /* 011111.. ........ .....000 0110101. */
                /* ../target/ppc/insn32.decode:321 */
                if (trans_LDUX(ctx, &u.f_X)) return true;
                break;
            case 0x4:
                /* 011111.. ........ .....001 0010101. */
                /* ../target/ppc/insn32.decode:344 */
                if (trans_STDX(ctx, &u.f_X)) return true;
                break;
            case 0x5:
                /* 011111.. ........ .....001 0110101. */
                /* ../target/ppc/insn32.decode:345 */
                if (trans_STDUX(ctx, &u.f_X)) return true;
                break;
            case 0xa:
                /* 011111.. ........ .....010 1010101. */
                /* ../target/ppc/insn32.decode:315 */
                if (trans_LWAX(ctx, &u.f_X)) return true;
                break;
            case 0xb:
                /* 011111.. ........ .....010 1110101. */
                /* ../target/ppc/insn32.decode:316 */
                if (trans_LWAUX(ctx, &u.f_X)) return true;
                break;
            }
            break;
        case 0x16:
            /* 011111.. ........ ........ ..10110. */
            switch ((insn >> 6) & 0x1f) {
            case 0x12:
                /* 011111.. ........ .....100 1010110. */
                /* ../target/ppc/insn32.decode:1289 */
                decode_insn32_extract_X_sync(ctx, &u.f_X_sync, insn);
                if (trans_SYNC(ctx, &u.f_X_sync)) return true;
                break;
            case 0x1a:
                /* 011111.. ........ .....110 1010110. */
                /* ../target/ppc/insn32.decode:1290 */
                decode_insn32_extract_decode_insn32_Fmt_92(ctx, &u.f_decode_insn3265, insn);
                if (trans_EIEIO(ctx, &u.f_decode_insn3265)) return true;
                break;
            case 0x1b:
                /* 011111.. ........ .....110 1110110. */
                /* ../target/ppc/insn32.decode:1283 */
                decode_insn32_extract_decode_insn32_Fmt_92(ctx, &u.f_decode_insn3265, insn);
                if (trans_MSGSYNC(ctx, &u.f_decode_insn3265)) return true;
                break;
            }
            break;
        case 0x17:
            /* 011111.. ........ ........ ..10111. */
            decode_insn32_extract_X(ctx, &u.f_X, insn);
            switch ((insn >> 6) & 0x1f) {
            case 0x0:
                /* 011111.. ........ .....000 0010111. */
                /* ../target/ppc/insn32.decode:311 */
                if (trans_LWZX(ctx, &u.f_X)) return true;
                break;
            case 0x1:
                /* 011111.. ........ .....000 0110111. */
                /* ../target/ppc/insn32.decode:312 */
                if (trans_LWZUX(ctx, &u.f_X)) return true;
                break;
            case 0x2:
                /* 011111.. ........ .....000 1010111. */
                /* ../target/ppc/insn32.decode:296 */
                if (trans_LBZX(ctx, &u.f_X)) return true;
                break;
            case 0x3:
                /* 011111.. ........ .....000 1110111. */
                /* ../target/ppc/insn32.decode:297 */
                if (trans_LBZUX(ctx, &u.f_X)) return true;
                break;
            case 0x4:
                /* 011111.. ........ .....001 0010111. */
                /* ../target/ppc/insn32.decode:339 */
                if (trans_STWX(ctx, &u.f_X)) return true;
                break;
            case 0x5:
                /* 011111.. ........ .....001 0110111. */
                /* ../target/ppc/insn32.decode:340 */
                if (trans_STWUX(ctx, &u.f_X)) return true;
                break;
            case 0x6:
                /* 011111.. ........ .....001 1010111. */
                /* ../target/ppc/insn32.decode:329 */
                if (trans_STBX(ctx, &u.f_X)) return true;
                break;
            case 0x7:
                /* 011111.. ........ .....001 1110111. */
                /* ../target/ppc/insn32.decode:330 */
                if (trans_STBUX(ctx, &u.f_X)) return true;
                break;
            case 0x8:
                /* 011111.. ........ .....010 0010111. */
                /* ../target/ppc/insn32.decode:301 */
                if (trans_LHZX(ctx, &u.f_X)) return true;
                break;
            case 0x9:
                /* 011111.. ........ .....010 0110111. */
                /* ../target/ppc/insn32.decode:302 */
                if (trans_LHZUX(ctx, &u.f_X)) return true;
                break;
            case 0xa:
                /* 011111.. ........ .....010 1010111. */
                /* ../target/ppc/insn32.decode:306 */
                if (trans_LHAX(ctx, &u.f_X)) return true;
                break;
            case 0xb:
                /* 011111.. ........ .....010 1110111. */
                /* ../target/ppc/insn32.decode:307 */
                if (trans_LHAXU(ctx, &u.f_X)) return true;
                break;
            case 0xc:
                /* 011111.. ........ .....011 0010111. */
                /* ../target/ppc/insn32.decode:334 */
                if (trans_STHX(ctx, &u.f_X)) return true;
                break;
            case 0xd:
                /* 011111.. ........ .....011 0110111. */
                /* ../target/ppc/insn32.decode:335 */
                if (trans_STHUX(ctx, &u.f_X)) return true;
                break;
            case 0x10:
                /* 011111.. ........ .....100 0010111. */
                /* ../target/ppc/insn32.decode:486 */
                if (trans_LFSX(ctx, &u.f_X)) return true;
                break;
            case 0x11:
                /* 011111.. ........ .....100 0110111. */
                /* ../target/ppc/insn32.decode:487 */
                if (trans_LFSUX(ctx, &u.f_X)) return true;
                break;
            case 0x12:
                /* 011111.. ........ .....100 1010111. */
                /* ../target/ppc/insn32.decode:491 */
                if (trans_LFDX(ctx, &u.f_X)) return true;
                break;
            case 0x13:
                /* 011111.. ........ .....100 1110111. */
                /* ../target/ppc/insn32.decode:492 */
                if (trans_LFDUX(ctx, &u.f_X)) return true;
                break;
            case 0x14:
                /* 011111.. ........ .....101 0010111. */
                /* ../target/ppc/insn32.decode:498 */
                if (trans_STFSX(ctx, &u.f_X)) return true;
                break;
            case 0x15:
                /* 011111.. ........ .....101 0110111. */
                /* ../target/ppc/insn32.decode:499 */
                if (trans_STFSUX(ctx, &u.f_X)) return true;
                break;
            case 0x16:
                /* 011111.. ........ .....101 1010111. */
                /* ../target/ppc/insn32.decode:503 */
                if (trans_STFDX(ctx, &u.f_X)) return true;
                break;
            case 0x17:
                /* 011111.. ........ .....101 1110111. */
                /* ../target/ppc/insn32.decode:504 */
                if (trans_STFDUX(ctx, &u.f_X)) return true;
                break;
            }
            break;
        case 0x1a:
            /* 011111.. ........ ........ ..11010. */
            switch ((insn >> 6) & 0x1f) {
            case 0x0:
                /* 011111.. ........ .....000 0011010. */
                /* ../target/ppc/insn32.decode:451 */
                decode_insn32_extract_X_sa_rc(ctx, &u.f_X_sa_rc, insn);
                if (trans_CNTLZW(ctx, &u.f_X_sa_rc)) return true;
                break;
            case 0x1:
                /* 011111.. ........ .....000 0111010. */
                /* ../target/ppc/insn32.decode:453 */
                decode_insn32_extract_X_sa_rc(ctx, &u.f_X_sa_rc, insn);
                if (trans_CNTLZD(ctx, &u.f_X_sa_rc)) return true;
                break;
            case 0x3:
                /* 011111.. ........ .....000 1111010. */
                /* ../target/ppc/insn32.decode:455 */
                decode_insn32_extract_X_sa_rc(ctx, &u.f_X_sa_rc, insn);
                if (trans_POPCNTB(ctx, &u.f_X_sa_rc)) return true;
                break;
            case 0x4:
                /* 011111.. ........ .....001 0011010. */
                /* ../target/ppc/insn32.decode:459 */
                decode_insn32_extract_X_sa(ctx, &u.f_X_sa, insn);
                if (trans_PRTYW(ctx, &u.f_X_sa)) return true;
                break;
            case 0x5:
                /* 011111.. ........ .....001 0111010. */
                /* ../target/ppc/insn32.decode:460 */
                decode_insn32_extract_X_sa(ctx, &u.f_X_sa, insn);
                if (trans_PRTYD(ctx, &u.f_X_sa)) return true;
                break;
            case 0x8:
                /* 011111.. ........ .....010 0011010. */
                /* ../target/ppc/insn32.decode:479 */
                decode_insn32_extract_X_sa(ctx, &u.f_X_sa, insn);
                if (trans_CDTBCD(ctx, &u.f_X_sa)) return true;
                break;
            case 0x9:
                /* 011111.. ........ .....010 0111010. */
                /* ../target/ppc/insn32.decode:480 */
                decode_insn32_extract_X_sa(ctx, &u.f_X_sa, insn);
                if (trans_CBCDTD(ctx, &u.f_X_sa)) return true;
                break;
            case 0xb:
                /* 011111.. ........ .....010 1111010. */
                /* ../target/ppc/insn32.decode:457 */
                decode_insn32_extract_X_sa(ctx, &u.f_X_sa, insn);
                if (trans_POPCNTW(ctx, &u.f_X_sa)) return true;
                break;
            case 0xf:
                /* 011111.. ........ .....011 1111010. */
                /* ../target/ppc/insn32.decode:458 */
                decode_insn32_extract_X_sa(ctx, &u.f_X_sa, insn);
                if (trans_POPCNTD(ctx, &u.f_X_sa)) return true;
                break;
            case 0x10:
                /* 011111.. ........ .....100 0011010. */
                /* ../target/ppc/insn32.decode:452 */
                decode_insn32_extract_X_sa_rc(ctx, &u.f_X_sa_rc, insn);
                if (trans_CNTTZW(ctx, &u.f_X_sa_rc)) return true;
                break;
            case 0x11:
                /* 011111.. ........ .....100 0111010. */
                /* ../target/ppc/insn32.decode:454 */
                decode_insn32_extract_X_sa_rc(ctx, &u.f_X_sa_rc, insn);
                if (trans_CNTTZD(ctx, &u.f_X_sa_rc)) return true;
                break;
            case 0x1c:
                /* 011111.. ........ .....111 0011010. */
                /* ../target/ppc/insn32.decode:449 */
                decode_insn32_extract_X_sa_rc(ctx, &u.f_X_sa_rc, insn);
                if (trans_EXTSH(ctx, &u.f_X_sa_rc)) return true;
                break;
            case 0x1d:
                /* 011111.. ........ .....111 0111010. */
                /* ../target/ppc/insn32.decode:448 */
                decode_insn32_extract_X_sa_rc(ctx, &u.f_X_sa_rc, insn);
                if (trans_EXTSB(ctx, &u.f_X_sa_rc)) return true;
                break;
            case 0x1e:
                /* 011111.. ........ .....111 1011010. */
                /* ../target/ppc/insn32.decode:450 */
                decode_insn32_extract_X_sa_rc(ctx, &u.f_X_sa_rc, insn);
                if (trans_EXTSW(ctx, &u.f_X_sa_rc)) return true;
                break;
            }
            break;
        case 0x1b:
            /* 011111.. ........ ........ ..11011. */
            decode_insn32_extract_X(ctx, &u.f_X, insn);
            switch ((insn >> 6) & 0x1f) {
            case 0x1:
                /* 011111.. ........ .....000 0111011. */
                /* ../target/ppc/insn32.decode:464 */
                if (trans_CNTLZDM(ctx, &u.f_X)) return true;
                break;
            case 0x11:
                /* 011111.. ........ .....100 0111011. */
                /* ../target/ppc/insn32.decode:465 */
                if (trans_CNTTZDM(ctx, &u.f_X)) return true;
                break;
            }
            break;
        case 0x1c:
            /* 011111.. ........ ........ ..11100. */
            switch ((insn >> 6) & 0x1f) {
            case 0x0:
                /* 011111.. ........ .....000 0011100. */
                /* ../target/ppc/insn32.decode:438 */
                decode_insn32_extract_X_rc(ctx, &u.f_X_rc, insn);
                if (trans_AND(ctx, &u.f_X_rc)) return true;
                break;
            case 0x1:
                /* 011111.. ........ .....000 0111100. */
                /* ../target/ppc/insn32.decode:439 */
                decode_insn32_extract_X_rc(ctx, &u.f_X_rc, insn);
                if (trans_ANDC(ctx, &u.f_X_rc)) return true;
                break;
            case 0x3:
                /* 011111.. ........ .....000 1111100. */
                /* ../target/ppc/insn32.decode:443 */
                decode_insn32_extract_X_rc(ctx, &u.f_X_rc, insn);
                if (trans_NOR(ctx, &u.f_X_rc)) return true;
                break;
            case 0x4:
                /* 011111.. ........ .....001 0011100. */
                /* ../target/ppc/insn32.decode:466 */
                decode_insn32_extract_X(ctx, &u.f_X, insn);
                if (trans_PDEPD(ctx, &u.f_X)) return true;
                break;
            case 0x5:
                /* 011111.. ........ .....001 0111100. */
                /* ../target/ppc/insn32.decode:467 */
                decode_insn32_extract_X(ctx, &u.f_X, insn);
                if (trans_PEXTD(ctx, &u.f_X)) return true;
                break;
            case 0x6:
                /* 011111.. ........ .....001 1011100. */
                /* ../target/ppc/insn32.decode:463 */
                decode_insn32_extract_X(ctx, &u.f_X, insn);
                if (trans_CFUGED(ctx, &u.f_X)) return true;
                break;
            case 0x7:
                /* 011111.. ........ .....001 1111100. */
                /* ../target/ppc/insn32.decode:462 */
                decode_insn32_extract_X(ctx, &u.f_X, insn);
                if (trans_BPERMD(ctx, &u.f_X)) return true;
                break;
            case 0x8:
                /* 011111.. ........ .....010 0011100. */
                /* ../target/ppc/insn32.decode:445 */
                decode_insn32_extract_X_rc(ctx, &u.f_X_rc, insn);
                if (trans_EQV(ctx, &u.f_X_rc)) return true;
                break;
            case 0x9:
                /* 011111.. ........ .....010 0111100. */
                /* ../target/ppc/insn32.decode:444 */
                decode_insn32_extract_X_rc(ctx, &u.f_X_rc, insn);
                if (trans_XOR(ctx, &u.f_X_rc)) return true;
                break;
            case 0xc:
                /* 011111.. ........ .....011 0011100. */
                /* ../target/ppc/insn32.decode:442 */
                decode_insn32_extract_X_rc(ctx, &u.f_X_rc, insn);
                if (trans_ORC(ctx, &u.f_X_rc)) return true;
                break;
            case 0xd:
                /* 011111.. ........ .....011 0111100. */
                /* ../target/ppc/insn32.decode:441 */
                decode_insn32_extract_X_rc(ctx, &u.f_X_rc, insn);
                if (trans_OR(ctx, &u.f_X_rc)) return true;
                break;
            case 0xe:
                /* 011111.. ........ .....011 1011100. */
                /* ../target/ppc/insn32.decode:440 */
                decode_insn32_extract_X_rc(ctx, &u.f_X_rc, insn);
                if (trans_NAND(ctx, &u.f_X_rc)) return true;
                break;
            case 0xf:
                /* 011111.. ........ .....011 1111100. */
                /* ../target/ppc/insn32.decode:446 */
                decode_insn32_extract_X_rc(ctx, &u.f_X_rc, insn);
                if (trans_CMPB(ctx, &u.f_X_rc)) return true;
                break;
            }
            break;
        }
        break;
    case 0x20:
        /* 100000.. ........ ........ ........ */
        /* ../target/ppc/insn32.decode:309 */
        decode_insn32_extract_D(ctx, &u.f_D, insn);
        if (trans_LWZ(ctx, &u.f_D)) return true;
        break;
    case 0x21:
        /* 100001.. ........ ........ ........ */
        /* ../target/ppc/insn32.decode:310 */
        decode_insn32_extract_D(ctx, &u.f_D, insn);
        if (trans_LWZU(ctx, &u.f_D)) return true;
        break;
    case 0x22:
        /* 100010.. ........ ........ ........ */
        /* ../target/ppc/insn32.decode:294 */
        decode_insn32_extract_D(ctx, &u.f_D, insn);
        if (trans_LBZ(ctx, &u.f_D)) return true;
        break;
    case 0x23:
        /* 100011.. ........ ........ ........ */
        /* ../target/ppc/insn32.decode:295 */
        decode_insn32_extract_D(ctx, &u.f_D, insn);
        if (trans_LBZU(ctx, &u.f_D)) return true;
        break;
    case 0x24:
        /* 100100.. ........ ........ ........ */
        /* ../target/ppc/insn32.decode:337 */
        decode_insn32_extract_D(ctx, &u.f_D, insn);
        if (trans_STW(ctx, &u.f_D)) return true;
        break;
    case 0x25:
        /* 100101.. ........ ........ ........ */
        /* ../target/ppc/insn32.decode:338 */
        decode_insn32_extract_D(ctx, &u.f_D, insn);
        if (trans_STWU(ctx, &u.f_D)) return true;
        break;
    case 0x26:
        /* 100110.. ........ ........ ........ */
        /* ../target/ppc/insn32.decode:327 */
        decode_insn32_extract_D(ctx, &u.f_D, insn);
        if (trans_STB(ctx, &u.f_D)) return true;
        break;
    case 0x27:
        /* 100111.. ........ ........ ........ */
        /* ../target/ppc/insn32.decode:328 */
        decode_insn32_extract_D(ctx, &u.f_D, insn);
        if (trans_STBU(ctx, &u.f_D)) return true;
        break;
    case 0x28:
        /* 101000.. ........ ........ ........ */
        /* ../target/ppc/insn32.decode:299 */
        decode_insn32_extract_D(ctx, &u.f_D, insn);
        if (trans_LHZ(ctx, &u.f_D)) return true;
        break;
    case 0x29:
        /* 101001.. ........ ........ ........ */
        /* ../target/ppc/insn32.decode:300 */
        decode_insn32_extract_D(ctx, &u.f_D, insn);
        if (trans_LHZU(ctx, &u.f_D)) return true;
        break;
    case 0x2a:
        /* 101010.. ........ ........ ........ */
        /* ../target/ppc/insn32.decode:304 */
        decode_insn32_extract_D(ctx, &u.f_D, insn);
        if (trans_LHA(ctx, &u.f_D)) return true;
        break;
    case 0x2b:
        /* 101011.. ........ ........ ........ */
        /* ../target/ppc/insn32.decode:305 */
        decode_insn32_extract_D(ctx, &u.f_D, insn);
        if (trans_LHAU(ctx, &u.f_D)) return true;
        break;
    case 0x2c:
        /* 101100.. ........ ........ ........ */
        /* ../target/ppc/insn32.decode:332 */
        decode_insn32_extract_D(ctx, &u.f_D, insn);
        if (trans_STH(ctx, &u.f_D)) return true;
        break;
    case 0x2d:
        /* 101101.. ........ ........ ........ */
        /* ../target/ppc/insn32.decode:333 */
        decode_insn32_extract_D(ctx, &u.f_D, insn);
        if (trans_STHU(ctx, &u.f_D)) return true;
        break;
    case 0x30:
        /* 110000.. ........ ........ ........ */
        /* ../target/ppc/insn32.decode:484 */
        decode_insn32_extract_D(ctx, &u.f_D, insn);
        if (trans_LFS(ctx, &u.f_D)) return true;
        break;
    case 0x31:
        /* 110001.. ........ ........ ........ */
        /* ../target/ppc/insn32.decode:485 */
        decode_insn32_extract_D(ctx, &u.f_D, insn);
        if (trans_LFSU(ctx, &u.f_D)) return true;
        break;
    case 0x32:
        /* 110010.. ........ ........ ........ */
        /* ../target/ppc/insn32.decode:489 */
        decode_insn32_extract_D(ctx, &u.f_D, insn);
        if (trans_LFD(ctx, &u.f_D)) return true;
        break;
    case 0x33:
        /* 110011.. ........ ........ ........ */
        /* ../target/ppc/insn32.decode:490 */
        decode_insn32_extract_D(ctx, &u.f_D, insn);
        if (trans_LFDU(ctx, &u.f_D)) return true;
        break;
    case 0x34:
        /* 110100.. ........ ........ ........ */
        /* ../target/ppc/insn32.decode:496 */
        decode_insn32_extract_D(ctx, &u.f_D, insn);
        if (trans_STFS(ctx, &u.f_D)) return true;
        break;
    case 0x35:
        /* 110101.. ........ ........ ........ */
        /* ../target/ppc/insn32.decode:497 */
        decode_insn32_extract_D(ctx, &u.f_D, insn);
        if (trans_STFSU(ctx, &u.f_D)) return true;
        break;
    case 0x36:
        /* 110110.. ........ ........ ........ */
        /* ../target/ppc/insn32.decode:501 */
        decode_insn32_extract_D(ctx, &u.f_D, insn);
        if (trans_STFD(ctx, &u.f_D)) return true;
        break;
    case 0x37:
        /* 110111.. ........ ........ ........ */
        /* ../target/ppc/insn32.decode:502 */
        decode_insn32_extract_D(ctx, &u.f_D, insn);
        if (trans_STFDU(ctx, &u.f_D)) return true;
        break;
    case 0x38:
        /* 111000.. ........ ........ ........ */
        decode_insn32_extract_DQ_rtp(ctx, &u.f_D, insn);
        switch ((insn >> 21) & 0x1) {
        case 0x0:
            /* 111000.. ..0..... ........ ........ */
            /* ../target/ppc/insn32.decode:323 */
            if (trans_LQ(ctx, &u.f_D)) return true;
            break;
        }
        break;
    case 0x39:
        /* 111001.. ........ ........ ........ */
        decode_insn32_extract_DS(ctx, &u.f_D, insn);
        switch (insn & 0x00000003) {
        case 0x00000002:
            /* 111001.. ........ ........ ......10 */
            /* ../target/ppc/insn32.decode:978 */
            if (trans_LXSD(ctx, &u.f_D)) return true;
            break;
        case 0x00000003:
            /* 111001.. ........ ........ ......11 */
            /* ../target/ppc/insn32.decode:980 */
            if (trans_LXSSP(ctx, &u.f_D)) return true;
            break;
        }
        break;
    case 0x3a:
        /* 111010.. ........ ........ ........ */
        decode_insn32_extract_DS(ctx, &u.f_D, insn);
        switch (insn & 0x00000003) {
        case 0x00000000:
            /* 111010.. ........ ........ ......00 */
            /* ../target/ppc/insn32.decode:318 */
            if (trans_LD(ctx, &u.f_D)) return true;
            break;
        case 0x00000001:
            /* 111010.. ........ ........ ......01 */
            /* ../target/ppc/insn32.decode:319 */
            if (trans_LDU(ctx, &u.f_D)) return true;
            break;
        case 0x00000002:
            /* 111010.. ........ ........ ......10 */
            /* ../target/ppc/insn32.decode:314 */
            if (trans_LWA(ctx, &u.f_D)) return true;
            break;
        }
        break;
    case 0x3b:
        /* 111011.. ........ ........ ........ */
        switch ((insn >> 3) & 0x7) {
        case 0x0:
            /* 111011.. ........ ........ ..000... */
            switch (insn & 0x000001c6) {
            case 0x00000004:
                /* 111011.. ........ .......0 0000010. */
                switch ((insn >> 9) & 0x3) {
                case 0x0:
                    /* 111011.. ........ .....000 0000010. */
                    /* ../target/ppc/insn32.decode:573 */
                    decode_insn32_extract_X_rc(ctx, &u.f_X_rc, insn);
                    if (trans_DADD(ctx, &u.f_X_rc)) return true;
                    break;
                case 0x1:
                    /* 111011.. ........ .....010 0000010. */
                    /* ../target/ppc/insn32.decode:629 */
                    decode_insn32_extract_X_tb_rc(ctx, &u.f_X_tb_rc, insn);
                    if (trans_DCTDP(ctx, &u.f_X_tb_rc)) return true;
                    break;
                case 0x2:
                    /* 111011.. ........ .....100 0000010. */
                    /* ../target/ppc/insn32.decode:576 */
                    decode_insn32_extract_X_rc(ctx, &u.f_X_rc, insn);
                    if (trans_DSUB(ctx, &u.f_X_rc)) return true;
                    break;
                case 0x3:
                    /* 111011.. ........ .....110 0000010. */
                    /* ../target/ppc/insn32.decode:632 */
                    decode_insn32_extract_X_tb_rc(ctx, &u.f_X_tb_rc, insn);
                    if (trans_DRSP(ctx, &u.f_X_tb_rc)) return true;
                    break;
                }
                break;
            case 0x00000006:
                /* 111011.. ........ .......0 0000011. */
                /* ../target/ppc/insn32.decode:615 */
                decode_insn32_extract_Z23_tab(ctx, &u.f_Z23_tab, insn);
                if (trans_DQUA(ctx, &u.f_Z23_tab)) return true;
                break;
            case 0x00000044:
                /* 111011.. ........ .......0 0100010. */
                switch ((insn >> 9) & 0x3) {
                case 0x0:
                    /* 111011.. ........ .....000 0100010. */
                    /* ../target/ppc/insn32.decode:579 */
                    decode_insn32_extract_X_rc(ctx, &u.f_X_rc, insn);
                    if (trans_DMUL(ctx, &u.f_X_rc)) return true;
                    break;
                case 0x1:
                    /* 111011.. ........ .....010 0100010. */
                    /* ../target/ppc/insn32.decode:639 */
                    decode_insn32_extract_X_tb_rc(ctx, &u.f_X_tb_rc, insn);
                    if (trans_DCTFIX(ctx, &u.f_X_tb_rc)) return true;
                    break;
                case 0x2:
                    /* 111011.. ........ .....100 0100010. */
                    /* ../target/ppc/insn32.decode:582 */
                    decode_insn32_extract_X_rc(ctx, &u.f_X_rc, insn);
                    if (trans_DDIV(ctx, &u.f_X_rc)) return true;
                    break;
                case 0x3:
                    /* 111011.. ........ .....110 0100010. */
                    /* ../target/ppc/insn32.decode:635 */
                    decode_insn32_extract_X_tb_rc(ctx, &u.f_X_tb_rc, insn);
                    if (trans_DCFFIX(ctx, &u.f_X_tb_rc)) return true;
                    break;
                }
                break;
            case 0x00000046:
                /* 111011.. ........ .......0 0100011. */
                /* ../target/ppc/insn32.decode:618 */
                decode_insn32_extract_Z23_tab(ctx, &u.f_Z23_tab, insn);
                if (trans_DRRND(ctx, &u.f_Z23_tab)) return true;
                break;
            case 0x00000084:
                /* 111011.. ........ .......0 1000010. */
                switch ((insn >> 9) & 0x1) {
                case 0x0:
                    /* 111011.. ........ ......00 1000010. */
                    /* ../target/ppc/insn32.decode:657 */
                    decode_insn32_extract_Z22_ta_sh_rc(ctx, &u.f_Z22_ta_sh_rc, insn);
                    if (trans_DSCLI(ctx, &u.f_Z22_ta_sh_rc)) return true;
                    break;
                case 0x1:
                    /* 111011.. ........ ......10 1000010. */
                    switch ((insn >> 10) & 0x1) {
                    case 0x0:
                        /* 111011.. ........ .....010 1000010. */
                        /* ../target/ppc/insn32.decode:645 */
                        decode_insn32_extract_X_tb_sp_rc(ctx, &u.f_X_tb_sp_rc, insn);
                        if (trans_DDEDPD(ctx, &u.f_X_tb_sp_rc)) return true;
                        break;
                    case 0x1:
                        /* 111011.. ........ .....110 1000010. */
                        /* ../target/ppc/insn32.decode:648 */
                        decode_insn32_extract_X_tb_s_rc(ctx, &u.f_X_tb_s_rc, insn);
                        if (trans_DENBCD(ctx, &u.f_X_tb_s_rc)) return true;
                        break;
                    }
                    break;
                }
                break;
            case 0x00000086:
                /* 111011.. ........ .......0 1000011. */
                /* ../target/ppc/insn32.decode:612 */
                decode_insn32_extract_Z23_te_tb(ctx, &u.f_Z23_te_tb, insn);
                if (trans_DQUAI(ctx, &u.f_Z23_te_tb)) return true;
                break;
            case 0x000000c4:
                /* 111011.. ........ .......0 1100010. */
                switch ((insn >> 9) & 0x1) {
                case 0x0:
                    /* 111011.. ........ ......00 1100010. */
                    /* ../target/ppc/insn32.decode:660 */
                    decode_insn32_extract_Z22_ta_sh_rc(ctx, &u.f_Z22_ta_sh_rc, insn);
                    if (trans_DSCRI(ctx, &u.f_Z22_ta_sh_rc)) return true;
                    break;
                case 0x1:
                    /* 111011.. ........ ......10 1100010. */
                    switch ((insn >> 10) & 0x1) {
                    case 0x0:
                        /* 111011.. ........ .....010 1100010. */
                        /* ../target/ppc/insn32.decode:651 */
                        decode_insn32_extract_X_tb_rc(ctx, &u.f_X_tb_rc, insn);
                        if (trans_DXEX(ctx, &u.f_X_tb_rc)) return true;
                        break;
                    case 0x1:
                        /* 111011.. ........ .....110 1100010. */
                        /* ../target/ppc/insn32.decode:654 */
                        decode_insn32_extract_X_rc(ctx, &u.f_X_rc, insn);
                        if (trans_DIEX(ctx, &u.f_X_rc)) return true;
                        break;
                    }
                    break;
                }
                break;
            case 0x000000c6:
                /* 111011.. ........ .......0 1100011. */
                /* ../target/ppc/insn32.decode:621 */
                decode_insn32_extract_Z23_tb(ctx, &u.f_Z23_tb, insn);
                if (trans_DRINTX(ctx, &u.f_Z23_tb)) return true;
                break;
            case 0x00000104:
                /* 111011.. ........ .......1 0000010. */
                decode_insn32_extract_X_bf(ctx, &u.f_X_bf, insn);
                switch ((insn >> 9) & 0x3) {
                case 0x0:
                    /* 111011.. ........ .....001 0000010. */
                    /* ../target/ppc/insn32.decode:590 */
                    if (trans_DCMPO(ctx, &u.f_X_bf)) return true;
                    break;
                case 0x2:
                    /* 111011.. ........ .....101 0000010. */
                    /* ../target/ppc/insn32.decode:587 */
                    if (trans_DCMPU(ctx, &u.f_X_bf)) return true;
                    break;
                }
                break;
            case 0x00000144:
                /* 111011.. ........ .......1 0100010. */
                decode_insn32_extract_X_bf(ctx, &u.f_X_bf, insn);
                switch ((insn >> 9) & 0x3) {
                case 0x0:
                    /* 111011.. ........ .....001 0100010. */
                    /* ../target/ppc/insn32.decode:601 */
                    if (trans_DTSTEX(ctx, &u.f_X_bf)) return true;
                    break;
                case 0x2:
                    /* 111011.. ........ .....101 0100010. */
                    /* ../target/ppc/insn32.decode:604 */
                    if (trans_DTSTSF(ctx, &u.f_X_bf)) return true;
                    break;
                }
                break;
            case 0x00000146:
                /* 111011.. ........ .......1 0100011. */
                decode_insn32_extract_X_bf_uim(ctx, &u.f_X_bf_uim, insn);
                switch ((insn >> 9) & 0x3) {
                case 0x2:
                    /* 111011.. ........ .....101 0100011. */
                    /* ../target/ppc/insn32.decode:607 */
                    if (trans_DTSTSFI(ctx, &u.f_X_bf_uim)) return true;
                    break;
                }
                break;
            case 0x00000184:
                /* 111011.. ........ .......1 1000010. */
                decode_insn32_extract_Z22_bf_fra(ctx, &u.f_Z22_bf_fra, insn);
                switch ((insn >> 9) & 0x1) {
                case 0x0:
                    /* 111011.. ........ ......01 1000010. */
                    /* ../target/ppc/insn32.decode:595 */
                    if (trans_DTSTDC(ctx, &u.f_Z22_bf_fra)) return true;
                    break;
                }
                break;
            case 0x000001c4:
                /* 111011.. ........ .......1 1100010. */
                decode_insn32_extract_Z22_bf_fra(ctx, &u.f_Z22_bf_fra, insn);
                switch ((insn >> 9) & 0x1) {
                case 0x0:
                    /* 111011.. ........ ......01 1100010. */
                    /* ../target/ppc/insn32.decode:598 */
                    if (trans_DTSTDG(ctx, &u.f_Z22_bf_fra)) return true;
                    break;
                }
                break;
            case 0x000001c6:
                /* 111011.. ........ .......1 1100011. */
                /* ../target/ppc/insn32.decode:624 */
                decode_insn32_extract_Z23_tb(ctx, &u.f_Z23_tb, insn);
                if (trans_DRINTN(ctx, &u.f_Z23_tb)) return true;
                break;
            }
            break;
        case 0x2:
            /* 111011.. ........ ........ ..010... */
            decode_insn32_extract_XX3_at(ctx, &u.f_MMIRR_XX3, insn);
            switch ((insn >> 6) & 0x1f) {
            case 0x0:
                /* 111011.. ........ .....000 00010... */
                /* ../target/ppc/insn32.decode:1198 */
                u.f_MMIRR_XX3.xa = deposit32(extract32(insn, 16, 5), 5, 27, extract32(insn, 2, 1));
                if (trans_XVI8GER4PP(ctx, &u.f_MMIRR_XX3)) return true;
                break;
            case 0x2:
                /* 111011.. ........ .....000 10010... */
                /* ../target/ppc/insn32.decode:1212 */
                u.f_MMIRR_XX3.xa = deposit32(extract32(insn, 16, 5), 5, 27, extract32(insn, 2, 1));
                if (trans_XVF16GER2PP(ctx, &u.f_MMIRR_XX3)) return true;
                break;
            case 0x3:
                /* 111011.. ........ .....000 11010... */
                /* ../target/ppc/insn32.decode:1218 */
                u.f_MMIRR_XX3.xa = deposit32(extract32(insn, 16, 5), 5, 27, extract32(insn, 2, 1));
                if (trans_XVF32GERPP(ctx, &u.f_MMIRR_XX3)) return true;
                break;
            case 0x4:
                /* 111011.. ........ .....001 00010... */
                /* ../target/ppc/insn32.decode:1196 */
                u.f_MMIRR_XX3.xa = deposit32(extract32(insn, 16, 5), 5, 27, extract32(insn, 2, 1));
                if (trans_XVI4GER8PP(ctx, &u.f_MMIRR_XX3)) return true;
                break;
            case 0x5:
                /* 111011.. ........ .....001 01010... */
                /* ../target/ppc/insn32.decode:1203 */
                u.f_MMIRR_XX3.xa = deposit32(extract32(insn, 16, 5), 5, 27, extract32(insn, 2, 1));
                if (trans_XVI16GER2SPP(ctx, &u.f_MMIRR_XX3)) return true;
                break;
            case 0x6:
                /* 111011.. ........ .....001 10010... */
                /* ../target/ppc/insn32.decode:1206 */
                u.f_MMIRR_XX3.xa = deposit32(extract32(insn, 16, 5), 5, 27, extract32(insn, 2, 1));
                if (trans_XVBF16GER2PP(ctx, &u.f_MMIRR_XX3)) return true;
                break;
            case 0x7:
                /* 111011.. ........ .....001 11010... */
                switch ((insn >> 16) & 0x1) {
                case 0x0:
                    /* 111011.. .......0 .....001 11010... */
                    /* ../target/ppc/insn32.decode:1224 */
                    u.f_MMIRR_XX3.xa = times_2(ctx, deposit32(extract32(insn, 17, 4), 4, 28, extract32(insn, 2, 1)));
                    if (trans_XVF64GERPP(ctx, &u.f_MMIRR_XX3)) return true;
                    break;
                }
                break;
            case 0xa:
                /* 111011.. ........ .....010 10010... */
                /* ../target/ppc/insn32.decode:1214 */
                u.f_MMIRR_XX3.xa = deposit32(extract32(insn, 16, 5), 5, 27, extract32(insn, 2, 1));
                if (trans_XVF16GER2NP(ctx, &u.f_MMIRR_XX3)) return true;
                break;
            case 0xb:
                /* 111011.. ........ .....010 11010... */
                /* ../target/ppc/insn32.decode:1220 */
                u.f_MMIRR_XX3.xa = deposit32(extract32(insn, 16, 5), 5, 27, extract32(insn, 2, 1));
                if (trans_XVF32GERNP(ctx, &u.f_MMIRR_XX3)) return true;
                break;
            case 0xe:
                /* 111011.. ........ .....011 10010... */
                /* ../target/ppc/insn32.decode:1208 */
                u.f_MMIRR_XX3.xa = deposit32(extract32(insn, 16, 5), 5, 27, extract32(insn, 2, 1));
                if (trans_XVBF16GER2NP(ctx, &u.f_MMIRR_XX3)) return true;
                break;
            case 0xf:
                /* 111011.. ........ .....011 11010... */
                switch ((insn >> 16) & 0x1) {
                case 0x0:
                    /* 111011.. .......0 .....011 11010... */
                    /* ../target/ppc/insn32.decode:1226 */
                    u.f_MMIRR_XX3.xa = times_2(ctx, deposit32(extract32(insn, 17, 4), 4, 28, extract32(insn, 2, 1)));
                    if (trans_XVF64GERNP(ctx, &u.f_MMIRR_XX3)) return true;
                    break;
                }
                break;
            case 0x12:
                /* 111011.. ........ .....100 10010... */
                /* ../target/ppc/insn32.decode:1213 */
                u.f_MMIRR_XX3.xa = deposit32(extract32(insn, 16, 5), 5, 27, extract32(insn, 2, 1));
                if (trans_XVF16GER2PN(ctx, &u.f_MMIRR_XX3)) return true;
                break;
            case 0x13:
                /* 111011.. ........ .....100 11010... */
                /* ../target/ppc/insn32.decode:1219 */
                u.f_MMIRR_XX3.xa = deposit32(extract32(insn, 16, 5), 5, 27, extract32(insn, 2, 1));
                if (trans_XVF32GERPN(ctx, &u.f_MMIRR_XX3)) return true;
                break;
            case 0x16:
                /* 111011.. ........ .....101 10010... */
                /* ../target/ppc/insn32.decode:1207 */
                u.f_MMIRR_XX3.xa = deposit32(extract32(insn, 16, 5), 5, 27, extract32(insn, 2, 1));
                if (trans_XVBF16GER2PN(ctx, &u.f_MMIRR_XX3)) return true;
                break;
            case 0x17:
                /* 111011.. ........ .....101 11010... */
                switch ((insn >> 16) & 0x1) {
                case 0x0:
                    /* 111011.. .......0 .....101 11010... */
                    /* ../target/ppc/insn32.decode:1225 */
                    u.f_MMIRR_XX3.xa = times_2(ctx, deposit32(extract32(insn, 17, 4), 4, 28, extract32(insn, 2, 1)));
                    if (trans_XVF64GERPN(ctx, &u.f_MMIRR_XX3)) return true;
                    break;
                }
                break;
            case 0x1a:
                /* 111011.. ........ .....110 10010... */
                /* ../target/ppc/insn32.decode:1215 */
                u.f_MMIRR_XX3.xa = deposit32(extract32(insn, 16, 5), 5, 27, extract32(insn, 2, 1));
                if (trans_XVF16GER2NN(ctx, &u.f_MMIRR_XX3)) return true;
                break;
            case 0x1b:
                /* 111011.. ........ .....110 11010... */
                /* ../target/ppc/insn32.decode:1221 */
                u.f_MMIRR_XX3.xa = deposit32(extract32(insn, 16, 5), 5, 27, extract32(insn, 2, 1));
                if (trans_XVF32GERNN(ctx, &u.f_MMIRR_XX3)) return true;
                break;
            case 0x1e:
                /* 111011.. ........ .....111 10010... */
                /* ../target/ppc/insn32.decode:1209 */
                u.f_MMIRR_XX3.xa = deposit32(extract32(insn, 16, 5), 5, 27, extract32(insn, 2, 1));
                if (trans_XVBF16GER2NN(ctx, &u.f_MMIRR_XX3)) return true;
                break;
            case 0x1f:
                /* 111011.. ........ .....111 11010... */
                switch ((insn >> 16) & 0x1) {
                case 0x0:
                    /* 111011.. .......0 .....111 11010... */
                    /* ../target/ppc/insn32.decode:1227 */
                    u.f_MMIRR_XX3.xa = times_2(ctx, deposit32(extract32(insn, 17, 4), 4, 28, extract32(insn, 2, 1)));
                    if (trans_XVF64GERNN(ctx, &u.f_MMIRR_XX3)) return true;
                    break;
                }
                break;
            }
            break;
        case 0x3:
            /* 111011.. ........ ........ ..011... */
            decode_insn32_extract_XX3_at(ctx, &u.f_MMIRR_XX3, insn);
            switch ((insn >> 6) & 0x1f) {
            case 0x0:
                /* 111011.. ........ .....000 00011... */
                /* ../target/ppc/insn32.decode:1197 */
                u.f_MMIRR_XX3.xa = deposit32(extract32(insn, 16, 5), 5, 27, extract32(insn, 2, 1));
                if (trans_XVI8GER4(ctx, &u.f_MMIRR_XX3)) return true;
                break;
            case 0x2:
                /* 111011.. ........ .....000 10011... */
                /* ../target/ppc/insn32.decode:1211 */
                u.f_MMIRR_XX3.xa = deposit32(extract32(insn, 16, 5), 5, 27, extract32(insn, 2, 1));
                if (trans_XVF16GER2(ctx, &u.f_MMIRR_XX3)) return true;
                break;
            case 0x3:
                /* 111011.. ........ .....000 11011... */
                /* ../target/ppc/insn32.decode:1217 */
                u.f_MMIRR_XX3.xa = deposit32(extract32(insn, 16, 5), 5, 27, extract32(insn, 2, 1));
                if (trans_XVF32GER(ctx, &u.f_MMIRR_XX3)) return true;
                break;
            case 0x4:
                /* 111011.. ........ .....001 00011... */
                /* ../target/ppc/insn32.decode:1195 */
                u.f_MMIRR_XX3.xa = deposit32(extract32(insn, 16, 5), 5, 27, extract32(insn, 2, 1));
                if (trans_XVI4GER8(ctx, &u.f_MMIRR_XX3)) return true;
                break;
            case 0x5:
                /* 111011.. ........ .....001 01011... */
                /* ../target/ppc/insn32.decode:1202 */
                u.f_MMIRR_XX3.xa = deposit32(extract32(insn, 16, 5), 5, 27, extract32(insn, 2, 1));
                if (trans_XVI16GER2S(ctx, &u.f_MMIRR_XX3)) return true;
                break;
            case 0x6:
                /* 111011.. ........ .....001 10011... */
                /* ../target/ppc/insn32.decode:1205 */
                u.f_MMIRR_XX3.xa = deposit32(extract32(insn, 16, 5), 5, 27, extract32(insn, 2, 1));
                if (trans_XVBF16GER2(ctx, &u.f_MMIRR_XX3)) return true;
                break;
            case 0x7:
                /* 111011.. ........ .....001 11011... */
                switch ((insn >> 16) & 0x1) {
                case 0x0:
                    /* 111011.. .......0 .....001 11011... */
                    /* ../target/ppc/insn32.decode:1223 */
                    u.f_MMIRR_XX3.xa = times_2(ctx, deposit32(extract32(insn, 17, 4), 4, 28, extract32(insn, 2, 1)));
                    if (trans_XVF64GER(ctx, &u.f_MMIRR_XX3)) return true;
                    break;
                }
                break;
            case 0x9:
                /* 111011.. ........ .....010 01011... */
                /* ../target/ppc/insn32.decode:1199 */
                u.f_MMIRR_XX3.xa = deposit32(extract32(insn, 16, 5), 5, 27, extract32(insn, 2, 1));
                if (trans_XVI16GER2(ctx, &u.f_MMIRR_XX3)) return true;
                break;
            case 0xc:
                /* 111011.. ........ .....011 00011... */
                /* ../target/ppc/insn32.decode:1201 */
                u.f_MMIRR_XX3.xa = deposit32(extract32(insn, 16, 5), 5, 27, extract32(insn, 2, 1));
                if (trans_XVI8GER4SPP(ctx, &u.f_MMIRR_XX3)) return true;
                break;
            case 0xd:
                /* 111011.. ........ .....011 01011... */
                /* ../target/ppc/insn32.decode:1200 */
                u.f_MMIRR_XX3.xa = deposit32(extract32(insn, 16, 5), 5, 27, extract32(insn, 2, 1));
                if (trans_XVI16GER2PP(ctx, &u.f_MMIRR_XX3)) return true;
                break;
            }
            break;
        case 0x4:
            /* 111011.. ........ ........ ..100... */
            decode_insn32_extract_A_tab(ctx, &u.f_A_tab, insn);
            switch ((insn >> 1) & 0x3) {
            case 0x2:
                /* 111011.. ........ ........ ..10010. */
                /* ../target/ppc/insn32.decode:518 */
                if (trans_FDIVS(ctx, &u.f_A_tab)) return true;
                break;
            }
            break;
        case 0x5:
            /* 111011.. ........ ........ ..101... */
            switch ((insn >> 1) & 0x3) {
            case 0x0:
                /* 111011.. ........ ........ ..10100. */
                /* ../target/ppc/insn32.decode:512 */
                decode_insn32_extract_A_tab(ctx, &u.f_A_tab, insn);
                if (trans_FSUBS(ctx, &u.f_A_tab)) return true;
                break;
            case 0x1:
                /* 111011.. ........ ........ ..10101. */
                /* ../target/ppc/insn32.decode:509 */
                decode_insn32_extract_A_tab(ctx, &u.f_A_tab, insn);
                if (trans_FADDS(ctx, &u.f_A_tab)) return true;
                break;
            case 0x2:
                /* 111011.. ........ ........ ..10110. */
                /* ../target/ppc/insn32.decode:521 */
                decode_insn32_extract_A_tb(ctx, &u.f_A_tb, insn);
                if (trans_FSQRTS(ctx, &u.f_A_tb)) return true;
                break;
            }
            break;
        case 0x6:
            /* 111011.. ........ ........ ..110... */
            switch ((insn >> 1) & 0x3) {
            case 0x0:
                /* 111011.. ........ ........ ..11000. */
                /* ../target/ppc/insn32.decode:524 */
                decode_insn32_extract_A_tb(ctx, &u.f_A_tb, insn);
                if (trans_FRES(ctx, &u.f_A_tb)) return true;
                break;
            case 0x1:
                /* 111011.. ........ ........ ..11001. */
                /* ../target/ppc/insn32.decode:515 */
                decode_insn32_extract_A_tac(ctx, &u.f_A_tac, insn);
                if (trans_FMULS(ctx, &u.f_A_tac)) return true;
                break;
            case 0x2:
                /* 111011.. ........ ........ ..11010. */
                /* ../target/ppc/insn32.decode:527 */
                decode_insn32_extract_A_tb(ctx, &u.f_A_tb, insn);
                if (trans_FRSQRTES(ctx, &u.f_A_tb)) return true;
                break;
            }
            break;
        case 0x7:
            /* 111011.. ........ ........ ..111... */
            decode_insn32_extract_A(ctx, &u.f_A, insn);
            switch ((insn >> 1) & 0x3) {
            case 0x0:
                /* 111011.. ........ ........ ..11100. */
                /* ../target/ppc/insn32.decode:536 */
                if (trans_FMSUBS(ctx, &u.f_A)) return true;
                break;
            case 0x1:
                /* 111011.. ........ ........ ..11101. */
                /* ../target/ppc/insn32.decode:533 */
                if (trans_FMADDS(ctx, &u.f_A)) return true;
                break;
            case 0x2:
                /* 111011.. ........ ........ ..11110. */
                /* ../target/ppc/insn32.decode:542 */
                if (trans_FNMSUBS(ctx, &u.f_A)) return true;
                break;
            case 0x3:
                /* 111011.. ........ ........ ..11111. */
                /* ../target/ppc/insn32.decode:539 */
                if (trans_FNMADDS(ctx, &u.f_A)) return true;
                break;
            }
            break;
        }
        break;
    case 0x3c:
        /* 111100.. ........ ........ ........ */
        switch ((insn >> 4) & 0x3) {
        case 0x0:
            /* 111100.. ........ ........ ..00.... */
            decode_insn32_extract_XX3(ctx, &u.f_XX3, insn);
            switch (insn & 0x000007c8) {
            case 0x00000000:
                /* 111100.. ........ .....000 00000... */
                /* ../target/ppc/insn32.decode:1041 */
                if (trans_XSADDSP(ctx, &u.f_XX3)) return true;
                break;
            case 0x00000008:
                /* 111100.. ........ .....000 00001... */
                /* ../target/ppc/insn32.decode:1065 */
                if (trans_XSMADDASP(ctx, &u.f_XX3)) return true;
                break;
            case 0x00000040:
                /* 111100.. ........ .....000 01000... */
                /* ../target/ppc/insn32.decode:1042 */
                if (trans_XSSUBSP(ctx, &u.f_XX3)) return true;
                break;
            case 0x00000048:
                /* 111100.. ........ .....000 01001... */
                /* ../target/ppc/insn32.decode:1066 */
                if (trans_XSMADDMSP(ctx, &u.f_XX3)) return true;
                break;
            case 0x00000080:
                /* 111100.. ........ .....000 10000... */
                /* ../target/ppc/insn32.decode:1043 */
                if (trans_XSMULSP(ctx, &u.f_XX3)) return true;
                break;
            case 0x00000088:
                /* 111100.. ........ .....000 10001... */
                /* ../target/ppc/insn32.decode:1071 */
                if (trans_XSMSUBASP(ctx, &u.f_XX3)) return true;
                break;
            case 0x000000c0:
                /* 111100.. ........ .....000 11000... */
                /* ../target/ppc/insn32.decode:1044 */
                if (trans_XSDIVSP(ctx, &u.f_XX3)) return true;
                break;
            case 0x000000c8:
                /* 111100.. ........ .....000 11001... */
                /* ../target/ppc/insn32.decode:1072 */
                if (trans_XSMSUBMSP(ctx, &u.f_XX3)) return true;
                break;
            case 0x00000100:
                /* 111100.. ........ .....001 00000... */
                /* ../target/ppc/insn32.decode:1046 */
                if (trans_XSADDDP(ctx, &u.f_XX3)) return true;
                break;
            case 0x00000108:
                /* 111100.. ........ .....001 00001... */
                /* ../target/ppc/insn32.decode:1063 */
                if (trans_XSMADDADP(ctx, &u.f_XX3)) return true;
                break;
            case 0x00000140:
                /* 111100.. ........ .....001 01000... */
                /* ../target/ppc/insn32.decode:1047 */
                if (trans_XSSUBDP(ctx, &u.f_XX3)) return true;
                break;
            case 0x00000148:
                /* 111100.. ........ .....001 01001... */
                /* ../target/ppc/insn32.decode:1064 */
                if (trans_XSMADDMDP(ctx, &u.f_XX3)) return true;
                break;
            case 0x00000180:
                /* 111100.. ........ .....001 10000... */
                /* ../target/ppc/insn32.decode:1048 */
                if (trans_XSMULDP(ctx, &u.f_XX3)) return true;
                break;
            case 0x00000188:
                /* 111100.. ........ .....001 10001... */
                /* ../target/ppc/insn32.decode:1069 */
                if (trans_XSMSUBADP(ctx, &u.f_XX3)) return true;
                break;
            case 0x000001c0:
                /* 111100.. ........ .....001 11000... */
                /* ../target/ppc/insn32.decode:1049 */
                if (trans_XSDIVDP(ctx, &u.f_XX3)) return true;
                break;
            case 0x000001c8:
                /* 111100.. ........ .....001 11001... */
                /* ../target/ppc/insn32.decode:1070 */
                if (trans_XSMSUBMDP(ctx, &u.f_XX3)) return true;
                break;
            case 0x00000200:
                /* 111100.. ........ .....010 00000... */
                /* ../target/ppc/insn32.decode:1051 */
                if (trans_XVADDSP(ctx, &u.f_XX3)) return true;
                break;
            case 0x00000240:
                /* 111100.. ........ .....010 01000... */
                /* ../target/ppc/insn32.decode:1052 */
                if (trans_XVSUBSP(ctx, &u.f_XX3)) return true;
                break;
            case 0x00000280:
                /* 111100.. ........ .....010 10000... */
                /* ../target/ppc/insn32.decode:1053 */
                if (trans_XVMULSP(ctx, &u.f_XX3)) return true;
                break;
            case 0x000002c0:
                /* 111100.. ........ .....010 11000... */
                /* ../target/ppc/insn32.decode:1054 */
                if (trans_XVDIVSP(ctx, &u.f_XX3)) return true;
                break;
            case 0x00000300:
                /* 111100.. ........ .....011 00000... */
                /* ../target/ppc/insn32.decode:1056 */
                if (trans_XVADDDP(ctx, &u.f_XX3)) return true;
                break;
            case 0x00000340:
                /* 111100.. ........ .....011 01000... */
                /* ../target/ppc/insn32.decode:1057 */
                if (trans_XVSUBDP(ctx, &u.f_XX3)) return true;
                break;
            case 0x00000380:
                /* 111100.. ........ .....011 10000... */
                /* ../target/ppc/insn32.decode:1058 */
                if (trans_XVMULDP(ctx, &u.f_XX3)) return true;
                break;
            case 0x000003c0:
                /* 111100.. ........ .....011 11000... */
                /* ../target/ppc/insn32.decode:1059 */
                if (trans_XVDIVDP(ctx, &u.f_XX3)) return true;
                break;
            case 0x00000400:
                /* 111100.. ........ .....100 00000... */
                /* ../target/ppc/insn32.decode:1116 */
                if (trans_XSMAXCDP(ctx, &u.f_XX3)) return true;
                break;
            case 0x00000408:
                /* 111100.. ........ .....100 00001... */
                /* ../target/ppc/insn32.decode:1075 */
                if (trans_XSNMADDASP(ctx, &u.f_XX3)) return true;
                break;
            case 0x00000440:
                /* 111100.. ........ .....100 01000... */
                /* ../target/ppc/insn32.decode:1117 */
                if (trans_XSMINCDP(ctx, &u.f_XX3)) return true;
                break;
            case 0x00000448:
                /* 111100.. ........ .....100 01001... */
                /* ../target/ppc/insn32.decode:1076 */
                if (trans_XSNMADDMSP(ctx, &u.f_XX3)) return true;
                break;
            case 0x00000480:
                /* 111100.. ........ .....100 10000... */
                /* ../target/ppc/insn32.decode:1118 */
                if (trans_XSMAXJDP(ctx, &u.f_XX3)) return true;
                break;
            case 0x00000488:
                /* 111100.. ........ .....100 10001... */
                /* ../target/ppc/insn32.decode:1081 */
                if (trans_XSNMSUBASP(ctx, &u.f_XX3)) return true;
                break;
            case 0x000004c0:
                /* 111100.. ........ .....100 11000... */
                /* ../target/ppc/insn32.decode:1119 */
                if (trans_XSMINJDP(ctx, &u.f_XX3)) return true;
                break;
            case 0x000004c8:
                /* 111100.. ........ .....100 11001... */
                /* ../target/ppc/insn32.decode:1082 */
                if (trans_XSNMSUBMSP(ctx, &u.f_XX3)) return true;
                break;
            case 0x00000500:
                /* 111100.. ........ .....101 00000... */
                /* ../target/ppc/insn32.decode:1139 */
                if (trans_XSMAXDP(ctx, &u.f_XX3)) return true;
                break;
            case 0x00000508:
                /* 111100.. ........ .....101 00001... */
                /* ../target/ppc/insn32.decode:1077 */
                if (trans_XSNMADDADP(ctx, &u.f_XX3)) return true;
                break;
            case 0x00000540:
                /* 111100.. ........ .....101 01000... */
                /* ../target/ppc/insn32.decode:1140 */
                if (trans_XSMINDP(ctx, &u.f_XX3)) return true;
                break;
            case 0x00000548:
                /* 111100.. ........ .....101 01001... */
                /* ../target/ppc/insn32.decode:1078 */
                if (trans_XSNMADDMDP(ctx, &u.f_XX3)) return true;
                break;
            case 0x00000588:
                /* 111100.. ........ .....101 10001... */
                /* ../target/ppc/insn32.decode:1083 */
                if (trans_XSNMSUBADP(ctx, &u.f_XX3)) return true;
                break;
            case 0x000005c8:
                /* 111100.. ........ .....101 11001... */
                /* ../target/ppc/insn32.decode:1084 */
                if (trans_XSNMSUBMDP(ctx, &u.f_XX3)) return true;
                break;
            case 0x00000600:
                /* 111100.. ........ .....110 00000... */
                /* ../target/ppc/insn32.decode:1142 */
                if (trans_XVMAXSP(ctx, &u.f_XX3)) return true;
                break;
            case 0x00000640:
                /* 111100.. ........ .....110 01000... */
                /* ../target/ppc/insn32.decode:1143 */
                if (trans_XVMINSP(ctx, &u.f_XX3)) return true;
                break;
            case 0x00000680:
                /* 111100.. ........ .....110 10000... */
                /* ../target/ppc/insn32.decode:1037 */
                if (trans_XVCPSGNSP(ctx, &u.f_XX3)) return true;
                break;
            case 0x00000700:
                /* 111100.. ........ .....111 00000... */
                /* ../target/ppc/insn32.decode:1144 */
                if (trans_XVMAXDP(ctx, &u.f_XX3)) return true;
                break;
            case 0x00000740:
                /* 111100.. ........ .....111 01000... */
                /* ../target/ppc/insn32.decode:1145 */
                if (trans_XVMINDP(ctx, &u.f_XX3)) return true;
                break;
            case 0x00000780:
                /* 111100.. ........ .....111 10000... */
                /* ../target/ppc/insn32.decode:1036 */
                if (trans_XVCPSGNDP(ctx, &u.f_XX3)) return true;
                break;
            }
            break;
        case 0x1:
            /* 111100.. ........ ........ ..01.... */
            switch (insn & 0x000000c8) {
            case 0x00000000:
                /* 111100.. ........ ........ 00010... */
                decode_insn32_extract_XX3(ctx, &u.f_XX3, insn);
                switch ((insn >> 8) & 0x7) {
                case 0x4:
                    /* 111100.. ........ .....100 00010... */
                    /* ../target/ppc/insn32.decode:1184 */
                    if (trans_XXLAND(ctx, &u.f_XX3)) return true;
                    break;
                case 0x5:
                    /* 111100.. ........ .....101 00010... */
                    /* ../target/ppc/insn32.decode:1188 */
                    if (trans_XXLNOR(ctx, &u.f_XX3)) return true;
                    break;
                }
                break;
            case 0x00000008:
                /* 111100.. ........ ........ 00011... */
                switch ((insn >> 8) & 0x3) {
                case 0x0:
                    /* 111100.. ........ ......00 00011... */
                    decode_insn32_extract_XX3(ctx, &u.f_XX3, insn);
                    switch ((insn >> 10) & 0x1) {
                    case 0x0:
                        /* 111100.. ........ .....000 00011... */
                        /* ../target/ppc/insn32.decode:1123 */
                        if (trans_XSCMPEQDP(ctx, &u.f_XX3)) return true;
                        break;
                    }
                    break;
                case 0x2:
                    /* 111100.. ........ ......10 00011... */
                    /* ../target/ppc/insn32.decode:1130 */
                    decode_insn32_extract_XX3_rc(ctx, &u.f_XX3_rc, insn);
                    if (trans_XVCMPEQSP(ctx, &u.f_XX3_rc)) return true;
                    break;
                case 0x3:
                    /* 111100.. ........ ......11 00011... */
                    /* ../target/ppc/insn32.decode:1134 */
                    decode_insn32_extract_XX3_rc(ctx, &u.f_XX3_rc, insn);
                    if (trans_XVCMPEQDP(ctx, &u.f_XX3_rc)) return true;
                    break;
                }
                break;
            case 0x00000040:
                /* 111100.. ........ ........ 01010... */
                switch ((insn >> 10) & 0x1) {
                case 0x0:
                    /* 111100.. ........ .....0.. 01010... */
                    /* ../target/ppc/insn32.decode:1099 */
                    decode_insn32_extract_XX3_dm(ctx, &u.f_XX3_dm, insn);
                    if (trans_XXPERMDI(ctx, &u.f_XX3_dm)) return true;
                    break;
                case 0x1:
                    /* 111100.. ........ .....1.. 01010... */
                    decode_insn32_extract_XX3(ctx, &u.f_XX3, insn);
                    switch ((insn >> 8) & 0x3) {
                    case 0x0:
                        /* 111100.. ........ .....100 01010... */
                        /* ../target/ppc/insn32.decode:1185 */
                        if (trans_XXLANDC(ctx, &u.f_XX3)) return true;
                        break;
                    case 0x1:
                        /* 111100.. ........ .....101 01010... */
                        /* ../target/ppc/insn32.decode:1191 */
                        if (trans_XXLORC(ctx, &u.f_XX3)) return true;
                        break;
                    }
                    break;
                }
                break;
            case 0x00000048:
                /* 111100.. ........ ........ 01011... */
                switch ((insn >> 8) & 0x3) {
                case 0x0:
                    /* 111100.. ........ ......00 01011... */
                    decode_insn32_extract_XX3(ctx, &u.f_XX3, insn);
                    switch ((insn >> 10) & 0x1) {
                    case 0x0:
                        /* 111100.. ........ .....000 01011... */
                        /* ../target/ppc/insn32.decode:1125 */
                        if (trans_XSCMPGTDP(ctx, &u.f_XX3)) return true;
                        break;
                    }
                    break;
                case 0x2:
                    /* 111100.. ........ ......10 01011... */
                    /* ../target/ppc/insn32.decode:1131 */
                    decode_insn32_extract_XX3_rc(ctx, &u.f_XX3_rc, insn);
                    if (trans_XVCMPGTSP(ctx, &u.f_XX3_rc)) return true;
                    break;
                case 0x3:
                    /* 111100.. ........ ......11 01011... */
                    /* ../target/ppc/insn32.decode:1135 */
                    decode_insn32_extract_XX3_rc(ctx, &u.f_XX3_rc, insn);
                    if (trans_XVCMPGTDP(ctx, &u.f_XX3_rc)) return true;
                    break;
                }
                break;
            case 0x00000080:
                /* 111100.. ........ ........ 10010... */
                switch ((insn >> 8) & 0x7) {
                case 0x2:
                    /* 111100.. ........ .....010 10010... */
                    switch ((insn >> 2) & 0x1) {
                    case 0x0:
                        /* 111100.. ........ .....010 100100.. */
                        /* ../target/ppc/insn32.decode:1090 */
                        decode_insn32_extract_XX2_uim2(ctx, &u.f_XX2_uim, insn);
                        if (trans_XXSPLTW(ctx, &u.f_XX2_uim)) return true;
                        break;
                    case 0x1:
                        /* 111100.. ........ .....010 100101.. */
                        /* ../target/ppc/insn32.decode:1094 */
                        decode_insn32_extract_XX2_uim4(ctx, &u.f_XX2_uim, insn);
                        if (trans_XXEXTRACTUW(ctx, &u.f_XX2_uim)) return true;
                        break;
                    }
                    break;
                case 0x4:
                    /* 111100.. ........ .....100 10010... */
                    /* ../target/ppc/insn32.decode:1186 */
                    decode_insn32_extract_XX3(ctx, &u.f_XX3, insn);
                    if (trans_XXLOR(ctx, &u.f_XX3)) return true;
                    break;
                case 0x5:
                    /* 111100.. ........ .....101 10010... */
                    /* ../target/ppc/insn32.decode:1190 */
                    decode_insn32_extract_XX3(ctx, &u.f_XX3, insn);
                    if (trans_XXLNAND(ctx, &u.f_XX3)) return true;
                    break;
                }
                break;
            case 0x00000088:
                /* 111100.. ........ ........ 10011... */
                switch ((insn >> 8) & 0x3) {
                case 0x0:
                    /* 111100.. ........ ......00 10011... */
                    decode_insn32_extract_XX3(ctx, &u.f_XX3, insn);
                    switch ((insn >> 10) & 0x1) {
                    case 0x0:
                        /* 111100.. ........ .....000 10011... */
                        /* ../target/ppc/insn32.decode:1124 */
                        if (trans_XSCMPGEDP(ctx, &u.f_XX3)) return true;
                        break;
                    }
                    break;
                case 0x2:
                    /* 111100.. ........ ......10 10011... */
                    /* ../target/ppc/insn32.decode:1132 */
                    decode_insn32_extract_XX3_rc(ctx, &u.f_XX3_rc, insn);
                    if (trans_XVCMPGESP(ctx, &u.f_XX3_rc)) return true;
                    break;
                case 0x3:
                    /* 111100.. ........ ......11 10011... */
                    /* ../target/ppc/insn32.decode:1136 */
                    decode_insn32_extract_XX3_rc(ctx, &u.f_XX3_rc, insn);
                    if (trans_XVCMPGEDP(ctx, &u.f_XX3_rc)) return true;
                    break;
                }
                break;
            case 0x000000c0:
                /* 111100.. ........ ........ 11010... */
                switch ((insn >> 8) & 0x7) {
                case 0x0:
                    /* 111100.. ........ .....000 11010... */
                    /* ../target/ppc/insn32.decode:1097 */
                    decode_insn32_extract_XX3(ctx, &u.f_XX3, insn);
                    if (trans_XXPERM(ctx, &u.f_XX3)) return true;
                    break;
                case 0x1:
                    /* 111100.. ........ .....001 11010... */
                    /* ../target/ppc/insn32.decode:1098 */
                    decode_insn32_extract_XX3(ctx, &u.f_XX3, insn);
                    if (trans_XXPERMR(ctx, &u.f_XX3)) return true;
                    break;
                case 0x2:
                    /* 111100.. ........ .....010 11010... */
                    switch ((insn >> 2) & 0x1) {
                    case 0x0:
                        /* 111100.. ........ .....010 110100.. */
                        switch (insn & 0x00180002) {
                        case 0x00000000:
                            /* 111100.. ...00... .....010 1101000. */
                            /* ../target/ppc/insn32.decode:1089 */
                            decode_insn32_extract_X_imm8(ctx, &u.f_X_imm8, insn);
                            if (trans_XXSPLTIB(ctx, &u.f_X_imm8)) return true;
                            break;
                        case 0x00180000:
                            /* 111100.. ...11... .....010 1101000. */
                            decode_insn32_extract_X_uim5(ctx, &u.f_X_uim5, insn);
                            switch ((insn >> 16) & 0x7) {
                            case 0x7:
                                /* 111100.. ...11111 .....010 1101000. */
                                /* ../target/ppc/insn32.decode:1112 */
                                if (trans_LXVKQ(ctx, &u.f_X_uim5)) return true;
                                break;
                            }
                            break;
                        }
                        break;
                    case 0x1:
                        /* 111100.. ........ .....010 110101.. */
                        /* ../target/ppc/insn32.decode:1095 */
                        decode_insn32_extract_XX2_uim4(ctx, &u.f_XX2_uim, insn);
                        if (trans_XXINSERTW(ctx, &u.f_XX2_uim)) return true;
                        break;
                    }
                    break;
                case 0x4:
                    /* 111100.. ........ .....100 11010... */
                    /* ../target/ppc/insn32.decode:1187 */
                    decode_insn32_extract_XX3(ctx, &u.f_XX3, insn);
                    if (trans_XXLXOR(ctx, &u.f_XX3)) return true;
                    break;
                case 0x5:
                    /* 111100.. ........ .....101 11010... */
                    /* ../target/ppc/insn32.decode:1189 */
                    decode_insn32_extract_XX3(ctx, &u.f_XX3, insn);
                    if (trans_XXLEQV(ctx, &u.f_XX3)) return true;
                    break;
                }
                break;
            case 0x000000c8:
                /* 111100.. ........ ........ 11011... */
                decode_insn32_extract_XX3_rc(ctx, &u.f_XX3_rc, insn);
                switch ((insn >> 8) & 0x3) {
                case 0x2:
                    /* 111100.. ........ ......10 11011... */
                    /* ../target/ppc/insn32.decode:1133 */
                    if (trans_XVCMPNESP(ctx, &u.f_XX3_rc)) return true;
                    break;
                case 0x3:
                    /* 111100.. ........ ......11 11011... */
                    /* ../target/ppc/insn32.decode:1137 */
                    if (trans_XVCMPNEDP(ctx, &u.f_XX3_rc)) return true;
                    break;
                }
                break;
            }
            break;
        case 0x2:
            /* 111100.. ........ ........ ..10.... */
            switch (insn & 0x00000788) {
            case 0x00000488:
                /* 111100.. ........ .....100 1.101... */
                decode_insn32_extract_XX2_bf_uim(ctx, &u.f_XX2_bf_uim, insn);
                switch (insn & 0x00000044) {
                case 0x00000000:
                    /* 111100.. ........ .....100 101010.. */
                    /* ../target/ppc/insn32.decode:1163 */
                    u.f_XX2_bf_uim.xb = deposit32(extract32(insn, 11, 5), 5, 27, extract32(insn, 1, 1));
                    if (trans_XSTSTDCSP(ctx, &u.f_XX2_bf_uim)) return true;
                    break;
                }
                break;
            case 0x00000508:
                /* 111100.. ........ .....101 0.101... */
                decode_insn32_extract_XX2(ctx, &u.f_XX2, insn);
                switch (insn & 0x00000044) {
                case 0x00000004:
                    /* 111100.. ........ .....101 001011.. */
                    /* ../target/ppc/insn32.decode:1156 */
                    if (trans_XSCVSPDPN(ctx, &u.f_XX2)) return true;
                    break;
                }
                break;
            case 0x00000588:
                /* 111100.. ........ .....101 1.101... */
                decode_insn32_extract_XX2_bf_uim(ctx, &u.f_XX2_bf_uim, insn);
                switch (insn & 0x00000044) {
                case 0x00000000:
                    /* 111100.. ........ .....101 101010.. */
                    /* ../target/ppc/insn32.decode:1164 */
                    u.f_XX2_bf_uim.xb = deposit32(extract32(insn, 11, 5), 5, 27, extract32(insn, 1, 1));
                    if (trans_XSTSTDCDP(ctx, &u.f_XX2_bf_uim)) return true;
                    break;
                }
                break;
            case 0x00000600:
                /* 111100.. ........ .....110 0.100... */
                decode_insn32_extract_XX2(ctx, &u.f_XX2, insn);
                switch (insn & 0x001f0044) {
                case 0x00000044:
                    /* 111100.. ...00000 .....110 011001.. */
                    /* ../target/ppc/insn32.decode:1031 */
                    if (trans_XVABSSP(ctx, &u.f_XX2)) return true;
                    break;
                }
                break;
            case 0x00000680:
                /* 111100.. ........ .....110 1.100... */
                decode_insn32_extract_XX2(ctx, &u.f_XX2, insn);
                switch (insn & 0x001f0044) {
                case 0x00000004:
                    /* 111100.. ...00000 .....110 101001.. */
                    /* ../target/ppc/insn32.decode:1033 */
                    if (trans_XVNABSSP(ctx, &u.f_XX2)) return true;
                    break;
                case 0x00000044:
                    /* 111100.. ...00000 .....110 111001.. */
                    /* ../target/ppc/insn32.decode:1035 */
                    if (trans_XVNEGSP(ctx, &u.f_XX2)) return true;
                    break;
                }
                break;
            case 0x00000688:
                /* 111100.. ........ .....110 1.101... */
                /* ../target/ppc/insn32.decode:1162 */
                decode_insn32_extract_XX2_uim7(ctx, &u.f_XX2_uim, insn);
                if (trans_XVTSTDCSP(ctx, &u.f_XX2_uim)) return true;
                break;
            case 0x00000700:
                /* 111100.. ........ .....111 0.100... */
                decode_insn32_extract_XX2(ctx, &u.f_XX2, insn);
                switch (insn & 0x001f0044) {
                case 0x00000044:
                    /* 111100.. ...00000 .....111 011001.. */
                    /* ../target/ppc/insn32.decode:1030 */
                    if (trans_XVABSDP(ctx, &u.f_XX2)) return true;
                    break;
                }
                break;
            case 0x00000708:
                /* 111100.. ........ .....111 0.101... */
                switch (insn & 0x00000044) {
                case 0x00000000:
                    /* 111100.. ........ .....111 001010.. */
                    decode_insn32_extract_X_imm5(ctx, &u.f_X_imm5, insn);
                    switch ((insn >> 1) & 0x1) {
                    case 0x0:
                        /* 111100.. ........ .....111 0010100. */
                        /* ../target/ppc/insn32.decode:1105 */
                        if (trans_XXGENPCVBM(ctx, &u.f_X_imm5)) return true;
                        break;
                    case 0x1:
                        /* 111100.. ........ .....111 0010101. */
                        /* ../target/ppc/insn32.decode:1106 */
                        if (trans_XXGENPCVHM(ctx, &u.f_X_imm5)) return true;
                        break;
                    }
                    break;
                case 0x00000040:
                    /* 111100.. ........ .....111 011010.. */
                    decode_insn32_extract_X_imm5(ctx, &u.f_X_imm5, insn);
                    switch ((insn >> 1) & 0x1) {
                    case 0x0:
                        /* 111100.. ........ .....111 0110100. */
                        /* ../target/ppc/insn32.decode:1107 */
                        if (trans_XXGENPCVWM(ctx, &u.f_X_imm5)) return true;
                        break;
                    case 0x1:
                        /* 111100.. ........ .....111 0110101. */
                        /* ../target/ppc/insn32.decode:1108 */
                        if (trans_XXGENPCVDM(ctx, &u.f_X_imm5)) return true;
                        break;
                    }
                    break;
                case 0x00000044:
                    /* 111100.. ........ .....111 011011.. */
                    switch ((insn >> 16) & 0x1f) {
                    case 0x2:
                        /* 111100.. ...00010 .....111 011011.. */
                        /* ../target/ppc/insn32.decode:1169 */
                        decode_insn32_extract_XX2_bf_xb(ctx, &u.f_XX2_bf_xb, insn);
                        if (trans_XVTLSBB(ctx, &u.f_XX2_bf_xb)) return true;
                        break;
                    case 0x9:
                        /* 111100.. ...01001 .....111 011011.. */
                        /* ../target/ppc/insn32.decode:1160 */
                        decode_insn32_extract_XX2(ctx, &u.f_XX2, insn);
                        if (trans_XVXSIGSP(ctx, &u.f_XX2)) return true;
                        break;
                    case 0x10:
                        /* 111100.. ...10000 .....111 011011.. */
                        /* ../target/ppc/insn32.decode:1154 */
                        decode_insn32_extract_XX2(ctx, &u.f_XX2, insn);
                        if (trans_XVCVBF16SPN(ctx, &u.f_XX2)) return true;
                        break;
                    case 0x11:
                        /* 111100.. ...10001 .....111 011011.. */
                        /* ../target/ppc/insn32.decode:1155 */
                        decode_insn32_extract_XX2(ctx, &u.f_XX2, insn);
                        if (trans_XVCVSPBF16(ctx, &u.f_XX2)) return true;
                        break;
                    }
                    break;
                }
                break;
            case 0x00000780:
                /* 111100.. ........ .....111 1.100... */
                decode_insn32_extract_XX2(ctx, &u.f_XX2, insn);
                switch (insn & 0x001f0044) {
                case 0x00000004:
                    /* 111100.. ...00000 .....111 101001.. */
                    /* ../target/ppc/insn32.decode:1032 */
                    if (trans_XVNABSDP(ctx, &u.f_XX2)) return true;
                    break;
                case 0x00000044:
                    /* 111100.. ...00000 .....111 111001.. */
                    /* ../target/ppc/insn32.decode:1034 */
                    if (trans_XVNEGDP(ctx, &u.f_XX2)) return true;
                    break;
                }
                break;
            case 0x00000788:
                /* 111100.. ........ .....111 1.101... */
                /* ../target/ppc/insn32.decode:1161 */
                decode_insn32_extract_XX2_uim7(ctx, &u.f_XX2_uim, insn);
                if (trans_XVTSTDCDP(ctx, &u.f_XX2_uim)) return true;
                break;
            }
            break;
        case 0x3:
            /* 111100.. ........ ........ ..11.... */
            /* ../target/ppc/insn32.decode:1101 */
            decode_insn32_extract_XX4(ctx, &u.f_XX4, insn);
            if (trans_XXSEL(ctx, &u.f_XX4)) return true;
            break;
        }
        break;
    case 0x3d:
        /* 111101.. ........ ........ ........ */
        switch (insn & 0x00000003) {
        case 0x00000001:
            /* 111101.. ........ ........ ......01 */
            decode_insn32_extract_DQ_TSX(ctx, &u.f_D, insn);
            switch ((insn >> 2) & 0x1) {
            case 0x0:
                /* 111101.. ........ ........ .....001 */
                /* ../target/ppc/insn32.decode:982 */
                if (trans_LXV(ctx, &u.f_D)) return true;
                break;
            case 0x1:
                /* 111101.. ........ ........ .....101 */
                /* ../target/ppc/insn32.decode:983 */
                if (trans_STXV(ctx, &u.f_D)) return true;
                break;
            }
            break;
        case 0x00000002:
            /* 111101.. ........ ........ ......10 */
            /* ../target/ppc/insn32.decode:979 */
            decode_insn32_extract_DS(ctx, &u.f_D, insn);
            if (trans_STXSD(ctx, &u.f_D)) return true;
            break;
        case 0x00000003:
            /* 111101.. ........ ........ ......11 */
            /* ../target/ppc/insn32.decode:981 */
            decode_insn32_extract_DS(ctx, &u.f_D, insn);
            if (trans_STXSSP(ctx, &u.f_D)) return true;
            break;
        }
        break;
    case 0x3e:
        /* 111110.. ........ ........ ........ */
        switch (insn & 0x00000003) {
        case 0x00000000:
            /* 111110.. ........ ........ ......00 */
            /* ../target/ppc/insn32.decode:342 */
            decode_insn32_extract_DS(ctx, &u.f_D, insn);
            if (trans_STD(ctx, &u.f_D)) return true;
            break;
        case 0x00000001:
            /* 111110.. ........ ........ ......01 */
            /* ../target/ppc/insn32.decode:343 */
            decode_insn32_extract_DS(ctx, &u.f_D, insn);
            if (trans_STDU(ctx, &u.f_D)) return true;
            break;
        case 0x00000002:
            /* 111110.. ........ ........ ......10 */
            decode_insn32_extract_DS_rtp(ctx, &u.f_D, insn);
            switch ((insn >> 21) & 0x1) {
            case 0x0:
                /* 111110.. ..0..... ........ ......10 */
                /* ../target/ppc/insn32.decode:347 */
                if (trans_STQ(ctx, &u.f_D)) return true;
                break;
            }
            break;
        }
        break;
    case 0x3f:
        /* 111111.. ........ ........ ........ */
        switch ((insn >> 1) & 0x1f) {
        case 0x0:
            /* 111111.. ........ ........ ..00000. */
            switch ((insn >> 6) & 0x1f) {
            case 0x4:
                /* 111111.. ........ .....001 0000000. */
                /* ../target/ppc/insn32.decode:529 */
                decode_insn32_extract_X_bf(ctx, &u.f_X_bf, insn);
                if (trans_FTDIV(ctx, &u.f_X_bf)) return true;
                break;
            case 0x5:
                /* 111111.. ........ .....001 0100000. */
                /* ../target/ppc/insn32.decode:530 */
                decode_insn32_extract_X_bf_b(ctx, &u.f_X_bf_b, insn);
                if (trans_FTSQRT(ctx, &u.f_X_bf_b)) return true;
                break;
            }
            break;
        case 0x2:
            /* 111111.. ........ ........ ..00010. */
            switch ((insn >> 6) & 0xf) {
            case 0x0:
                /* 111111.. ........ ......00 0000010. */
                decode_insn32_extract_X_tp_ap_bp_rc(ctx, &u.f_X_rc, insn);
                switch (insn & 0x00210c00) {
                case 0x00000000:
                    /* 111111.. ..0....0 ....0000 0000010. */
                    /* ../target/ppc/insn32.decode:574 */
                    if (trans_DADDQ(ctx, &u.f_X_rc)) return true;
                    break;
                case 0x00000400:
                    /* 111111.. ..0....0 ....0100 0000010. */
                    /* ../target/ppc/insn32.decode:577 */
                    if (trans_DSUBQ(ctx, &u.f_X_rc)) return true;
                    break;
                }
                break;
            case 0x1:
                /* 111111.. ........ ......00 0100010. */
                decode_insn32_extract_X_tp_ap_bp_rc(ctx, &u.f_X_rc, insn);
                switch (insn & 0x00210c00) {
                case 0x00000000:
                    /* 111111.. ..0....0 ....0000 0100010. */
                    /* ../target/ppc/insn32.decode:580 */
                    if (trans_DMULQ(ctx, &u.f_X_rc)) return true;
                    break;
                case 0x00000400:
                    /* 111111.. ..0....0 ....0100 0100010. */
                    /* ../target/ppc/insn32.decode:583 */
                    if (trans_DDIVQ(ctx, &u.f_X_rc)) return true;
                    break;
                }
                break;
            case 0x2:
                /* 111111.. ........ ......00 1000010. */
                decode_insn32_extract_Z22_tap_sh_rc(ctx, &u.f_Z22_ta_sh_rc, insn);
                switch (insn & 0x00210000) {
                case 0x00000000:
                    /* 111111.. ..0....0 ......00 1000010. */
                    /* ../target/ppc/insn32.decode:658 */
                    if (trans_DSCLIQ(ctx, &u.f_Z22_ta_sh_rc)) return true;
                    break;
                }
                break;
            case 0x3:
                /* 111111.. ........ ......00 1100010. */
                decode_insn32_extract_Z22_tap_sh_rc(ctx, &u.f_Z22_ta_sh_rc, insn);
                switch (insn & 0x00210000) {
                case 0x00000000:
                    /* 111111.. ..0....0 ......00 1100010. */
                    /* ../target/ppc/insn32.decode:661 */
                    if (trans_DSCRIQ(ctx, &u.f_Z22_ta_sh_rc)) return true;
                    break;
                }
                break;
            case 0x4:
                /* 111111.. ........ ......01 0000010. */
                decode_insn32_extract_X_bf_ap_bp(ctx, &u.f_X_bf, insn);
                switch (insn & 0x00010c00) {
                case 0x00000000:
                    /* 111111.. .......0 ....0001 0000010. */
                    /* ../target/ppc/insn32.decode:591 */
                    if (trans_DCMPOQ(ctx, &u.f_X_bf)) return true;
                    break;
                case 0x00000400:
                    /* 111111.. .......0 ....0101 0000010. */
                    /* ../target/ppc/insn32.decode:588 */
                    if (trans_DCMPUQ(ctx, &u.f_X_bf)) return true;
                    break;
                }
                break;
            case 0x5:
                /* 111111.. ........ ......01 0100010. */
                switch ((insn >> 10) & 0x3) {
                case 0x0:
                    /* 111111.. ........ ....0001 0100010. */
                    decode_insn32_extract_X_bf_ap_bp(ctx, &u.f_X_bf, insn);
                    switch ((insn >> 16) & 0x1) {
                    case 0x0:
                        /* 111111.. .......0 ....0001 0100010. */
                        /* ../target/ppc/insn32.decode:602 */
                        if (trans_DTSTEXQ(ctx, &u.f_X_bf)) return true;
                        break;
                    }
                    break;
                case 0x1:
                    /* 111111.. ........ ....0101 0100010. */
                    /* ../target/ppc/insn32.decode:605 */
                    decode_insn32_extract_X_bf_a_bp(ctx, &u.f_X_bf, insn);
                    if (trans_DTSTSFQ(ctx, &u.f_X_bf)) return true;
                    break;
                }
                break;
            case 0x6:
                /* 111111.. ........ ......01 1000010. */
                decode_insn32_extract_Z22_bf_frap(ctx, &u.f_Z22_bf_fra, insn);
                switch ((insn >> 16) & 0x1) {
                case 0x0:
                    /* 111111.. .......0 ......01 1000010. */
                    /* ../target/ppc/insn32.decode:596 */
                    if (trans_DTSTDCQ(ctx, &u.f_Z22_bf_fra)) return true;
                    break;
                }
                break;
            case 0x7:
                /* 111111.. ........ ......01 1100010. */
                decode_insn32_extract_Z22_bf_frap(ctx, &u.f_Z22_bf_fra, insn);
                switch ((insn >> 16) & 0x1) {
                case 0x0:
                    /* 111111.. .......0 ......01 1100010. */
                    /* ../target/ppc/insn32.decode:599 */
                    if (trans_DTSTDGQ(ctx, &u.f_Z22_bf_fra)) return true;
                    break;
                }
                break;
            case 0x8:
                /* 111111.. ........ ......10 0000010. */
                switch (insn & 0x00200400) {
                case 0x00000000:
                    /* 111111.. ..0..... .....010 0000010. */
                    /* ../target/ppc/insn32.decode:630 */
                    decode_insn32_extract_X_tp_b_rc(ctx, &u.f_X_tb_rc, insn);
                    if (trans_DCTQPQ(ctx, &u.f_X_tb_rc)) return true;
                    break;
                case 0x00000400:
                    /* 111111.. ..0..... .....110 0000010. */
                    decode_insn32_extract_X_tbp_rc(ctx, &u.f_X_tb_rc, insn);
                    switch ((insn >> 11) & 0x1) {
                    case 0x0:
                        /* 111111.. ..0..... ....0110 0000010. */
                        /* ../target/ppc/insn32.decode:633 */
                        if (trans_DRDPQ(ctx, &u.f_X_tb_rc)) return true;
                        break;
                    }
                    break;
                }
                break;
            case 0x9:
                /* 111111.. ........ ......10 0100010. */
                switch ((insn >> 10) & 0x1) {
                case 0x0:
                    /* 111111.. ........ .....010 0100010. */
                    decode_insn32_extract_X_t_bp_rc(ctx, &u.f_X_tb_rc, insn);
                    switch ((insn >> 11) & 0x1) {
                    case 0x0:
                        /* 111111.. ........ ....0010 0100010. */
                        /* ../target/ppc/insn32.decode:640 */
                        if (trans_DCTFIXQ(ctx, &u.f_X_tb_rc)) return true;
                        break;
                    }
                    break;
                case 0x1:
                    /* 111111.. ........ .....110 0100010. */
                    decode_insn32_extract_X_tp_b_rc(ctx, &u.f_X_tb_rc, insn);
                    switch ((insn >> 21) & 0x1) {
                    case 0x0:
                        /* 111111.. ..0..... .....110 0100010. */
                        /* ../target/ppc/insn32.decode:636 */
                        if (trans_DCFFIXQ(ctx, &u.f_X_tb_rc)) return true;
                        break;
                    }
                    break;
                }
                break;
            case 0xa:
                /* 111111.. ........ ......10 1000010. */
                switch (insn & 0x00200c00) {
                case 0x00000000:
                    /* 111111.. ..0..... ....0010 1000010. */
                    /* ../target/ppc/insn32.decode:646 */
                    decode_insn32_extract_X_tbp_sp_rc(ctx, &u.f_X_tb_sp_rc, insn);
                    if (trans_DDEDPDQ(ctx, &u.f_X_tb_sp_rc)) return true;
                    break;
                case 0x00000400:
                    /* 111111.. ..0..... ....0110 1000010. */
                    /* ../target/ppc/insn32.decode:649 */
                    decode_insn32_extract_X_tbp_s_rc(ctx, &u.f_X_tb_s_rc, insn);
                    if (trans_DENBCDQ(ctx, &u.f_X_tb_s_rc)) return true;
                    break;
                }
                break;
            case 0xb:
                /* 111111.. ........ ......10 1100010. */
                switch ((insn >> 10) & 0x3) {
                case 0x0:
                    /* 111111.. ........ ....0010 1100010. */
                    /* ../target/ppc/insn32.decode:652 */
                    decode_insn32_extract_X_t_bp_rc(ctx, &u.f_X_tb_rc, insn);
                    if (trans_DXEXQ(ctx, &u.f_X_tb_rc)) return true;
                    break;
                case 0x1:
                    /* 111111.. ........ ....0110 1100010. */
                    decode_insn32_extract_X_tp_a_bp_rc(ctx, &u.f_X_rc, insn);
                    switch ((insn >> 21) & 0x1) {
                    case 0x0:
                        /* 111111.. ..0..... ....0110 1100010. */
                        /* ../target/ppc/insn32.decode:655 */
                        if (trans_DIEXQ(ctx, &u.f_X_rc)) return true;
                        break;
                    }
                    break;
                }
                break;
            case 0xf:
                /* 111111.. ........ ......11 1100010. */
                switch (insn & 0x001f0400) {
                case 0x00000400:
                    /* 111111.. ...00000 .....111 1100010. */
                    decode_insn32_extract_X_frtp_vrb(ctx, &u.f_X_frtp_vrb, insn);
                    switch ((insn >> 21) & 0x1) {
                    case 0x0:
                        /* 111111.. ..000000 .....111 1100010. */
                        /* ../target/ppc/insn32.decode:637 */
                        if (trans_DCFFIXQQ(ctx, &u.f_X_frtp_vrb)) return true;
                        break;
                    }
                    break;
                case 0x00010400:
                    /* 111111.. ...00001 .....111 1100010. */
                    decode_insn32_extract_X_vrt_frbp(ctx, &u.f_X_vrt_frbp, insn);
                    switch ((insn >> 11) & 0x1) {
                    case 0x0:
                        /* 111111.. ...00001 ....0111 1100010. */
                        /* ../target/ppc/insn32.decode:641 */
                        if (trans_DCTFIXQQ(ctx, &u.f_X_vrt_frbp)) return true;
                        break;
                    }
                    break;
                }
                break;
            }
            break;
        case 0x3:
            /* 111111.. ........ ........ ..00011. */
            switch (insn & 0x000009c0) {
            case 0x00000000:
                /* 111111.. ........ ....0..0 0000011. */
                decode_insn32_extract_Z23_tabp(ctx, &u.f_Z23_tab, insn);
                switch (insn & 0x00210000) {
                case 0x00000000:
                    /* 111111.. ..0....0 ....0..0 0000011. */
                    /* ../target/ppc/insn32.decode:616 */
                    if (trans_DQUAQ(ctx, &u.f_Z23_tab)) return true;
                    break;
                }
                break;
            case 0x00000040:
                /* 111111.. ........ ....0..0 0100011. */
                decode_insn32_extract_Z23_tp_a_bp(ctx, &u.f_Z23_tab, insn);
                switch ((insn >> 21) & 0x1) {
                case 0x0:
                    /* 111111.. ..0..... ....0..0 0100011. */
                    /* ../target/ppc/insn32.decode:619 */
                    if (trans_DRRNDQ(ctx, &u.f_Z23_tab)) return true;
                    break;
                }
                break;
            case 0x00000080:
                /* 111111.. ........ ....0..0 1000011. */
                decode_insn32_extract_Z23_te_tbp(ctx, &u.f_Z23_te_tb, insn);
                switch ((insn >> 21) & 0x1) {
                case 0x0:
                    /* 111111.. ..0..... ....0..0 1000011. */
                    /* ../target/ppc/insn32.decode:613 */
                    if (trans_DQUAIQ(ctx, &u.f_Z23_te_tb)) return true;
                    break;
                }
                break;
            case 0x000000c0:
                /* 111111.. ........ ....0..0 1100011. */
                decode_insn32_extract_Z23_tbp(ctx, &u.f_Z23_tb, insn);
                switch ((insn >> 21) & 0x1) {
                case 0x0:
                    /* 111111.. ..0..... ....0..0 1100011. */
                    /* ../target/ppc/insn32.decode:622 */
                    if (trans_DRINTXQ(ctx, &u.f_Z23_tb)) return true;
                    break;
                }
                break;
            case 0x00000140:
                /* 111111.. ........ ....0..1 0100011. */
                decode_insn32_extract_X_bf_uim_bp(ctx, &u.f_X_bf_uim, insn);
                switch ((insn >> 9) & 0x3) {
                case 0x2:
                    /* 111111.. ........ ....0101 0100011. */
                    /* ../target/ppc/insn32.decode:608 */
                    if (trans_DTSTSFIQ(ctx, &u.f_X_bf_uim)) return true;
                    break;
                }
                break;
            case 0x000001c0:
                /* 111111.. ........ ....0..1 1100011. */
                decode_insn32_extract_Z23_tbp(ctx, &u.f_Z23_tb, insn);
                switch ((insn >> 21) & 0x1) {
                case 0x0:
                    /* 111111.. ..0..... ....0..1 1100011. */
                    /* ../target/ppc/insn32.decode:625 */
                    if (trans_DRINTNQ(ctx, &u.f_Z23_tb)) return true;
                    break;
                }
                break;
            }
            break;
        case 0x4:
            /* 111111.. ........ ........ ..00100. */
            switch ((insn >> 6) & 0x1f) {
            case 0x2:
                /* 111111.. ........ .....000 1000100. */
                /* ../target/ppc/insn32.decode:1126 */
                decode_insn32_extract_X(ctx, &u.f_X, insn);
                if (trans_XSCMPEQQP(ctx, &u.f_X)) return true;
                break;
            case 0x6:
                /* 111111.. ........ .....001 1000100. */
                /* ../target/ppc/insn32.decode:1127 */
                decode_insn32_extract_X(ctx, &u.f_X, insn);
                if (trans_XSCMPGEQP(ctx, &u.f_X)) return true;
                break;
            case 0x7:
                /* 111111.. ........ .....001 1100100. */
                /* ../target/ppc/insn32.decode:1128 */
                decode_insn32_extract_X(ctx, &u.f_X, insn);
                if (trans_XSCMPGTQP(ctx, &u.f_X)) return true;
                break;
            case 0xc:
                /* 111111.. ........ .....011 0000100. */
                /* ../target/ppc/insn32.decode:1067 */
                decode_insn32_extract_X_rc(ctx, &u.f_X_rc, insn);
                if (trans_XSMADDQP(ctx, &u.f_X_rc)) return true;
                break;
            case 0xd:
                /* 111111.. ........ .....011 0100100. */
                /* ../target/ppc/insn32.decode:1073 */
                decode_insn32_extract_X_rc(ctx, &u.f_X_rc, insn);
                if (trans_XSMSUBQP(ctx, &u.f_X_rc)) return true;
                break;
            case 0xe:
                /* 111111.. ........ .....011 1000100. */
                /* ../target/ppc/insn32.decode:1079 */
                decode_insn32_extract_X_rc(ctx, &u.f_X_rc, insn);
                if (trans_XSNMADDQP(ctx, &u.f_X_rc)) return true;
                break;
            case 0xf:
                /* 111111.. ........ .....011 1100100. */
                /* ../target/ppc/insn32.decode:1085 */
                decode_insn32_extract_X_rc(ctx, &u.f_X_rc, insn);
                if (trans_XSNMSUBQP(ctx, &u.f_X_rc)) return true;
                break;
            case 0x15:
                /* 111111.. ........ .....101 0100100. */
                /* ../target/ppc/insn32.decode:1120 */
                decode_insn32_extract_X(ctx, &u.f_X, insn);
                if (trans_XSMAXCQP(ctx, &u.f_X)) return true;
                break;
            case 0x16:
                /* 111111.. ........ .....101 1000100. */
                /* ../target/ppc/insn32.decode:1165 */
                decode_insn32_extract_XX2_bf_uim(ctx, &u.f_XX2_bf_uim, insn);
                u.f_XX2_bf_uim.xb = extract32(insn, 11, 5);
                if (trans_XSTSTDCQP(ctx, &u.f_XX2_bf_uim)) return true;
                break;
            case 0x17:
                /* 111111.. ........ .....101 1100100. */
                /* ../target/ppc/insn32.decode:1121 */
                decode_insn32_extract_X(ctx, &u.f_X, insn);
                if (trans_XSMINCQP(ctx, &u.f_X)) return true;
                break;
            case 0x1a:
                /* 111111.. ........ .....110 1000100. */
                switch ((insn >> 16) & 0x1f) {
                case 0x0:
                    /* 111111.. ...00000 .....110 1000100. */
                    /* ../target/ppc/insn32.decode:1150 */
                    decode_insn32_extract_X_tb(ctx, &u.f_X_tb, insn);
                    if (trans_XSCVQPUQZ(ctx, &u.f_X_tb)) return true;
                    break;
                case 0x3:
                    /* 111111.. ...00011 .....110 1000100. */
                    /* ../target/ppc/insn32.decode:1152 */
                    decode_insn32_extract_X_tb(ctx, &u.f_X_tb, insn);
                    if (trans_XSCVUQQP(ctx, &u.f_X_tb)) return true;
                    break;
                case 0x8:
                    /* 111111.. ...01000 .....110 1000100. */
                    /* ../target/ppc/insn32.decode:1151 */
                    decode_insn32_extract_X_tb(ctx, &u.f_X_tb, insn);
                    if (trans_XSCVQPSQZ(ctx, &u.f_X_tb)) return true;
                    break;
                case 0xb:
                    /* 111111.. ...01011 .....110 1000100. */
                    /* ../target/ppc/insn32.decode:1153 */
                    decode_insn32_extract_X_tb(ctx, &u.f_X_tb, insn);
                    if (trans_XSCVSQQP(ctx, &u.f_X_tb)) return true;
                    break;
                case 0x14:
                    /* 111111.. ...10100 .....110 1000100. */
                    /* ../target/ppc/insn32.decode:1149 */
                    decode_insn32_extract_X_tb_rc(ctx, &u.f_X_tb_rc, insn);
                    if (trans_XSCVQPDP(ctx, &u.f_X_tb_rc)) return true;
                    break;
                }
                break;
            }
            break;
        case 0x7:
            /* 111111.. ........ ........ ..00111. */
            switch ((insn >> 6) & 0x1f) {
            case 0x12:
                /* 111111.. ........ .....100 1000111. */
                /* ../target/ppc/insn32.decode:559 */
                decode_insn32_extract_X_t_rc(ctx, &u.f_X_t_rc, insn);
                if (trans_MFFS_ISA207(ctx, &u.f_X_t_rc)) return true;
                switch ((insn >> 16) & 0x1f) {
                case 0x0:
                    /* 111111.. ...00000 .....100 1000111. */
                    /* ../target/ppc/insn32.decode:561 */
                    decode_insn32_extract_X_t_rc(ctx, &u.f_X_t_rc, insn);
                    if (trans_MFFS(ctx, &u.f_X_t_rc)) return true;
                    break;
                case 0x1:
                    /* 111111.. ...00001 .....100 1000111. */
                    /* ../target/ppc/insn32.decode:562 */
                    decode_insn32_extract_X_t(ctx, &u.f_X_t, insn);
                    if (trans_MFFSCE(ctx, &u.f_X_t)) return true;
                    break;
                case 0x14:
                    /* 111111.. ...10100 .....100 1000111. */
                    /* ../target/ppc/insn32.decode:564 */
                    decode_insn32_extract_X_tb(ctx, &u.f_X_tb, insn);
                    if (trans_MFFSCDRN(ctx, &u.f_X_tb)) return true;
                    break;
                case 0x15:
                    /* 111111.. ...10101 .....100 1000111. */
                    /* ../target/ppc/insn32.decode:566 */
                    decode_insn32_extract_X_imm3(ctx, &u.f_X_imm3, insn);
                    if (trans_MFFSCDRNI(ctx, &u.f_X_imm3)) return true;
                    break;
                case 0x16:
                    /* 111111.. ...10110 .....100 1000111. */
                    /* ../target/ppc/insn32.decode:563 */
                    decode_insn32_extract_X_tb(ctx, &u.f_X_tb, insn);
                    if (trans_MFFSCRN(ctx, &u.f_X_tb)) return true;
                    break;
                case 0x17:
                    /* 111111.. ...10111 .....100 1000111. */
                    /* ../target/ppc/insn32.decode:565 */
                    decode_insn32_extract_X_imm2(ctx, &u.f_X_imm2, insn);
                    if (trans_MFFSCRNI(ctx, &u.f_X_imm2)) return true;
                    break;
                case 0x18:
                    /* 111111.. ...11000 .....100 1000111. */
                    /* ../target/ppc/insn32.decode:567 */
                    decode_insn32_extract_X_t(ctx, &u.f_X_t, insn);
                    if (trans_MFFSL(ctx, &u.f_X_t)) return true;
                    break;
                }
                break;
            }
            break;
        case 0x12:
            /* 111111.. ........ ........ ..10010. */
            /* ../target/ppc/insn32.decode:517 */
            decode_insn32_extract_A_tab(ctx, &u.f_A_tab, insn);
            if (trans_FDIV(ctx, &u.f_A_tab)) return true;
            break;
        case 0x14:
            /* 111111.. ........ ........ ..10100. */
            /* ../target/ppc/insn32.decode:511 */
            decode_insn32_extract_A_tab(ctx, &u.f_A_tab, insn);
            if (trans_FSUB(ctx, &u.f_A_tab)) return true;
            break;
        case 0x15:
            /* 111111.. ........ ........ ..10101. */
            /* ../target/ppc/insn32.decode:508 */
            decode_insn32_extract_A_tab(ctx, &u.f_A_tab, insn);
            if (trans_FADD(ctx, &u.f_A_tab)) return true;
            break;
        case 0x16:
            /* 111111.. ........ ........ ..10110. */
            /* ../target/ppc/insn32.decode:520 */
            decode_insn32_extract_A_tb(ctx, &u.f_A_tb, insn);
            if (trans_FSQRT(ctx, &u.f_A_tb)) return true;
            break;
        case 0x17:
            /* 111111.. ........ ........ ..10111. */
            /* ../target/ppc/insn32.decode:546 */
            decode_insn32_extract_A(ctx, &u.f_A, insn);
            if (trans_FSEL(ctx, &u.f_A)) return true;
            break;
        case 0x18:
            /* 111111.. ........ ........ ..11000. */
            /* ../target/ppc/insn32.decode:523 */
            decode_insn32_extract_A_tb(ctx, &u.f_A_tb, insn);
            if (trans_FRE(ctx, &u.f_A_tb)) return true;
            break;
        case 0x19:
            /* 111111.. ........ ........ ..11001. */
            /* ../target/ppc/insn32.decode:514 */
            decode_insn32_extract_A_tac(ctx, &u.f_A_tac, insn);
            if (trans_FMUL(ctx, &u.f_A_tac)) return true;
            break;
        case 0x1a:
            /* 111111.. ........ ........ ..11010. */
            /* ../target/ppc/insn32.decode:526 */
            decode_insn32_extract_A_tb(ctx, &u.f_A_tb, insn);
            if (trans_FRSQRTE(ctx, &u.f_A_tb)) return true;
            break;
        case 0x1c:
            /* 111111.. ........ ........ ..11100. */
            /* ../target/ppc/insn32.decode:535 */
            decode_insn32_extract_A(ctx, &u.f_A, insn);
            if (trans_FMSUB(ctx, &u.f_A)) return true;
            break;
        case 0x1d:
            /* 111111.. ........ ........ ..11101. */
            /* ../target/ppc/insn32.decode:532 */
            decode_insn32_extract_A(ctx, &u.f_A, insn);
            if (trans_FMADD(ctx, &u.f_A)) return true;
            break;
        case 0x1e:
            /* 111111.. ........ ........ ..11110. */
            /* ../target/ppc/insn32.decode:541 */
            decode_insn32_extract_A(ctx, &u.f_A, insn);
            if (trans_FNMSUB(ctx, &u.f_A)) return true;
            break;
        case 0x1f:
            /* 111111.. ........ ........ ..11111. */
            /* ../target/ppc/insn32.decode:538 */
            decode_insn32_extract_A(ctx, &u.f_A, insn);
            if (trans_FNMADD(ctx, &u.f_A)) return true;
            break;
        }
        break;
    }
    return false;
}
